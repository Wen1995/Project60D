// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=null.  DO NOT EDIT!
#pragma warning disable
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace com.game.framework.protocol {
  
  public static partial class Database {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    #endregion
    #region Extensions
    internal static readonly object Descriptor;
    static Database() {
      Descriptor = null;
    }
    #endregion
    
  }
  #region Messages
  public sealed partial class UserResource : pb::GeneratedMessageLite<UserResource, UserResource.Builder> {
    private UserResource() { }
    private static readonly UserResource defaultInstance = new UserResource().MakeReadOnly();
    private static readonly string[] _userResourceFieldNames = new string[] { "resourceInfos" };
    private static readonly uint[] _userResourceFieldTags = new uint[] { 10 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static UserResource DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override UserResource DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override UserResource ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int ResourceInfosFieldNumber = 1;
    private pbc::PopsicleList<global::com.game.framework.protocol.ResourceInfo> resourceInfos_ = new pbc::PopsicleList<global::com.game.framework.protocol.ResourceInfo>();
    public scg::IList<global::com.game.framework.protocol.ResourceInfo> ResourceInfosList {
      get { return resourceInfos_; }
    }
    public int ResourceInfosCount {
      get { return resourceInfos_.Count; }
    }
    public global::com.game.framework.protocol.ResourceInfo GetResourceInfos(int index) {
      return resourceInfos_[index];
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _userResourceFieldNames;
      if (resourceInfos_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], resourceInfos_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::com.game.framework.protocol.ResourceInfo element in ResourceInfosList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      foreach(global::com.game.framework.protocol.ResourceInfo i in resourceInfos_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      UserResource other = obj as UserResource;
      if (other == null) return false;
      if(resourceInfos_.Count != other.resourceInfos_.Count) return false;
      for(int ix=0; ix < resourceInfos_.Count; ix++)
        if(!resourceInfos_[ix].Equals(other.resourceInfos_[ix])) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static UserResource ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static UserResource ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static UserResource ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static UserResource ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static UserResource ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static UserResource ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static UserResource ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static UserResource ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static UserResource ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static UserResource ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private UserResource MakeReadOnly() {
      resourceInfos_.MakeReadOnly();
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(UserResource prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<UserResource, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(UserResource cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private UserResource result;
      
      private UserResource PrepareBuilder() {
        if (resultIsReadOnly) {
          UserResource original = result;
          result = new UserResource();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override UserResource MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override UserResource DefaultInstanceForType {
        get { return global::com.game.framework.protocol.UserResource.DefaultInstance; }
      }
      
      public override UserResource BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is UserResource) {
          return MergeFrom((UserResource) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(UserResource other) {
        if (other == global::com.game.framework.protocol.UserResource.DefaultInstance) return this;
        PrepareBuilder();
        if (other.resourceInfos_.Count != 0) {
          result.resourceInfos_.Add(other.resourceInfos_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_userResourceFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _userResourceFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.resourceInfos_, global::com.game.framework.protocol.ResourceInfo.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public pbc::IPopsicleList<global::com.game.framework.protocol.ResourceInfo> ResourceInfosList {
        get { return PrepareBuilder().resourceInfos_; }
      }
      public int ResourceInfosCount {
        get { return result.ResourceInfosCount; }
      }
      public global::com.game.framework.protocol.ResourceInfo GetResourceInfos(int index) {
        return result.GetResourceInfos(index);
      }
      public Builder SetResourceInfos(int index, global::com.game.framework.protocol.ResourceInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.resourceInfos_[index] = value;
        return this;
      }
      public Builder SetResourceInfos(int index, global::com.game.framework.protocol.ResourceInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.resourceInfos_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddResourceInfos(global::com.game.framework.protocol.ResourceInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.resourceInfos_.Add(value);
        return this;
      }
      public Builder AddResourceInfos(global::com.game.framework.protocol.ResourceInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.resourceInfos_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeResourceInfos(scg::IEnumerable<global::com.game.framework.protocol.ResourceInfo> values) {
        PrepareBuilder();
        result.resourceInfos_.Add(values);
        return this;
      }
      public Builder ClearResourceInfos() {
        PrepareBuilder();
        result.resourceInfos_.Clear();
        return this;
      }
    }
    static UserResource() {
      object.ReferenceEquals(global::com.game.framework.protocol.Database.Descriptor, null);
    }
  }
  
  public sealed partial class ResourceInfo : pb::GeneratedMessageLite<ResourceInfo, ResourceInfo.Builder> {
    private ResourceInfo() { }
    private static readonly ResourceInfo defaultInstance = new ResourceInfo().MakeReadOnly();
    private static readonly string[] _resourceInfoFieldNames = new string[] { "configId", "number" };
    private static readonly uint[] _resourceInfoFieldTags = new uint[] { 8, 16 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ResourceInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override ResourceInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ResourceInfo ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int ConfigIdFieldNumber = 1;
    private bool hasConfigId;
    private int configId_;
    public bool HasConfigId {
      get { return hasConfigId; }
    }
    public int ConfigId {
      get { return configId_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int NumberFieldNumber = 2;
    private bool hasNumber;
    private int number_;
    public bool HasNumber {
      get { return hasNumber; }
    }
    public int Number {
      get { return number_; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _resourceInfoFieldNames;
      if (hasConfigId) {
        output.WriteInt32(1, field_names[0], ConfigId);
      }
      if (hasNumber) {
        output.WriteInt32(2, field_names[1], Number);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasConfigId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, ConfigId);
        }
        if (hasNumber) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Number);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasConfigId) hash ^= configId_.GetHashCode();
      if (hasNumber) hash ^= number_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      ResourceInfo other = obj as ResourceInfo;
      if (other == null) return false;
      if (hasConfigId != other.hasConfigId || (hasConfigId && !configId_.Equals(other.configId_))) return false;
      if (hasNumber != other.hasNumber || (hasNumber && !number_.Equals(other.number_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ResourceInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ResourceInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ResourceInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ResourceInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ResourceInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ResourceInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ResourceInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ResourceInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ResourceInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ResourceInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ResourceInfo MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(ResourceInfo prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<ResourceInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ResourceInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ResourceInfo result;
      
      private ResourceInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          ResourceInfo original = result;
          result = new ResourceInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ResourceInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override ResourceInfo DefaultInstanceForType {
        get { return global::com.game.framework.protocol.ResourceInfo.DefaultInstance; }
      }
      
      public override ResourceInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is ResourceInfo) {
          return MergeFrom((ResourceInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ResourceInfo other) {
        if (other == global::com.game.framework.protocol.ResourceInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasConfigId) {
          ConfigId = other.ConfigId;
        }
        if (other.HasNumber) {
          Number = other.Number;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_resourceInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _resourceInfoFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasConfigId = input.ReadInt32(ref result.configId_);
              break;
            }
            case 16: {
              result.hasNumber = input.ReadInt32(ref result.number_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasConfigId {
        get { return result.hasConfigId; }
      }
      public int ConfigId {
        get { return result.ConfigId; }
        set { SetConfigId(value); }
      }
      public Builder SetConfigId(int value) {
        PrepareBuilder();
        result.hasConfigId = true;
        result.configId_ = value;
        return this;
      }
      public Builder ClearConfigId() {
        PrepareBuilder();
        result.hasConfigId = false;
        result.configId_ = 0;
        return this;
      }
      
      public bool HasNumber {
        get { return result.hasNumber; }
      }
      public int Number {
        get { return result.Number; }
        set { SetNumber(value); }
      }
      public Builder SetNumber(int value) {
        PrepareBuilder();
        result.hasNumber = true;
        result.number_ = value;
        return this;
      }
      public Builder ClearNumber() {
        PrepareBuilder();
        result.hasNumber = false;
        result.number_ = 0;
        return this;
      }
    }
    static ResourceInfo() {
      object.ReferenceEquals(global::com.game.framework.protocol.Database.Descriptor, null);
    }
  }
  
  public sealed partial class BuildingState : pb::GeneratedMessageLite<BuildingState, BuildingState.Builder> {
    private BuildingState() { }
    private static readonly BuildingState defaultInstance = new BuildingState().MakeReadOnly();
    private static readonly string[] _buildingStateFieldNames = new string[] { "processInfo", "receiveInfos", "upgradeInfo" };
    private static readonly uint[] _buildingStateFieldTags = new uint[] { 26, 18, 10 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BuildingState DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override BuildingState DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BuildingState ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int UpgradeInfoFieldNumber = 1;
    private bool hasUpgradeInfo;
    private global::com.game.framework.protocol.UpgradeInfo upgradeInfo_;
    public bool HasUpgradeInfo {
      get { return hasUpgradeInfo; }
    }
    public global::com.game.framework.protocol.UpgradeInfo UpgradeInfo {
      get { return upgradeInfo_ ?? global::com.game.framework.protocol.UpgradeInfo.DefaultInstance; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int ReceiveInfosFieldNumber = 2;
    private pbc::PopsicleList<global::com.game.framework.protocol.ReceiveInfo> receiveInfos_ = new pbc::PopsicleList<global::com.game.framework.protocol.ReceiveInfo>();
    public scg::IList<global::com.game.framework.protocol.ReceiveInfo> ReceiveInfosList {
      get { return receiveInfos_; }
    }
    public int ReceiveInfosCount {
      get { return receiveInfos_.Count; }
    }
    public global::com.game.framework.protocol.ReceiveInfo GetReceiveInfos(int index) {
      return receiveInfos_[index];
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int ProcessInfoFieldNumber = 3;
    private bool hasProcessInfo;
    private global::com.game.framework.protocol.ProcessInfo processInfo_;
    public bool HasProcessInfo {
      get { return hasProcessInfo; }
    }
    public global::com.game.framework.protocol.ProcessInfo ProcessInfo {
      get { return processInfo_ ?? global::com.game.framework.protocol.ProcessInfo.DefaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _buildingStateFieldNames;
      if (hasUpgradeInfo) {
        output.WriteMessage(1, field_names[2], UpgradeInfo);
      }
      if (receiveInfos_.Count > 0) {
        output.WriteMessageArray(2, field_names[1], receiveInfos_);
      }
      if (hasProcessInfo) {
        output.WriteMessage(3, field_names[0], ProcessInfo);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasUpgradeInfo) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, UpgradeInfo);
        }
        foreach (global::com.game.framework.protocol.ReceiveInfo element in ReceiveInfosList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        if (hasProcessInfo) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, ProcessInfo);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasUpgradeInfo) hash ^= upgradeInfo_.GetHashCode();
      foreach(global::com.game.framework.protocol.ReceiveInfo i in receiveInfos_)
        hash ^= i.GetHashCode();
      if (hasProcessInfo) hash ^= processInfo_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      BuildingState other = obj as BuildingState;
      if (other == null) return false;
      if (hasUpgradeInfo != other.hasUpgradeInfo || (hasUpgradeInfo && !upgradeInfo_.Equals(other.upgradeInfo_))) return false;
      if(receiveInfos_.Count != other.receiveInfos_.Count) return false;
      for(int ix=0; ix < receiveInfos_.Count; ix++)
        if(!receiveInfos_[ix].Equals(other.receiveInfos_[ix])) return false;
      if (hasProcessInfo != other.hasProcessInfo || (hasProcessInfo && !processInfo_.Equals(other.processInfo_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BuildingState ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BuildingState ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BuildingState ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BuildingState ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BuildingState ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BuildingState ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BuildingState ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BuildingState ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BuildingState ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BuildingState ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BuildingState MakeReadOnly() {
      receiveInfos_.MakeReadOnly();
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(BuildingState prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<BuildingState, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BuildingState cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BuildingState result;
      
      private BuildingState PrepareBuilder() {
        if (resultIsReadOnly) {
          BuildingState original = result;
          result = new BuildingState();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BuildingState MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override BuildingState DefaultInstanceForType {
        get { return global::com.game.framework.protocol.BuildingState.DefaultInstance; }
      }
      
      public override BuildingState BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is BuildingState) {
          return MergeFrom((BuildingState) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BuildingState other) {
        if (other == global::com.game.framework.protocol.BuildingState.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUpgradeInfo) {
          MergeUpgradeInfo(other.UpgradeInfo);
        }
        if (other.receiveInfos_.Count != 0) {
          result.receiveInfos_.Add(other.receiveInfos_);
        }
        if (other.HasProcessInfo) {
          MergeProcessInfo(other.ProcessInfo);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_buildingStateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _buildingStateFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::com.game.framework.protocol.UpgradeInfo.Builder subBuilder = global::com.game.framework.protocol.UpgradeInfo.CreateBuilder();
              if (result.hasUpgradeInfo) {
                subBuilder.MergeFrom(UpgradeInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              UpgradeInfo = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.receiveInfos_, global::com.game.framework.protocol.ReceiveInfo.DefaultInstance, extensionRegistry);
              break;
            }
            case 26: {
              global::com.game.framework.protocol.ProcessInfo.Builder subBuilder = global::com.game.framework.protocol.ProcessInfo.CreateBuilder();
              if (result.hasProcessInfo) {
                subBuilder.MergeFrom(ProcessInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ProcessInfo = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasUpgradeInfo {
       get { return result.hasUpgradeInfo; }
      }
      public global::com.game.framework.protocol.UpgradeInfo UpgradeInfo {
        get { return result.UpgradeInfo; }
        set { SetUpgradeInfo(value); }
      }
      public Builder SetUpgradeInfo(global::com.game.framework.protocol.UpgradeInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUpgradeInfo = true;
        result.upgradeInfo_ = value;
        return this;
      }
      public Builder SetUpgradeInfo(global::com.game.framework.protocol.UpgradeInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasUpgradeInfo = true;
        result.upgradeInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeUpgradeInfo(global::com.game.framework.protocol.UpgradeInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasUpgradeInfo &&
            result.upgradeInfo_ != global::com.game.framework.protocol.UpgradeInfo.DefaultInstance) {
            result.upgradeInfo_ = global::com.game.framework.protocol.UpgradeInfo.CreateBuilder(result.upgradeInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.upgradeInfo_ = value;
        }
        result.hasUpgradeInfo = true;
        return this;
      }
      public Builder ClearUpgradeInfo() {
        PrepareBuilder();
        result.hasUpgradeInfo = false;
        result.upgradeInfo_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::com.game.framework.protocol.ReceiveInfo> ReceiveInfosList {
        get { return PrepareBuilder().receiveInfos_; }
      }
      public int ReceiveInfosCount {
        get { return result.ReceiveInfosCount; }
      }
      public global::com.game.framework.protocol.ReceiveInfo GetReceiveInfos(int index) {
        return result.GetReceiveInfos(index);
      }
      public Builder SetReceiveInfos(int index, global::com.game.framework.protocol.ReceiveInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.receiveInfos_[index] = value;
        return this;
      }
      public Builder SetReceiveInfos(int index, global::com.game.framework.protocol.ReceiveInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.receiveInfos_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddReceiveInfos(global::com.game.framework.protocol.ReceiveInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.receiveInfos_.Add(value);
        return this;
      }
      public Builder AddReceiveInfos(global::com.game.framework.protocol.ReceiveInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.receiveInfos_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeReceiveInfos(scg::IEnumerable<global::com.game.framework.protocol.ReceiveInfo> values) {
        PrepareBuilder();
        result.receiveInfos_.Add(values);
        return this;
      }
      public Builder ClearReceiveInfos() {
        PrepareBuilder();
        result.receiveInfos_.Clear();
        return this;
      }
      
      public bool HasProcessInfo {
       get { return result.hasProcessInfo; }
      }
      public global::com.game.framework.protocol.ProcessInfo ProcessInfo {
        get { return result.ProcessInfo; }
        set { SetProcessInfo(value); }
      }
      public Builder SetProcessInfo(global::com.game.framework.protocol.ProcessInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasProcessInfo = true;
        result.processInfo_ = value;
        return this;
      }
      public Builder SetProcessInfo(global::com.game.framework.protocol.ProcessInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasProcessInfo = true;
        result.processInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeProcessInfo(global::com.game.framework.protocol.ProcessInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasProcessInfo &&
            result.processInfo_ != global::com.game.framework.protocol.ProcessInfo.DefaultInstance) {
            result.processInfo_ = global::com.game.framework.protocol.ProcessInfo.CreateBuilder(result.processInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.processInfo_ = value;
        }
        result.hasProcessInfo = true;
        return this;
      }
      public Builder ClearProcessInfo() {
        PrepareBuilder();
        result.hasProcessInfo = false;
        result.processInfo_ = null;
        return this;
      }
    }
    static BuildingState() {
      object.ReferenceEquals(global::com.game.framework.protocol.Database.Descriptor, null);
    }
  }
  
  public sealed partial class UpgradeInfo : pb::GeneratedMessageLite<UpgradeInfo, UpgradeInfo.Builder> {
    private UpgradeInfo() { }
    private static readonly UpgradeInfo defaultInstance = new UpgradeInfo().MakeReadOnly();
    private static readonly string[] _upgradeInfoFieldNames = new string[] { "finishTime", "uid" };
    private static readonly uint[] _upgradeInfoFieldTags = new uint[] { 8, 16 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static UpgradeInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override UpgradeInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override UpgradeInfo ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int FinishTimeFieldNumber = 1;
    private bool hasFinishTime;
    private long finishTime_;
    public bool HasFinishTime {
      get { return hasFinishTime; }
    }
    public long FinishTime {
      get { return finishTime_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int UidFieldNumber = 2;
    private bool hasUid;
    private long uid_;
    public bool HasUid {
      get { return hasUid; }
    }
    public long Uid {
      get { return uid_; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _upgradeInfoFieldNames;
      if (hasFinishTime) {
        output.WriteInt64(1, field_names[0], FinishTime);
      }
      if (hasUid) {
        output.WriteInt64(2, field_names[1], Uid);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasFinishTime) {
          size += pb::CodedOutputStream.ComputeInt64Size(1, FinishTime);
        }
        if (hasUid) {
          size += pb::CodedOutputStream.ComputeInt64Size(2, Uid);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasFinishTime) hash ^= finishTime_.GetHashCode();
      if (hasUid) hash ^= uid_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      UpgradeInfo other = obj as UpgradeInfo;
      if (other == null) return false;
      if (hasFinishTime != other.hasFinishTime || (hasFinishTime && !finishTime_.Equals(other.finishTime_))) return false;
      if (hasUid != other.hasUid || (hasUid && !uid_.Equals(other.uid_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static UpgradeInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static UpgradeInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static UpgradeInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static UpgradeInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static UpgradeInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static UpgradeInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static UpgradeInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static UpgradeInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static UpgradeInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static UpgradeInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private UpgradeInfo MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(UpgradeInfo prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<UpgradeInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(UpgradeInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private UpgradeInfo result;
      
      private UpgradeInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          UpgradeInfo original = result;
          result = new UpgradeInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override UpgradeInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override UpgradeInfo DefaultInstanceForType {
        get { return global::com.game.framework.protocol.UpgradeInfo.DefaultInstance; }
      }
      
      public override UpgradeInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is UpgradeInfo) {
          return MergeFrom((UpgradeInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(UpgradeInfo other) {
        if (other == global::com.game.framework.protocol.UpgradeInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasFinishTime) {
          FinishTime = other.FinishTime;
        }
        if (other.HasUid) {
          Uid = other.Uid;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_upgradeInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _upgradeInfoFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasFinishTime = input.ReadInt64(ref result.finishTime_);
              break;
            }
            case 16: {
              result.hasUid = input.ReadInt64(ref result.uid_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasFinishTime {
        get { return result.hasFinishTime; }
      }
      public long FinishTime {
        get { return result.FinishTime; }
        set { SetFinishTime(value); }
      }
      public Builder SetFinishTime(long value) {
        PrepareBuilder();
        result.hasFinishTime = true;
        result.finishTime_ = value;
        return this;
      }
      public Builder ClearFinishTime() {
        PrepareBuilder();
        result.hasFinishTime = false;
        result.finishTime_ = 0L;
        return this;
      }
      
      public bool HasUid {
        get { return result.hasUid; }
      }
      public long Uid {
        get { return result.Uid; }
        set { SetUid(value); }
      }
      public Builder SetUid(long value) {
        PrepareBuilder();
        result.hasUid = true;
        result.uid_ = value;
        return this;
      }
      public Builder ClearUid() {
        PrepareBuilder();
        result.hasUid = false;
        result.uid_ = 0L;
        return this;
      }
    }
    static UpgradeInfo() {
      object.ReferenceEquals(global::com.game.framework.protocol.Database.Descriptor, null);
    }
  }
  
  public sealed partial class ReceiveInfo : pb::GeneratedMessageLite<ReceiveInfo, ReceiveInfo.Builder> {
    private ReceiveInfo() { }
    private static readonly ReceiveInfo defaultInstance = new ReceiveInfo().MakeReadOnly();
    private static readonly string[] _receiveInfoFieldNames = new string[] { "lastReceiveTime", "number", "uid" };
    private static readonly uint[] _receiveInfoFieldTags = new uint[] { 8, 24, 16 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ReceiveInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override ReceiveInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ReceiveInfo ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int LastReceiveTimeFieldNumber = 1;
    private bool hasLastReceiveTime;
    private long lastReceiveTime_;
    public bool HasLastReceiveTime {
      get { return hasLastReceiveTime; }
    }
    public long LastReceiveTime {
      get { return lastReceiveTime_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int UidFieldNumber = 2;
    private bool hasUid;
    private long uid_;
    public bool HasUid {
      get { return hasUid; }
    }
    public long Uid {
      get { return uid_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int NumberFieldNumber = 3;
    private bool hasNumber;
    private int number_;
    public bool HasNumber {
      get { return hasNumber; }
    }
    public int Number {
      get { return number_; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _receiveInfoFieldNames;
      if (hasLastReceiveTime) {
        output.WriteInt64(1, field_names[0], LastReceiveTime);
      }
      if (hasUid) {
        output.WriteInt64(2, field_names[2], Uid);
      }
      if (hasNumber) {
        output.WriteInt32(3, field_names[1], Number);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasLastReceiveTime) {
          size += pb::CodedOutputStream.ComputeInt64Size(1, LastReceiveTime);
        }
        if (hasUid) {
          size += pb::CodedOutputStream.ComputeInt64Size(2, Uid);
        }
        if (hasNumber) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Number);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasLastReceiveTime) hash ^= lastReceiveTime_.GetHashCode();
      if (hasUid) hash ^= uid_.GetHashCode();
      if (hasNumber) hash ^= number_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      ReceiveInfo other = obj as ReceiveInfo;
      if (other == null) return false;
      if (hasLastReceiveTime != other.hasLastReceiveTime || (hasLastReceiveTime && !lastReceiveTime_.Equals(other.lastReceiveTime_))) return false;
      if (hasUid != other.hasUid || (hasUid && !uid_.Equals(other.uid_))) return false;
      if (hasNumber != other.hasNumber || (hasNumber && !number_.Equals(other.number_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ReceiveInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ReceiveInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ReceiveInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ReceiveInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ReceiveInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ReceiveInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ReceiveInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ReceiveInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ReceiveInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ReceiveInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ReceiveInfo MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(ReceiveInfo prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<ReceiveInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ReceiveInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ReceiveInfo result;
      
      private ReceiveInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          ReceiveInfo original = result;
          result = new ReceiveInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ReceiveInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override ReceiveInfo DefaultInstanceForType {
        get { return global::com.game.framework.protocol.ReceiveInfo.DefaultInstance; }
      }
      
      public override ReceiveInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is ReceiveInfo) {
          return MergeFrom((ReceiveInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ReceiveInfo other) {
        if (other == global::com.game.framework.protocol.ReceiveInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasLastReceiveTime) {
          LastReceiveTime = other.LastReceiveTime;
        }
        if (other.HasUid) {
          Uid = other.Uid;
        }
        if (other.HasNumber) {
          Number = other.Number;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_receiveInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _receiveInfoFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasLastReceiveTime = input.ReadInt64(ref result.lastReceiveTime_);
              break;
            }
            case 16: {
              result.hasUid = input.ReadInt64(ref result.uid_);
              break;
            }
            case 24: {
              result.hasNumber = input.ReadInt32(ref result.number_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasLastReceiveTime {
        get { return result.hasLastReceiveTime; }
      }
      public long LastReceiveTime {
        get { return result.LastReceiveTime; }
        set { SetLastReceiveTime(value); }
      }
      public Builder SetLastReceiveTime(long value) {
        PrepareBuilder();
        result.hasLastReceiveTime = true;
        result.lastReceiveTime_ = value;
        return this;
      }
      public Builder ClearLastReceiveTime() {
        PrepareBuilder();
        result.hasLastReceiveTime = false;
        result.lastReceiveTime_ = 0L;
        return this;
      }
      
      public bool HasUid {
        get { return result.hasUid; }
      }
      public long Uid {
        get { return result.Uid; }
        set { SetUid(value); }
      }
      public Builder SetUid(long value) {
        PrepareBuilder();
        result.hasUid = true;
        result.uid_ = value;
        return this;
      }
      public Builder ClearUid() {
        PrepareBuilder();
        result.hasUid = false;
        result.uid_ = 0L;
        return this;
      }
      
      public bool HasNumber {
        get { return result.hasNumber; }
      }
      public int Number {
        get { return result.Number; }
        set { SetNumber(value); }
      }
      public Builder SetNumber(int value) {
        PrepareBuilder();
        result.hasNumber = true;
        result.number_ = value;
        return this;
      }
      public Builder ClearNumber() {
        PrepareBuilder();
        result.hasNumber = false;
        result.number_ = 0;
        return this;
      }
    }
    static ReceiveInfo() {
      object.ReferenceEquals(global::com.game.framework.protocol.Database.Descriptor, null);
    }
  }
  
  public sealed partial class ProcessInfo : pb::GeneratedMessageLite<ProcessInfo, ProcessInfo.Builder> {
    private ProcessInfo() { }
    private static readonly ProcessInfo defaultInstance = new ProcessInfo().MakeReadOnly();
    private static readonly string[] _processInfoFieldNames = new string[] { "endTime", "startTime", "uid" };
    private static readonly uint[] _processInfoFieldTags = new uint[] { 16, 8, 24 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ProcessInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override ProcessInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ProcessInfo ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int StartTimeFieldNumber = 1;
    private bool hasStartTime;
    private long startTime_;
    public bool HasStartTime {
      get { return hasStartTime; }
    }
    public long StartTime {
      get { return startTime_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int EndTimeFieldNumber = 2;
    private bool hasEndTime;
    private long endTime_;
    public bool HasEndTime {
      get { return hasEndTime; }
    }
    public long EndTime {
      get { return endTime_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int UidFieldNumber = 3;
    private bool hasUid;
    private long uid_;
    public bool HasUid {
      get { return hasUid; }
    }
    public long Uid {
      get { return uid_; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _processInfoFieldNames;
      if (hasStartTime) {
        output.WriteInt64(1, field_names[1], StartTime);
      }
      if (hasEndTime) {
        output.WriteInt64(2, field_names[0], EndTime);
      }
      if (hasUid) {
        output.WriteInt64(3, field_names[2], Uid);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasStartTime) {
          size += pb::CodedOutputStream.ComputeInt64Size(1, StartTime);
        }
        if (hasEndTime) {
          size += pb::CodedOutputStream.ComputeInt64Size(2, EndTime);
        }
        if (hasUid) {
          size += pb::CodedOutputStream.ComputeInt64Size(3, Uid);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasStartTime) hash ^= startTime_.GetHashCode();
      if (hasEndTime) hash ^= endTime_.GetHashCode();
      if (hasUid) hash ^= uid_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      ProcessInfo other = obj as ProcessInfo;
      if (other == null) return false;
      if (hasStartTime != other.hasStartTime || (hasStartTime && !startTime_.Equals(other.startTime_))) return false;
      if (hasEndTime != other.hasEndTime || (hasEndTime && !endTime_.Equals(other.endTime_))) return false;
      if (hasUid != other.hasUid || (hasUid && !uid_.Equals(other.uid_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ProcessInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ProcessInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ProcessInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ProcessInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ProcessInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ProcessInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ProcessInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ProcessInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ProcessInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ProcessInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ProcessInfo MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(ProcessInfo prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<ProcessInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ProcessInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ProcessInfo result;
      
      private ProcessInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          ProcessInfo original = result;
          result = new ProcessInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ProcessInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override ProcessInfo DefaultInstanceForType {
        get { return global::com.game.framework.protocol.ProcessInfo.DefaultInstance; }
      }
      
      public override ProcessInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is ProcessInfo) {
          return MergeFrom((ProcessInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ProcessInfo other) {
        if (other == global::com.game.framework.protocol.ProcessInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasStartTime) {
          StartTime = other.StartTime;
        }
        if (other.HasEndTime) {
          EndTime = other.EndTime;
        }
        if (other.HasUid) {
          Uid = other.Uid;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_processInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _processInfoFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasStartTime = input.ReadInt64(ref result.startTime_);
              break;
            }
            case 16: {
              result.hasEndTime = input.ReadInt64(ref result.endTime_);
              break;
            }
            case 24: {
              result.hasUid = input.ReadInt64(ref result.uid_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasStartTime {
        get { return result.hasStartTime; }
      }
      public long StartTime {
        get { return result.StartTime; }
        set { SetStartTime(value); }
      }
      public Builder SetStartTime(long value) {
        PrepareBuilder();
        result.hasStartTime = true;
        result.startTime_ = value;
        return this;
      }
      public Builder ClearStartTime() {
        PrepareBuilder();
        result.hasStartTime = false;
        result.startTime_ = 0L;
        return this;
      }
      
      public bool HasEndTime {
        get { return result.hasEndTime; }
      }
      public long EndTime {
        get { return result.EndTime; }
        set { SetEndTime(value); }
      }
      public Builder SetEndTime(long value) {
        PrepareBuilder();
        result.hasEndTime = true;
        result.endTime_ = value;
        return this;
      }
      public Builder ClearEndTime() {
        PrepareBuilder();
        result.hasEndTime = false;
        result.endTime_ = 0L;
        return this;
      }
      
      public bool HasUid {
        get { return result.hasUid; }
      }
      public long Uid {
        get { return result.Uid; }
        set { SetUid(value); }
      }
      public Builder SetUid(long value) {
        PrepareBuilder();
        result.hasUid = true;
        result.uid_ = value;
        return this;
      }
      public Builder ClearUid() {
        PrepareBuilder();
        result.hasUid = false;
        result.uid_ = 0L;
        return this;
      }
    }
    static ProcessInfo() {
      object.ReferenceEquals(global::com.game.framework.protocol.Database.Descriptor, null);
    }
  }
  
  public sealed partial class FightingProcedure : pb::GeneratedMessageLite<FightingProcedure, FightingProcedure.Builder> {
    private FightingProcedure() { }
    private static readonly FightingProcedure defaultInstance = new FightingProcedure().MakeReadOnly();
    private static readonly string[] _fightingProcedureFieldNames = new string[] { "fightingInfos" };
    private static readonly uint[] _fightingProcedureFieldTags = new uint[] { 10 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static FightingProcedure DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override FightingProcedure DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override FightingProcedure ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int FightingInfosFieldNumber = 1;
    private pbc::PopsicleList<global::com.game.framework.protocol.FightingInfo> fightingInfos_ = new pbc::PopsicleList<global::com.game.framework.protocol.FightingInfo>();
    public scg::IList<global::com.game.framework.protocol.FightingInfo> FightingInfosList {
      get { return fightingInfos_; }
    }
    public int FightingInfosCount {
      get { return fightingInfos_.Count; }
    }
    public global::com.game.framework.protocol.FightingInfo GetFightingInfos(int index) {
      return fightingInfos_[index];
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _fightingProcedureFieldNames;
      if (fightingInfos_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], fightingInfos_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::com.game.framework.protocol.FightingInfo element in FightingInfosList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      foreach(global::com.game.framework.protocol.FightingInfo i in fightingInfos_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      FightingProcedure other = obj as FightingProcedure;
      if (other == null) return false;
      if(fightingInfos_.Count != other.fightingInfos_.Count) return false;
      for(int ix=0; ix < fightingInfos_.Count; ix++)
        if(!fightingInfos_[ix].Equals(other.fightingInfos_[ix])) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static FightingProcedure ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static FightingProcedure ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static FightingProcedure ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static FightingProcedure ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static FightingProcedure ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static FightingProcedure ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static FightingProcedure ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static FightingProcedure ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static FightingProcedure ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static FightingProcedure ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private FightingProcedure MakeReadOnly() {
      fightingInfos_.MakeReadOnly();
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(FightingProcedure prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<FightingProcedure, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(FightingProcedure cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private FightingProcedure result;
      
      private FightingProcedure PrepareBuilder() {
        if (resultIsReadOnly) {
          FightingProcedure original = result;
          result = new FightingProcedure();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override FightingProcedure MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override FightingProcedure DefaultInstanceForType {
        get { return global::com.game.framework.protocol.FightingProcedure.DefaultInstance; }
      }
      
      public override FightingProcedure BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is FightingProcedure) {
          return MergeFrom((FightingProcedure) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(FightingProcedure other) {
        if (other == global::com.game.framework.protocol.FightingProcedure.DefaultInstance) return this;
        PrepareBuilder();
        if (other.fightingInfos_.Count != 0) {
          result.fightingInfos_.Add(other.fightingInfos_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_fightingProcedureFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _fightingProcedureFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.fightingInfos_, global::com.game.framework.protocol.FightingInfo.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public pbc::IPopsicleList<global::com.game.framework.protocol.FightingInfo> FightingInfosList {
        get { return PrepareBuilder().fightingInfos_; }
      }
      public int FightingInfosCount {
        get { return result.FightingInfosCount; }
      }
      public global::com.game.framework.protocol.FightingInfo GetFightingInfos(int index) {
        return result.GetFightingInfos(index);
      }
      public Builder SetFightingInfos(int index, global::com.game.framework.protocol.FightingInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.fightingInfos_[index] = value;
        return this;
      }
      public Builder SetFightingInfos(int index, global::com.game.framework.protocol.FightingInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.fightingInfos_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddFightingInfos(global::com.game.framework.protocol.FightingInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.fightingInfos_.Add(value);
        return this;
      }
      public Builder AddFightingInfos(global::com.game.framework.protocol.FightingInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.fightingInfos_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeFightingInfos(scg::IEnumerable<global::com.game.framework.protocol.FightingInfo> values) {
        PrepareBuilder();
        result.fightingInfos_.Add(values);
        return this;
      }
      public Builder ClearFightingInfos() {
        PrepareBuilder();
        result.fightingInfos_.Clear();
        return this;
      }
    }
    static FightingProcedure() {
      object.ReferenceEquals(global::com.game.framework.protocol.Database.Descriptor, null);
    }
  }
  
  public sealed partial class FightingInfo : pb::GeneratedMessageLite<FightingInfo, FightingInfo.Builder> {
    private FightingInfo() { }
    private static readonly FightingInfo defaultInstance = new FightingInfo().MakeReadOnly();
    private static readonly string[] _fightingInfoFieldNames = new string[] { "buildingId", "number", "stage", "uid" };
    private static readonly uint[] _fightingInfoFieldTags = new uint[] { 24, 32, 8, 16 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static FightingInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override FightingInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override FightingInfo ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int StageFieldNumber = 1;
    private bool hasStage;
    private int stage_;
    public bool HasStage {
      get { return hasStage; }
    }
    public int Stage {
      get { return stage_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int UidFieldNumber = 2;
    private bool hasUid;
    private long uid_;
    public bool HasUid {
      get { return hasUid; }
    }
    public long Uid {
      get { return uid_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int BuildingIdFieldNumber = 3;
    private bool hasBuildingId;
    private long buildingId_;
    public bool HasBuildingId {
      get { return hasBuildingId; }
    }
    public long BuildingId {
      get { return buildingId_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int NumberFieldNumber = 4;
    private bool hasNumber;
    private int number_;
    public bool HasNumber {
      get { return hasNumber; }
    }
    public int Number {
      get { return number_; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _fightingInfoFieldNames;
      if (hasStage) {
        output.WriteInt32(1, field_names[2], Stage);
      }
      if (hasUid) {
        output.WriteInt64(2, field_names[3], Uid);
      }
      if (hasBuildingId) {
        output.WriteInt64(3, field_names[0], BuildingId);
      }
      if (hasNumber) {
        output.WriteInt32(4, field_names[1], Number);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasStage) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Stage);
        }
        if (hasUid) {
          size += pb::CodedOutputStream.ComputeInt64Size(2, Uid);
        }
        if (hasBuildingId) {
          size += pb::CodedOutputStream.ComputeInt64Size(3, BuildingId);
        }
        if (hasNumber) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, Number);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasStage) hash ^= stage_.GetHashCode();
      if (hasUid) hash ^= uid_.GetHashCode();
      if (hasBuildingId) hash ^= buildingId_.GetHashCode();
      if (hasNumber) hash ^= number_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      FightingInfo other = obj as FightingInfo;
      if (other == null) return false;
      if (hasStage != other.hasStage || (hasStage && !stage_.Equals(other.stage_))) return false;
      if (hasUid != other.hasUid || (hasUid && !uid_.Equals(other.uid_))) return false;
      if (hasBuildingId != other.hasBuildingId || (hasBuildingId && !buildingId_.Equals(other.buildingId_))) return false;
      if (hasNumber != other.hasNumber || (hasNumber && !number_.Equals(other.number_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static FightingInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static FightingInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static FightingInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static FightingInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static FightingInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static FightingInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static FightingInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static FightingInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static FightingInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static FightingInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private FightingInfo MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(FightingInfo prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<FightingInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(FightingInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private FightingInfo result;
      
      private FightingInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          FightingInfo original = result;
          result = new FightingInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override FightingInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override FightingInfo DefaultInstanceForType {
        get { return global::com.game.framework.protocol.FightingInfo.DefaultInstance; }
      }
      
      public override FightingInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is FightingInfo) {
          return MergeFrom((FightingInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(FightingInfo other) {
        if (other == global::com.game.framework.protocol.FightingInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasStage) {
          Stage = other.Stage;
        }
        if (other.HasUid) {
          Uid = other.Uid;
        }
        if (other.HasBuildingId) {
          BuildingId = other.BuildingId;
        }
        if (other.HasNumber) {
          Number = other.Number;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_fightingInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _fightingInfoFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasStage = input.ReadInt32(ref result.stage_);
              break;
            }
            case 16: {
              result.hasUid = input.ReadInt64(ref result.uid_);
              break;
            }
            case 24: {
              result.hasBuildingId = input.ReadInt64(ref result.buildingId_);
              break;
            }
            case 32: {
              result.hasNumber = input.ReadInt32(ref result.number_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasStage {
        get { return result.hasStage; }
      }
      public int Stage {
        get { return result.Stage; }
        set { SetStage(value); }
      }
      public Builder SetStage(int value) {
        PrepareBuilder();
        result.hasStage = true;
        result.stage_ = value;
        return this;
      }
      public Builder ClearStage() {
        PrepareBuilder();
        result.hasStage = false;
        result.stage_ = 0;
        return this;
      }
      
      public bool HasUid {
        get { return result.hasUid; }
      }
      public long Uid {
        get { return result.Uid; }
        set { SetUid(value); }
      }
      public Builder SetUid(long value) {
        PrepareBuilder();
        result.hasUid = true;
        result.uid_ = value;
        return this;
      }
      public Builder ClearUid() {
        PrepareBuilder();
        result.hasUid = false;
        result.uid_ = 0L;
        return this;
      }
      
      public bool HasBuildingId {
        get { return result.hasBuildingId; }
      }
      public long BuildingId {
        get { return result.BuildingId; }
        set { SetBuildingId(value); }
      }
      public Builder SetBuildingId(long value) {
        PrepareBuilder();
        result.hasBuildingId = true;
        result.buildingId_ = value;
        return this;
      }
      public Builder ClearBuildingId() {
        PrepareBuilder();
        result.hasBuildingId = false;
        result.buildingId_ = 0L;
        return this;
      }
      
      public bool HasNumber {
        get { return result.hasNumber; }
      }
      public int Number {
        get { return result.Number; }
        set { SetNumber(value); }
      }
      public Builder SetNumber(int value) {
        PrepareBuilder();
        result.hasNumber = true;
        result.number_ = value;
        return this;
      }
      public Builder ClearNumber() {
        PrepareBuilder();
        result.hasNumber = false;
        result.number_ = 0;
        return this;
      }
    }
    static FightingInfo() {
      object.ReferenceEquals(global::com.game.framework.protocol.Database.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
#pragma warning restore
