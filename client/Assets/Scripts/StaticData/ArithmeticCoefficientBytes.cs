// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=null.  DO NOT EDIT!
#pragma warning disable
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace com.nkm.framework.resource.data {
  
  public static partial class ArithmeticCoefficientBytes {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    #endregion
    #region Extensions
    internal static readonly object Descriptor;
    static ArithmeticCoefficientBytes() {
      Descriptor = null;
    }
    #endregion
    
  }
  #region Messages
  public sealed partial class ARITHMETIC_COEFFICIENT : pb::GeneratedMessageLite<ARITHMETIC_COEFFICIENT, ARITHMETIC_COEFFICIENT.Builder> {
    private ARITHMETIC_COEFFICIENT() { }
    private static readonly ARITHMETIC_COEFFICIENT defaultInstance = new ARITHMETIC_COEFFICIENT().MakeReadOnly();
    private static readonly string[] _aRITHMETICCOEFFICIENTFieldNames = new string[] { "ac_k1", "ac_k2", "ac_k3", "ac_k4", "ac_k5", "id" };
    private static readonly uint[] _aRITHMETICCOEFFICIENTFieldTags = new uint[] { 16, 24, 32, 40, 48, 8 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ARITHMETIC_COEFFICIENT DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override ARITHMETIC_COEFFICIENT DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ARITHMETIC_COEFFICIENT ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int AcK1FieldNumber = 2;
    private bool hasAcK1;
    private int acK1_;
    public bool HasAcK1 {
      get { return hasAcK1; }
    }
    public int AcK1 {
      get { return acK1_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int AcK2FieldNumber = 3;
    private bool hasAcK2;
    private int acK2_;
    public bool HasAcK2 {
      get { return hasAcK2; }
    }
    public int AcK2 {
      get { return acK2_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int AcK3FieldNumber = 4;
    private bool hasAcK3;
    private int acK3_;
    public bool HasAcK3 {
      get { return hasAcK3; }
    }
    public int AcK3 {
      get { return acK3_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int AcK4FieldNumber = 5;
    private bool hasAcK4;
    private int acK4_;
    public bool HasAcK4 {
      get { return hasAcK4; }
    }
    public int AcK4 {
      get { return acK4_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int AcK5FieldNumber = 6;
    private bool hasAcK5;
    private int acK5_;
    public bool HasAcK5 {
      get { return hasAcK5; }
    }
    public int AcK5 {
      get { return acK5_; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _aRITHMETICCOEFFICIENTFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[5], Id);
      }
      if (hasAcK1) {
        output.WriteInt32(2, field_names[0], AcK1);
      }
      if (hasAcK2) {
        output.WriteInt32(3, field_names[1], AcK2);
      }
      if (hasAcK3) {
        output.WriteInt32(4, field_names[2], AcK3);
      }
      if (hasAcK4) {
        output.WriteInt32(5, field_names[3], AcK4);
      }
      if (hasAcK5) {
        output.WriteInt32(6, field_names[4], AcK5);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
        }
        if (hasAcK1) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, AcK1);
        }
        if (hasAcK2) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, AcK2);
        }
        if (hasAcK3) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, AcK3);
        }
        if (hasAcK4) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, AcK4);
        }
        if (hasAcK5) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, AcK5);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasAcK1) hash ^= acK1_.GetHashCode();
      if (hasAcK2) hash ^= acK2_.GetHashCode();
      if (hasAcK3) hash ^= acK3_.GetHashCode();
      if (hasAcK4) hash ^= acK4_.GetHashCode();
      if (hasAcK5) hash ^= acK5_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      ARITHMETIC_COEFFICIENT other = obj as ARITHMETIC_COEFFICIENT;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasAcK1 != other.hasAcK1 || (hasAcK1 && !acK1_.Equals(other.acK1_))) return false;
      if (hasAcK2 != other.hasAcK2 || (hasAcK2 && !acK2_.Equals(other.acK2_))) return false;
      if (hasAcK3 != other.hasAcK3 || (hasAcK3 && !acK3_.Equals(other.acK3_))) return false;
      if (hasAcK4 != other.hasAcK4 || (hasAcK4 && !acK4_.Equals(other.acK4_))) return false;
      if (hasAcK5 != other.hasAcK5 || (hasAcK5 && !acK5_.Equals(other.acK5_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ARITHMETIC_COEFFICIENT ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ARITHMETIC_COEFFICIENT ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ARITHMETIC_COEFFICIENT ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ARITHMETIC_COEFFICIENT ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ARITHMETIC_COEFFICIENT ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ARITHMETIC_COEFFICIENT ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ARITHMETIC_COEFFICIENT ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ARITHMETIC_COEFFICIENT ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ARITHMETIC_COEFFICIENT ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ARITHMETIC_COEFFICIENT ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ARITHMETIC_COEFFICIENT MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(ARITHMETIC_COEFFICIENT prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<ARITHMETIC_COEFFICIENT, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ARITHMETIC_COEFFICIENT cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ARITHMETIC_COEFFICIENT result;
      
      private ARITHMETIC_COEFFICIENT PrepareBuilder() {
        if (resultIsReadOnly) {
          ARITHMETIC_COEFFICIENT original = result;
          result = new ARITHMETIC_COEFFICIENT();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ARITHMETIC_COEFFICIENT MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override ARITHMETIC_COEFFICIENT DefaultInstanceForType {
        get { return global::com.nkm.framework.resource.data.ARITHMETIC_COEFFICIENT.DefaultInstance; }
      }
      
      public override ARITHMETIC_COEFFICIENT BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is ARITHMETIC_COEFFICIENT) {
          return MergeFrom((ARITHMETIC_COEFFICIENT) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ARITHMETIC_COEFFICIENT other) {
        if (other == global::com.nkm.framework.resource.data.ARITHMETIC_COEFFICIENT.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasAcK1) {
          AcK1 = other.AcK1;
        }
        if (other.HasAcK2) {
          AcK2 = other.AcK2;
        }
        if (other.HasAcK3) {
          AcK3 = other.AcK3;
        }
        if (other.HasAcK4) {
          AcK4 = other.AcK4;
        }
        if (other.HasAcK5) {
          AcK5 = other.AcK5;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_aRITHMETICCOEFFICIENTFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _aRITHMETICCOEFFICIENTFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 16: {
              result.hasAcK1 = input.ReadInt32(ref result.acK1_);
              break;
            }
            case 24: {
              result.hasAcK2 = input.ReadInt32(ref result.acK2_);
              break;
            }
            case 32: {
              result.hasAcK3 = input.ReadInt32(ref result.acK3_);
              break;
            }
            case 40: {
              result.hasAcK4 = input.ReadInt32(ref result.acK4_);
              break;
            }
            case 48: {
              result.hasAcK5 = input.ReadInt32(ref result.acK5_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasAcK1 {
        get { return result.hasAcK1; }
      }
      public int AcK1 {
        get { return result.AcK1; }
        set { SetAcK1(value); }
      }
      public Builder SetAcK1(int value) {
        PrepareBuilder();
        result.hasAcK1 = true;
        result.acK1_ = value;
        return this;
      }
      public Builder ClearAcK1() {
        PrepareBuilder();
        result.hasAcK1 = false;
        result.acK1_ = 0;
        return this;
      }
      
      public bool HasAcK2 {
        get { return result.hasAcK2; }
      }
      public int AcK2 {
        get { return result.AcK2; }
        set { SetAcK2(value); }
      }
      public Builder SetAcK2(int value) {
        PrepareBuilder();
        result.hasAcK2 = true;
        result.acK2_ = value;
        return this;
      }
      public Builder ClearAcK2() {
        PrepareBuilder();
        result.hasAcK2 = false;
        result.acK2_ = 0;
        return this;
      }
      
      public bool HasAcK3 {
        get { return result.hasAcK3; }
      }
      public int AcK3 {
        get { return result.AcK3; }
        set { SetAcK3(value); }
      }
      public Builder SetAcK3(int value) {
        PrepareBuilder();
        result.hasAcK3 = true;
        result.acK3_ = value;
        return this;
      }
      public Builder ClearAcK3() {
        PrepareBuilder();
        result.hasAcK3 = false;
        result.acK3_ = 0;
        return this;
      }
      
      public bool HasAcK4 {
        get { return result.hasAcK4; }
      }
      public int AcK4 {
        get { return result.AcK4; }
        set { SetAcK4(value); }
      }
      public Builder SetAcK4(int value) {
        PrepareBuilder();
        result.hasAcK4 = true;
        result.acK4_ = value;
        return this;
      }
      public Builder ClearAcK4() {
        PrepareBuilder();
        result.hasAcK4 = false;
        result.acK4_ = 0;
        return this;
      }
      
      public bool HasAcK5 {
        get { return result.hasAcK5; }
      }
      public int AcK5 {
        get { return result.AcK5; }
        set { SetAcK5(value); }
      }
      public Builder SetAcK5(int value) {
        PrepareBuilder();
        result.hasAcK5 = true;
        result.acK5_ = value;
        return this;
      }
      public Builder ClearAcK5() {
        PrepareBuilder();
        result.hasAcK5 = false;
        result.acK5_ = 0;
        return this;
      }
    }
    static ARITHMETIC_COEFFICIENT() {
      object.ReferenceEquals(global::com.nkm.framework.resource.data.ArithmeticCoefficientBytes.Descriptor, null);
    }
  }
  
  public sealed partial class ARITHMETIC_COEFFICIENT_ARRAY : pb::GeneratedMessageLite<ARITHMETIC_COEFFICIENT_ARRAY, ARITHMETIC_COEFFICIENT_ARRAY.Builder> {
    private ARITHMETIC_COEFFICIENT_ARRAY() { }
    private static readonly ARITHMETIC_COEFFICIENT_ARRAY defaultInstance = new ARITHMETIC_COEFFICIENT_ARRAY().MakeReadOnly();
    private static readonly string[] _aRITHMETICCOEFFICIENTARRAYFieldNames = new string[] { "items" };
    private static readonly uint[] _aRITHMETICCOEFFICIENTARRAYFieldTags = new uint[] { 10 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ARITHMETIC_COEFFICIENT_ARRAY DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override ARITHMETIC_COEFFICIENT_ARRAY DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ARITHMETIC_COEFFICIENT_ARRAY ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int ItemsFieldNumber = 1;
    private pbc::PopsicleList<global::com.nkm.framework.resource.data.ARITHMETIC_COEFFICIENT> items_ = new pbc::PopsicleList<global::com.nkm.framework.resource.data.ARITHMETIC_COEFFICIENT>();
    public scg::IList<global::com.nkm.framework.resource.data.ARITHMETIC_COEFFICIENT> ItemsList {
      get { return items_; }
    }
    public int ItemsCount {
      get { return items_.Count; }
    }
    public global::com.nkm.framework.resource.data.ARITHMETIC_COEFFICIENT GetItems(int index) {
      return items_[index];
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        foreach (global::com.nkm.framework.resource.data.ARITHMETIC_COEFFICIENT element in ItemsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _aRITHMETICCOEFFICIENTARRAYFieldNames;
      if (items_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], items_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::com.nkm.framework.resource.data.ARITHMETIC_COEFFICIENT element in ItemsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      foreach(global::com.nkm.framework.resource.data.ARITHMETIC_COEFFICIENT i in items_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      ARITHMETIC_COEFFICIENT_ARRAY other = obj as ARITHMETIC_COEFFICIENT_ARRAY;
      if (other == null) return false;
      if(items_.Count != other.items_.Count) return false;
      for(int ix=0; ix < items_.Count; ix++)
        if(!items_[ix].Equals(other.items_[ix])) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ARITHMETIC_COEFFICIENT_ARRAY ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ARITHMETIC_COEFFICIENT_ARRAY ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ARITHMETIC_COEFFICIENT_ARRAY ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ARITHMETIC_COEFFICIENT_ARRAY ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ARITHMETIC_COEFFICIENT_ARRAY ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ARITHMETIC_COEFFICIENT_ARRAY ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ARITHMETIC_COEFFICIENT_ARRAY ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ARITHMETIC_COEFFICIENT_ARRAY ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ARITHMETIC_COEFFICIENT_ARRAY ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ARITHMETIC_COEFFICIENT_ARRAY ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ARITHMETIC_COEFFICIENT_ARRAY MakeReadOnly() {
      items_.MakeReadOnly();
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(ARITHMETIC_COEFFICIENT_ARRAY prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<ARITHMETIC_COEFFICIENT_ARRAY, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ARITHMETIC_COEFFICIENT_ARRAY cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ARITHMETIC_COEFFICIENT_ARRAY result;
      
      private ARITHMETIC_COEFFICIENT_ARRAY PrepareBuilder() {
        if (resultIsReadOnly) {
          ARITHMETIC_COEFFICIENT_ARRAY original = result;
          result = new ARITHMETIC_COEFFICIENT_ARRAY();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ARITHMETIC_COEFFICIENT_ARRAY MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override ARITHMETIC_COEFFICIENT_ARRAY DefaultInstanceForType {
        get { return global::com.nkm.framework.resource.data.ARITHMETIC_COEFFICIENT_ARRAY.DefaultInstance; }
      }
      
      public override ARITHMETIC_COEFFICIENT_ARRAY BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is ARITHMETIC_COEFFICIENT_ARRAY) {
          return MergeFrom((ARITHMETIC_COEFFICIENT_ARRAY) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ARITHMETIC_COEFFICIENT_ARRAY other) {
        if (other == global::com.nkm.framework.resource.data.ARITHMETIC_COEFFICIENT_ARRAY.DefaultInstance) return this;
        PrepareBuilder();
        if (other.items_.Count != 0) {
          result.items_.Add(other.items_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_aRITHMETICCOEFFICIENTARRAYFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _aRITHMETICCOEFFICIENTARRAYFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.items_, global::com.nkm.framework.resource.data.ARITHMETIC_COEFFICIENT.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public pbc::IPopsicleList<global::com.nkm.framework.resource.data.ARITHMETIC_COEFFICIENT> ItemsList {
        get { return PrepareBuilder().items_; }
      }
      public int ItemsCount {
        get { return result.ItemsCount; }
      }
      public global::com.nkm.framework.resource.data.ARITHMETIC_COEFFICIENT GetItems(int index) {
        return result.GetItems(index);
      }
      public Builder SetItems(int index, global::com.nkm.framework.resource.data.ARITHMETIC_COEFFICIENT value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.items_[index] = value;
        return this;
      }
      public Builder SetItems(int index, global::com.nkm.framework.resource.data.ARITHMETIC_COEFFICIENT.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.items_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddItems(global::com.nkm.framework.resource.data.ARITHMETIC_COEFFICIENT value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.items_.Add(value);
        return this;
      }
      public Builder AddItems(global::com.nkm.framework.resource.data.ARITHMETIC_COEFFICIENT.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.items_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeItems(scg::IEnumerable<global::com.nkm.framework.resource.data.ARITHMETIC_COEFFICIENT> values) {
        PrepareBuilder();
        result.items_.Add(values);
        return this;
      }
      public Builder ClearItems() {
        PrepareBuilder();
        result.items_.Clear();
        return this;
      }
    }
    static ARITHMETIC_COEFFICIENT_ARRAY() {
      object.ReferenceEquals(global::com.nkm.framework.resource.data.ArithmeticCoefficientBytes.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
#pragma warning restore
