// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=null.  DO NOT EDIT!
#pragma warning disable
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace com.game.framework.protocol {
  
  public static partial class Fighting {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    #endregion
    #region Extensions
    internal static readonly object Descriptor;
    static Fighting() {
      Descriptor = null;
    }
    #endregion
    
  }
  #region Messages
  public sealed partial class TCSZombieInvade : pb::GeneratedMessageLite<TCSZombieInvade, TCSZombieInvade.Builder> {
    private TCSZombieInvade() { }
    private static readonly TCSZombieInvade defaultInstance = new TCSZombieInvade().MakeReadOnly();
    private static readonly string[] _tCSZombieInvadeFieldNames = new string[] { "groupId" };
    private static readonly uint[] _tCSZombieInvadeFieldTags = new uint[] { 8 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSZombieInvade DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override TCSZombieInvade DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TCSZombieInvade ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int GroupIdFieldNumber = 1;
    private bool hasGroupId;
    private long groupId_;
    public bool HasGroupId {
      get { return hasGroupId; }
    }
    public long GroupId {
      get { return groupId_; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _tCSZombieInvadeFieldNames;
      if (hasGroupId) {
        output.WriteInt64(1, field_names[0], GroupId);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGroupId) {
          size += pb::CodedOutputStream.ComputeInt64Size(1, GroupId);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasGroupId) hash ^= groupId_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      TCSZombieInvade other = obj as TCSZombieInvade;
      if (other == null) return false;
      if (hasGroupId != other.hasGroupId || (hasGroupId && !groupId_.Equals(other.groupId_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSZombieInvade ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSZombieInvade ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSZombieInvade ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSZombieInvade ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSZombieInvade ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSZombieInvade ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSZombieInvade ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSZombieInvade ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSZombieInvade ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSZombieInvade ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TCSZombieInvade MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(TCSZombieInvade prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<TCSZombieInvade, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TCSZombieInvade cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TCSZombieInvade result;
      
      private TCSZombieInvade PrepareBuilder() {
        if (resultIsReadOnly) {
          TCSZombieInvade original = result;
          result = new TCSZombieInvade();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TCSZombieInvade MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override TCSZombieInvade DefaultInstanceForType {
        get { return global::com.game.framework.protocol.TCSZombieInvade.DefaultInstance; }
      }
      
      public override TCSZombieInvade BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is TCSZombieInvade) {
          return MergeFrom((TCSZombieInvade) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TCSZombieInvade other) {
        if (other == global::com.game.framework.protocol.TCSZombieInvade.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGroupId) {
          GroupId = other.GroupId;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_tCSZombieInvadeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _tCSZombieInvadeFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGroupId = input.ReadInt64(ref result.groupId_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasGroupId {
        get { return result.hasGroupId; }
      }
      public long GroupId {
        get { return result.GroupId; }
        set { SetGroupId(value); }
      }
      public Builder SetGroupId(long value) {
        PrepareBuilder();
        result.hasGroupId = true;
        result.groupId_ = value;
        return this;
      }
      public Builder ClearGroupId() {
        PrepareBuilder();
        result.hasGroupId = false;
        result.groupId_ = 0L;
        return this;
      }
    }
    static TCSZombieInvade() {
      object.ReferenceEquals(global::com.game.framework.protocol.Fighting.Descriptor, null);
    }
  }
  
  public sealed partial class TCSReceiveZombieMessage : pb::GeneratedMessageLite<TCSReceiveZombieMessage, TCSReceiveZombieMessage.Builder> {
    private TCSReceiveZombieMessage() { }
    private static readonly TCSReceiveZombieMessage defaultInstance = new TCSReceiveZombieMessage().MakeReadOnly();
    private static readonly string[] _tCSReceiveZombieMessageFieldNames = new string[] { "configId", "groupId", "zombieInvadeTime" };
    private static readonly uint[] _tCSReceiveZombieMessageFieldTags = new uint[] { 16, 8, 24 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSReceiveZombieMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override TCSReceiveZombieMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TCSReceiveZombieMessage ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int GroupIdFieldNumber = 1;
    private bool hasGroupId;
    private long groupId_;
    public bool HasGroupId {
      get { return hasGroupId; }
    }
    public long GroupId {
      get { return groupId_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int ConfigIdFieldNumber = 2;
    private bool hasConfigId;
    private int configId_;
    public bool HasConfigId {
      get { return hasConfigId; }
    }
    public int ConfigId {
      get { return configId_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int ZombieInvadeTimeFieldNumber = 3;
    private bool hasZombieInvadeTime;
    private long zombieInvadeTime_;
    public bool HasZombieInvadeTime {
      get { return hasZombieInvadeTime; }
    }
    public long ZombieInvadeTime {
      get { return zombieInvadeTime_; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _tCSReceiveZombieMessageFieldNames;
      if (hasGroupId) {
        output.WriteInt64(1, field_names[1], GroupId);
      }
      if (hasConfigId) {
        output.WriteInt32(2, field_names[0], ConfigId);
      }
      if (hasZombieInvadeTime) {
        output.WriteInt64(3, field_names[2], ZombieInvadeTime);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGroupId) {
          size += pb::CodedOutputStream.ComputeInt64Size(1, GroupId);
        }
        if (hasConfigId) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, ConfigId);
        }
        if (hasZombieInvadeTime) {
          size += pb::CodedOutputStream.ComputeInt64Size(3, ZombieInvadeTime);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasGroupId) hash ^= groupId_.GetHashCode();
      if (hasConfigId) hash ^= configId_.GetHashCode();
      if (hasZombieInvadeTime) hash ^= zombieInvadeTime_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      TCSReceiveZombieMessage other = obj as TCSReceiveZombieMessage;
      if (other == null) return false;
      if (hasGroupId != other.hasGroupId || (hasGroupId && !groupId_.Equals(other.groupId_))) return false;
      if (hasConfigId != other.hasConfigId || (hasConfigId && !configId_.Equals(other.configId_))) return false;
      if (hasZombieInvadeTime != other.hasZombieInvadeTime || (hasZombieInvadeTime && !zombieInvadeTime_.Equals(other.zombieInvadeTime_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSReceiveZombieMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSReceiveZombieMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSReceiveZombieMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSReceiveZombieMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSReceiveZombieMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSReceiveZombieMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSReceiveZombieMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSReceiveZombieMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSReceiveZombieMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSReceiveZombieMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TCSReceiveZombieMessage MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(TCSReceiveZombieMessage prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<TCSReceiveZombieMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TCSReceiveZombieMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TCSReceiveZombieMessage result;
      
      private TCSReceiveZombieMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          TCSReceiveZombieMessage original = result;
          result = new TCSReceiveZombieMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TCSReceiveZombieMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override TCSReceiveZombieMessage DefaultInstanceForType {
        get { return global::com.game.framework.protocol.TCSReceiveZombieMessage.DefaultInstance; }
      }
      
      public override TCSReceiveZombieMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is TCSReceiveZombieMessage) {
          return MergeFrom((TCSReceiveZombieMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TCSReceiveZombieMessage other) {
        if (other == global::com.game.framework.protocol.TCSReceiveZombieMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGroupId) {
          GroupId = other.GroupId;
        }
        if (other.HasConfigId) {
          ConfigId = other.ConfigId;
        }
        if (other.HasZombieInvadeTime) {
          ZombieInvadeTime = other.ZombieInvadeTime;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_tCSReceiveZombieMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _tCSReceiveZombieMessageFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGroupId = input.ReadInt64(ref result.groupId_);
              break;
            }
            case 16: {
              result.hasConfigId = input.ReadInt32(ref result.configId_);
              break;
            }
            case 24: {
              result.hasZombieInvadeTime = input.ReadInt64(ref result.zombieInvadeTime_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasGroupId {
        get { return result.hasGroupId; }
      }
      public long GroupId {
        get { return result.GroupId; }
        set { SetGroupId(value); }
      }
      public Builder SetGroupId(long value) {
        PrepareBuilder();
        result.hasGroupId = true;
        result.groupId_ = value;
        return this;
      }
      public Builder ClearGroupId() {
        PrepareBuilder();
        result.hasGroupId = false;
        result.groupId_ = 0L;
        return this;
      }
      
      public bool HasConfigId {
        get { return result.hasConfigId; }
      }
      public int ConfigId {
        get { return result.ConfigId; }
        set { SetConfigId(value); }
      }
      public Builder SetConfigId(int value) {
        PrepareBuilder();
        result.hasConfigId = true;
        result.configId_ = value;
        return this;
      }
      public Builder ClearConfigId() {
        PrepareBuilder();
        result.hasConfigId = false;
        result.configId_ = 0;
        return this;
      }
      
      public bool HasZombieInvadeTime {
        get { return result.hasZombieInvadeTime; }
      }
      public long ZombieInvadeTime {
        get { return result.ZombieInvadeTime; }
        set { SetZombieInvadeTime(value); }
      }
      public Builder SetZombieInvadeTime(long value) {
        PrepareBuilder();
        result.hasZombieInvadeTime = true;
        result.zombieInvadeTime_ = value;
        return this;
      }
      public Builder ClearZombieInvadeTime() {
        PrepareBuilder();
        result.hasZombieInvadeTime = false;
        result.zombieInvadeTime_ = 0L;
        return this;
      }
    }
    static TCSReceiveZombieMessage() {
      object.ReferenceEquals(global::com.game.framework.protocol.Fighting.Descriptor, null);
    }
  }
  
  public sealed partial class TCSZombieInvadeResult : pb::GeneratedMessageLite<TCSZombieInvadeResult, TCSZombieInvadeResult.Builder> {
    private TCSZombieInvadeResult() { }
    private static readonly TCSZombieInvadeResult defaultInstance = new TCSZombieInvadeResult().MakeReadOnly();
    private static readonly string[] _tCSZombieInvadeResultFieldNames = new string[] { "configId", "doorId", "groupId" };
    private static readonly uint[] _tCSZombieInvadeResultFieldTags = new uint[] { 16, 24, 8 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSZombieInvadeResult DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override TCSZombieInvadeResult DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TCSZombieInvadeResult ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int GroupIdFieldNumber = 1;
    private bool hasGroupId;
    private long groupId_;
    public bool HasGroupId {
      get { return hasGroupId; }
    }
    public long GroupId {
      get { return groupId_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int ConfigIdFieldNumber = 2;
    private bool hasConfigId;
    private int configId_;
    public bool HasConfigId {
      get { return hasConfigId; }
    }
    public int ConfigId {
      get { return configId_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int DoorIdFieldNumber = 3;
    private bool hasDoorId;
    private long doorId_;
    public bool HasDoorId {
      get { return hasDoorId; }
    }
    public long DoorId {
      get { return doorId_; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _tCSZombieInvadeResultFieldNames;
      if (hasGroupId) {
        output.WriteInt64(1, field_names[2], GroupId);
      }
      if (hasConfigId) {
        output.WriteInt32(2, field_names[0], ConfigId);
      }
      if (hasDoorId) {
        output.WriteInt64(3, field_names[1], DoorId);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGroupId) {
          size += pb::CodedOutputStream.ComputeInt64Size(1, GroupId);
        }
        if (hasConfigId) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, ConfigId);
        }
        if (hasDoorId) {
          size += pb::CodedOutputStream.ComputeInt64Size(3, DoorId);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasGroupId) hash ^= groupId_.GetHashCode();
      if (hasConfigId) hash ^= configId_.GetHashCode();
      if (hasDoorId) hash ^= doorId_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      TCSZombieInvadeResult other = obj as TCSZombieInvadeResult;
      if (other == null) return false;
      if (hasGroupId != other.hasGroupId || (hasGroupId && !groupId_.Equals(other.groupId_))) return false;
      if (hasConfigId != other.hasConfigId || (hasConfigId && !configId_.Equals(other.configId_))) return false;
      if (hasDoorId != other.hasDoorId || (hasDoorId && !doorId_.Equals(other.doorId_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSZombieInvadeResult ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSZombieInvadeResult ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSZombieInvadeResult ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSZombieInvadeResult ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSZombieInvadeResult ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSZombieInvadeResult ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSZombieInvadeResult ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSZombieInvadeResult ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSZombieInvadeResult ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSZombieInvadeResult ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TCSZombieInvadeResult MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(TCSZombieInvadeResult prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<TCSZombieInvadeResult, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TCSZombieInvadeResult cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TCSZombieInvadeResult result;
      
      private TCSZombieInvadeResult PrepareBuilder() {
        if (resultIsReadOnly) {
          TCSZombieInvadeResult original = result;
          result = new TCSZombieInvadeResult();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TCSZombieInvadeResult MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override TCSZombieInvadeResult DefaultInstanceForType {
        get { return global::com.game.framework.protocol.TCSZombieInvadeResult.DefaultInstance; }
      }
      
      public override TCSZombieInvadeResult BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is TCSZombieInvadeResult) {
          return MergeFrom((TCSZombieInvadeResult) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TCSZombieInvadeResult other) {
        if (other == global::com.game.framework.protocol.TCSZombieInvadeResult.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGroupId) {
          GroupId = other.GroupId;
        }
        if (other.HasConfigId) {
          ConfigId = other.ConfigId;
        }
        if (other.HasDoorId) {
          DoorId = other.DoorId;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_tCSZombieInvadeResultFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _tCSZombieInvadeResultFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGroupId = input.ReadInt64(ref result.groupId_);
              break;
            }
            case 16: {
              result.hasConfigId = input.ReadInt32(ref result.configId_);
              break;
            }
            case 24: {
              result.hasDoorId = input.ReadInt64(ref result.doorId_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasGroupId {
        get { return result.hasGroupId; }
      }
      public long GroupId {
        get { return result.GroupId; }
        set { SetGroupId(value); }
      }
      public Builder SetGroupId(long value) {
        PrepareBuilder();
        result.hasGroupId = true;
        result.groupId_ = value;
        return this;
      }
      public Builder ClearGroupId() {
        PrepareBuilder();
        result.hasGroupId = false;
        result.groupId_ = 0L;
        return this;
      }
      
      public bool HasConfigId {
        get { return result.hasConfigId; }
      }
      public int ConfigId {
        get { return result.ConfigId; }
        set { SetConfigId(value); }
      }
      public Builder SetConfigId(int value) {
        PrepareBuilder();
        result.hasConfigId = true;
        result.configId_ = value;
        return this;
      }
      public Builder ClearConfigId() {
        PrepareBuilder();
        result.hasConfigId = false;
        result.configId_ = 0;
        return this;
      }
      
      public bool HasDoorId {
        get { return result.hasDoorId; }
      }
      public long DoorId {
        get { return result.DoorId; }
        set { SetDoorId(value); }
      }
      public Builder SetDoorId(long value) {
        PrepareBuilder();
        result.hasDoorId = true;
        result.doorId_ = value;
        return this;
      }
      public Builder ClearDoorId() {
        PrepareBuilder();
        result.hasDoorId = false;
        result.doorId_ = 0L;
        return this;
      }
    }
    static TCSZombieInvadeResult() {
      object.ReferenceEquals(global::com.game.framework.protocol.Fighting.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
#pragma warning restore
