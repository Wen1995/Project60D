// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/ship_hull_tech_data.proto

package com.game.server.data;

public final class ShipHullTechData {
  private ShipHullTechData() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface SHIP_HULL_TECHOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.game.server.data.SHIP_HULL_TECH)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required int32 id = 1 [default = 0];</code>
     *
     * <pre>
     ** 舰体部件ID 
     * </pre>
     */
    boolean hasId();
    /**
     * <code>required int32 id = 1 [default = 0];</code>
     *
     * <pre>
     ** 舰体部件ID 
     * </pre>
     */
    int getId();

    /**
     * <code>optional int32 mat_type = 2 [default = 0];</code>
     *
     * <pre>
     ** 材料类型
     *(mat=material)
     *机械体(Mech)=1
     *生物体(Bio)=2
     *光耀体(Phot)=3
     * </pre>
     */
    boolean hasMatType();
    /**
     * <code>optional int32 mat_type = 2 [default = 0];</code>
     *
     * <pre>
     ** 材料类型
     *(mat=material)
     *机械体(Mech)=1
     *生物体(Bio)=2
     *光耀体(Phot)=3
     * </pre>
     */
    int getMatType();

    /**
     * <code>optional int32 hull_size = 3 [default = 0];</code>
     *
     * <pre>
     ** 舰体尺度
     *功能舰=1
     *护卫舰=2
     *驱逐舰=3
     *巡洋舰=4
     *战巡舰=5
     *战列舰=6
     * </pre>
     */
    boolean hasHullSize();
    /**
     * <code>optional int32 hull_size = 3 [default = 0];</code>
     *
     * <pre>
     ** 舰体尺度
     *功能舰=1
     *护卫舰=2
     *驱逐舰=3
     *巡洋舰=4
     *战巡舰=5
     *战列舰=6
     * </pre>
     */
    int getHullSize();

    /**
     * <code>optional int32 hull_type = 4 [default = 0];</code>
     *
     * <pre>
     ** 舰体类型
     *舰首=1
     *舰中=2
     *舰尾=3
     * </pre>
     */
    boolean hasHullType();
    /**
     * <code>optional int32 hull_type = 4 [default = 0];</code>
     *
     * <pre>
     ** 舰体类型
     *舰首=1
     *舰中=2
     *舰尾=3
     * </pre>
     */
    int getHullType();

    /**
     * <code>optional int32 hull_lvl = 5 [default = 0];</code>
     *
     * <pre>
     ** 舰体等级 
     * </pre>
     */
    boolean hasHullLvl();
    /**
     * <code>optional int32 hull_lvl = 5 [default = 0];</code>
     *
     * <pre>
     ** 舰体等级 
     * </pre>
     */
    int getHullLvl();

    /**
     * <code>optional string transl_table_name = 6 [default = ""];</code>
     *
     * <pre>
     ** 翻译表名 
     * </pre>
     */
    boolean hasTranslTableName();
    /**
     * <code>optional string transl_table_name = 6 [default = ""];</code>
     *
     * <pre>
     ** 翻译表名 
     * </pre>
     */
    java.lang.String getTranslTableName();
    /**
     * <code>optional string transl_table_name = 6 [default = ""];</code>
     *
     * <pre>
     ** 翻译表名 
     * </pre>
     */
    com.google.protobuf.ByteString
        getTranslTableNameBytes();

    /**
     * <code>optional string hull_name = 7 [default = ""];</code>
     *
     * <pre>
     ** 舰体名 
     * </pre>
     */
    boolean hasHullName();
    /**
     * <code>optional string hull_name = 7 [default = ""];</code>
     *
     * <pre>
     ** 舰体名 
     * </pre>
     */
    java.lang.String getHullName();
    /**
     * <code>optional string hull_name = 7 [default = ""];</code>
     *
     * <pre>
     ** 舰体名 
     * </pre>
     */
    com.google.protobuf.ByteString
        getHullNameBytes();

    /**
     * <code>optional int32 in_use = 8 [default = 0];</code>
     *
     * <pre>
     ** 可用
     *1表示是
     *0表示否
     * </pre>
     */
    boolean hasInUse();
    /**
     * <code>optional int32 in_use = 8 [default = 0];</code>
     *
     * <pre>
     ** 可用
     *1表示是
     *0表示否
     * </pre>
     */
    int getInUse();

    /**
     * <code>optional int32 max_hull_lvl = 9 [default = 0];</code>
     *
     * <pre>
     ** 舰体最大等级 
     * </pre>
     */
    boolean hasMaxHullLvl();
    /**
     * <code>optional int32 max_hull_lvl = 9 [default = 0];</code>
     *
     * <pre>
     ** 舰体最大等级 
     * </pre>
     */
    int getMaxHullLvl();

    /**
     * <code>optional string prefab_name = 10 [default = ""];</code>
     *
     * <pre>
     ** 模型名 
     * </pre>
     */
    boolean hasPrefabName();
    /**
     * <code>optional string prefab_name = 10 [default = ""];</code>
     *
     * <pre>
     ** 模型名 
     * </pre>
     */
    java.lang.String getPrefabName();
    /**
     * <code>optional string prefab_name = 10 [default = ""];</code>
     *
     * <pre>
     ** 模型名 
     * </pre>
     */
    com.google.protobuf.ByteString
        getPrefabNameBytes();

    /**
     * <code>optional string icon_name = 11 [default = ""];</code>
     *
     * <pre>
     ** 图标名称 
     * </pre>
     */
    boolean hasIconName();
    /**
     * <code>optional string icon_name = 11 [default = ""];</code>
     *
     * <pre>
     ** 图标名称 
     * </pre>
     */
    java.lang.String getIconName();
    /**
     * <code>optional string icon_name = 11 [default = ""];</code>
     *
     * <pre>
     ** 图标名称 
     * </pre>
     */
    com.google.protobuf.ByteString
        getIconNameBytes();

    /**
     * <code>optional string desc = 12 [default = ""];</code>
     *
     * <pre>
     ** 描述 
     * </pre>
     */
    boolean hasDesc();
    /**
     * <code>optional string desc = 12 [default = ""];</code>
     *
     * <pre>
     ** 描述 
     * </pre>
     */
    java.lang.String getDesc();
    /**
     * <code>optional string desc = 12 [default = ""];</code>
     *
     * <pre>
     ** 描述 
     * </pre>
     */
    com.google.protobuf.ByteString
        getDescBytes();

    /**
     * <code>optional int32 ui_order = 13 [default = 0];</code>
     *
     * <pre>
     ** 界面排序 
     * </pre>
     */
    boolean hasUiOrder();
    /**
     * <code>optional int32 ui_order = 13 [default = 0];</code>
     *
     * <pre>
     ** 界面排序 
     * </pre>
     */
    int getUiOrder();

    /**
     * <code>optional int32 ui_scale = 14 [default = 0];</code>
     *
     * <pre>
     ** 界面缩放
     *(百分比) 
     * </pre>
     */
    boolean hasUiScale();
    /**
     * <code>optional int32 ui_scale = 14 [default = 0];</code>
     *
     * <pre>
     ** 界面缩放
     *(百分比) 
     * </pre>
     */
    int getUiScale();

    /**
     * <code>optional int32 hull_slot_top = 15 [default = 0];</code>
     *
     * <pre>
     ** 舰体孔位上 
     * </pre>
     */
    boolean hasHullSlotTop();
    /**
     * <code>optional int32 hull_slot_top = 15 [default = 0];</code>
     *
     * <pre>
     ** 舰体孔位上 
     * </pre>
     */
    int getHullSlotTop();

    /**
     * <code>optional int32 hull_slot_bottom = 16 [default = 0];</code>
     *
     * <pre>
     ** 舰体孔位下 
     * </pre>
     */
    boolean hasHullSlotBottom();
    /**
     * <code>optional int32 hull_slot_bottom = 16 [default = 0];</code>
     *
     * <pre>
     ** 舰体孔位下 
     * </pre>
     */
    int getHullSlotBottom();

    /**
     * <code>optional int32 hull_slot_left = 17 [default = 0];</code>
     *
     * <pre>
     ** 舰体孔位左 
     * </pre>
     */
    boolean hasHullSlotLeft();
    /**
     * <code>optional int32 hull_slot_left = 17 [default = 0];</code>
     *
     * <pre>
     ** 舰体孔位左 
     * </pre>
     */
    int getHullSlotLeft();

    /**
     * <code>optional int32 hull_slot_right = 18 [default = 0];</code>
     *
     * <pre>
     ** 舰体孔位右 
     * </pre>
     */
    boolean hasHullSlotRight();
    /**
     * <code>optional int32 hull_slot_right = 18 [default = 0];</code>
     *
     * <pre>
     ** 舰体孔位右 
     * </pre>
     */
    int getHullSlotRight();

    /**
     * <code>optional int32 hull_slot_front = 19 [default = 0];</code>
     *
     * <pre>
     ** 舰体孔位前 
     * </pre>
     */
    boolean hasHullSlotFront();
    /**
     * <code>optional int32 hull_slot_front = 19 [default = 0];</code>
     *
     * <pre>
     ** 舰体孔位前 
     * </pre>
     */
    int getHullSlotFront();

    /**
     * <code>optional int32 hull_slot_back = 20 [default = 0];</code>
     *
     * <pre>
     ** 舰体孔位后 
     * </pre>
     */
    boolean hasHullSlotBack();
    /**
     * <code>optional int32 hull_slot_back = 20 [default = 0];</code>
     *
     * <pre>
     ** 舰体孔位后 
     * </pre>
     */
    int getHullSlotBack();

    /**
     * <code>optional int32 bldg_lvl_req = 21 [default = 0];</code>
     *
     * <pre>
     ** 建筑等级要求 
     * </pre>
     */
    boolean hasBldgLvlReq();
    /**
     * <code>optional int32 bldg_lvl_req = 21 [default = 0];</code>
     *
     * <pre>
     ** 建筑等级要求 
     * </pre>
     */
    int getBldgLvlReq();

    /**
     * <code>optional int32 ssp_cost = 22 [default = 0];</code>
     *
     * <pre>
     ** 空间占用 
     * </pre>
     */
    boolean hasSspCost();
    /**
     * <code>optional int32 ssp_cost = 22 [default = 0];</code>
     *
     * <pre>
     ** 空间占用 
     * </pre>
     */
    int getSspCost();

    /**
     * <code>optional int32 func_type = 23 [default = 0];</code>
     *
     * <pre>
     ** 功能类型
     *无=0
     *殖民=1
     *探索=2
     *采集=3
     *运输=4
     * </pre>
     */
    boolean hasFuncType();
    /**
     * <code>optional int32 func_type = 23 [default = 0];</code>
     *
     * <pre>
     ** 功能类型
     *无=0
     *殖民=1
     *探索=2
     *采集=3
     *运输=4
     * </pre>
     */
    int getFuncType();

    /**
     * <code>optional int32 crew_qty = 24 [default = 0];</code>
     *
     * <pre>
     ** 船员需求 
     * </pre>
     */
    boolean hasCrewQty();
    /**
     * <code>optional int32 crew_qty = 24 [default = 0];</code>
     *
     * <pre>
     ** 船员需求 
     * </pre>
     */
    int getCrewQty();

    /**
     * <code>optional int32 mass = 25 [default = 0];</code>
     *
     * <pre>
     ** 质量 
     * </pre>
     */
    boolean hasMass();
    /**
     * <code>optional int32 mass = 25 [default = 0];</code>
     *
     * <pre>
     ** 质量 
     * </pre>
     */
    int getMass();

    /**
     * <code>optional int32 strut_hp = 26 [default = 0];</code>
     *
     * <pre>
     ** 结构HP 
     * </pre>
     */
    boolean hasStrutHp();
    /**
     * <code>optional int32 strut_hp = 26 [default = 0];</code>
     *
     * <pre>
     ** 结构HP 
     * </pre>
     */
    int getStrutHp();

    /**
     * <code>optional int32 strut_repr = 27 [default = 0];</code>
     *
     * <pre>
     ** 结构修复
     *(repr=repair) 
     * </pre>
     */
    boolean hasStrutRepr();
    /**
     * <code>optional int32 strut_repr = 27 [default = 0];</code>
     *
     * <pre>
     ** 结构修复
     *(repr=repair) 
     * </pre>
     */
    int getStrutRepr();

    /**
     * <code>optional int32 shield_hp = 28 [default = 0];</code>
     *
     * <pre>
     ** 护盾HP 
     * </pre>
     */
    boolean hasShieldHp();
    /**
     * <code>optional int32 shield_hp = 28 [default = 0];</code>
     *
     * <pre>
     ** 护盾HP 
     * </pre>
     */
    int getShieldHp();

    /**
     * <code>optional int32 shield_repr = 29 [default = 0];</code>
     *
     * <pre>
     ** 护盾修复 
     * </pre>
     */
    boolean hasShieldRepr();
    /**
     * <code>optional int32 shield_repr = 29 [default = 0];</code>
     *
     * <pre>
     ** 护盾修复 
     * </pre>
     */
    int getShieldRepr();

    /**
     * <code>optional int32 em_res = 30 [default = 0];</code>
     *
     * <pre>
     ** 电磁抗性 
     * </pre>
     */
    boolean hasEmRes();
    /**
     * <code>optional int32 em_res = 30 [default = 0];</code>
     *
     * <pre>
     ** 电磁抗性 
     * </pre>
     */
    int getEmRes();

    /**
     * <code>optional int32 therm_res = 31 [default = 0];</code>
     *
     * <pre>
     ** 热能抗性 
     * </pre>
     */
    boolean hasThermRes();
    /**
     * <code>optional int32 therm_res = 31 [default = 0];</code>
     *
     * <pre>
     ** 热能抗性 
     * </pre>
     */
    int getThermRes();

    /**
     * <code>optional int32 kin_res = 32 [default = 0];</code>
     *
     * <pre>
     ** 动能抗性 
     * </pre>
     */
    boolean hasKinRes();
    /**
     * <code>optional int32 kin_res = 32 [default = 0];</code>
     *
     * <pre>
     ** 动能抗性 
     * </pre>
     */
    int getKinRes();

    /**
     * <code>optional int32 exp_res = 33 [default = 0];</code>
     *
     * <pre>
     ** 爆炸抗性 
     * </pre>
     */
    boolean hasExpRes();
    /**
     * <code>optional int32 exp_res = 33 [default = 0];</code>
     *
     * <pre>
     ** 爆炸抗性 
     * </pre>
     */
    int getExpRes();

    /**
     * <code>optional int32 tgt_value = 34 [default = 0];</code>
     *
     * <pre>
     ** 瞄准值
     *(tgt=targeting) 
     * </pre>
     */
    boolean hasTgtValue();
    /**
     * <code>optional int32 tgt_value = 34 [default = 0];</code>
     *
     * <pre>
     ** 瞄准值
     *(tgt=targeting) 
     * </pre>
     */
    int getTgtValue();

    /**
     * <code>optional int32 eva_value = 35 [default = 0];</code>
     *
     * <pre>
     ** 回避值
     *(eva=evasion) 
     * </pre>
     */
    boolean hasEvaValue();
    /**
     * <code>optional int32 eva_value = 35 [default = 0];</code>
     *
     * <pre>
     ** 回避值
     *(eva=evasion) 
     * </pre>
     */
    int getEvaValue();

    /**
     * <code>optional int32 cruz_spd = 36 [default = 0];</code>
     *
     * <pre>
     ** 移速
     *(cruz=cruising) 
     * </pre>
     */
    boolean hasCruzSpd();
    /**
     * <code>optional int32 cruz_spd = 36 [default = 0];</code>
     *
     * <pre>
     ** 移速
     *(cruz=cruising) 
     * </pre>
     */
    int getCruzSpd();

    /**
     * <code>optional int32 rev_spd = 37 [default = 0];</code>
     *
     * <pre>
     ** 转速
     *(rev=revolving) 
     * </pre>
     */
    boolean hasRevSpd();
    /**
     * <code>optional int32 rev_spd = 37 [default = 0];</code>
     *
     * <pre>
     ** 转速
     *(rev=revolving) 
     * </pre>
     */
    int getRevSpd();

    /**
     * <code>optional int32 neg_stat_res = 38 [default = 0];</code>
     *
     * <pre>
     ** 异常耐性
     *(res=resistance) 
     * </pre>
     */
    boolean hasNegStatRes();
    /**
     * <code>optional int32 neg_stat_res = 38 [default = 0];</code>
     *
     * <pre>
     ** 异常耐性
     *(res=resistance) 
     * </pre>
     */
    int getNegStatRes();

    /**
     * <code>optional int32 debuff_res = 39 [default = 0];</code>
     *
     * <pre>
     ** 减益耐性 
     * </pre>
     */
    boolean hasDebuffRes();
    /**
     * <code>optional int32 debuff_res = 39 [default = 0];</code>
     *
     * <pre>
     ** 减益耐性 
     * </pre>
     */
    int getDebuffRes();

    /**
     * <code>optional int32 def_trait_1 = 40 [default = 0];</code>
     *
     * <pre>
     ** 防御特性1 
     * </pre>
     */
    boolean hasDefTrait1();
    /**
     * <code>optional int32 def_trait_1 = 40 [default = 0];</code>
     *
     * <pre>
     ** 防御特性1 
     * </pre>
     */
    int getDefTrait1();

    /**
     * <code>optional int32 def_trait_2 = 41 [default = 0];</code>
     *
     * <pre>
     ** 防御特性2 
     * </pre>
     */
    boolean hasDefTrait2();
    /**
     * <code>optional int32 def_trait_2 = 41 [default = 0];</code>
     *
     * <pre>
     ** 防御特性2 
     * </pre>
     */
    int getDefTrait2();

    /**
     * <code>optional int32 def_trait_3 = 42 [default = 0];</code>
     *
     * <pre>
     ** 防御特性3 
     * </pre>
     */
    boolean hasDefTrait3();
    /**
     * <code>optional int32 def_trait_3 = 42 [default = 0];</code>
     *
     * <pre>
     ** 防御特性3 
     * </pre>
     */
    int getDefTrait3();

    /**
     * <code>optional int32 wpn_type = 43 [default = 0];</code>
     *
     * <pre>
     ** 武器类型
     *射弹武器=1
     *能量武器=2
     *混合武器=3
     *炸弹武器=4
     *导弹武器=5
     *末日武器=6
     * </pre>
     */
    boolean hasWpnType();
    /**
     * <code>optional int32 wpn_type = 43 [default = 0];</code>
     *
     * <pre>
     ** 武器类型
     *射弹武器=1
     *能量武器=2
     *混合武器=3
     *炸弹武器=4
     *导弹武器=5
     *末日武器=6
     * </pre>
     */
    int getWpnType();

    /**
     * <code>optional int32 dmg_to_shld = 44 [default = 0];</code>
     *
     * <pre>
     ** 对护盾伤害
     *(shld=shield)
     *(百分比)
     * </pre>
     */
    boolean hasDmgToShld();
    /**
     * <code>optional int32 dmg_to_shld = 44 [default = 0];</code>
     *
     * <pre>
     ** 对护盾伤害
     *(shld=shield)
     *(百分比)
     * </pre>
     */
    int getDmgToShld();

    /**
     * <code>optional int32 os_em_dmg = 45 [default = 0];</code>
     *
     * <pre>
     ** 单发电磁伤害
     *(os=one shot) 
     * </pre>
     */
    boolean hasOsEmDmg();
    /**
     * <code>optional int32 os_em_dmg = 45 [default = 0];</code>
     *
     * <pre>
     ** 单发电磁伤害
     *(os=one shot) 
     * </pre>
     */
    int getOsEmDmg();

    /**
     * <code>optional int32 os_therm_dmg = 46 [default = 0];</code>
     *
     * <pre>
     ** 单发热能伤害 
     * </pre>
     */
    boolean hasOsThermDmg();
    /**
     * <code>optional int32 os_therm_dmg = 46 [default = 0];</code>
     *
     * <pre>
     ** 单发热能伤害 
     * </pre>
     */
    int getOsThermDmg();

    /**
     * <code>optional int32 os_kin_dmg = 47 [default = 0];</code>
     *
     * <pre>
     ** 单发动能伤害 
     * </pre>
     */
    boolean hasOsKinDmg();
    /**
     * <code>optional int32 os_kin_dmg = 47 [default = 0];</code>
     *
     * <pre>
     ** 单发动能伤害 
     * </pre>
     */
    int getOsKinDmg();

    /**
     * <code>optional int32 os_exp_dmg = 48 [default = 0];</code>
     *
     * <pre>
     ** 单发爆炸伤害 
     * </pre>
     */
    boolean hasOsExpDmg();
    /**
     * <code>optional int32 os_exp_dmg = 48 [default = 0];</code>
     *
     * <pre>
     ** 单发爆炸伤害 
     * </pre>
     */
    int getOsExpDmg();

    /**
     * <code>optional int32 short_rng_ac = 49 [default = 0];</code>
     *
     * <pre>
     ** 近距离命中率
     *(ac=accuracy)
     *(百分比)
     * </pre>
     */
    boolean hasShortRngAc();
    /**
     * <code>optional int32 short_rng_ac = 49 [default = 0];</code>
     *
     * <pre>
     ** 近距离命中率
     *(ac=accuracy)
     *(百分比)
     * </pre>
     */
    int getShortRngAc();

    /**
     * <code>optional int32 mid_rng_ac = 50 [default = 0];</code>
     *
     * <pre>
     ** 中距离命中率
     *(百分比) 
     * </pre>
     */
    boolean hasMidRngAc();
    /**
     * <code>optional int32 mid_rng_ac = 50 [default = 0];</code>
     *
     * <pre>
     ** 中距离命中率
     *(百分比) 
     * </pre>
     */
    int getMidRngAc();

    /**
     * <code>optional int32 long_rng_ac = 51 [default = 0];</code>
     *
     * <pre>
     ** 远距离命中率
     *(百分比) 
     * </pre>
     */
    boolean hasLongRngAc();
    /**
     * <code>optional int32 long_rng_ac = 51 [default = 0];</code>
     *
     * <pre>
     ** 远距离命中率
     *(百分比) 
     * </pre>
     */
    int getLongRngAc();

    /**
     * <code>optional int32 short_rng_delay = 52 [default = 0];</code>
     *
     * <pre>
     ** 近距离击中延迟
     *(帧) 
     * </pre>
     */
    boolean hasShortRngDelay();
    /**
     * <code>optional int32 short_rng_delay = 52 [default = 0];</code>
     *
     * <pre>
     ** 近距离击中延迟
     *(帧) 
     * </pre>
     */
    int getShortRngDelay();

    /**
     * <code>optional int32 mid_rng_delay = 53 [default = 0];</code>
     *
     * <pre>
     ** 中距离击中延迟
     *(帧) 
     * </pre>
     */
    boolean hasMidRngDelay();
    /**
     * <code>optional int32 mid_rng_delay = 53 [default = 0];</code>
     *
     * <pre>
     ** 中距离击中延迟
     *(帧) 
     * </pre>
     */
    int getMidRngDelay();

    /**
     * <code>optional int32 long_rng_delay = 54 [default = 0];</code>
     *
     * <pre>
     ** 远距离击中延迟
     *(帧) 
     * </pre>
     */
    boolean hasLongRngDelay();
    /**
     * <code>optional int32 long_rng_delay = 54 [default = 0];</code>
     *
     * <pre>
     ** 远距离击中延迟
     *(帧) 
     * </pre>
     */
    int getLongRngDelay();

    /**
     * <code>optional int32 burst_qty = 55 [default = 0];</code>
     *
     * <pre>
     ** 连发弹数 
     * </pre>
     */
    boolean hasBurstQty();
    /**
     * <code>optional int32 burst_qty = 55 [default = 0];</code>
     *
     * <pre>
     ** 连发弹数 
     * </pre>
     */
    int getBurstQty();

    /**
     * <code>optional int32 burst_intvl = 56 [default = 0];</code>
     *
     * <pre>
     ** 单发间隔
     *(intvl=interval)
     *(帧)
     * </pre>
     */
    boolean hasBurstIntvl();
    /**
     * <code>optional int32 burst_intvl = 56 [default = 0];</code>
     *
     * <pre>
     ** 单发间隔
     *(intvl=interval)
     *(帧)
     * </pre>
     */
    int getBurstIntvl();

    /**
     * <code>optional int32 reload_intvl = 57 [default = 0];</code>
     *
     * <pre>
     ** 填装时间
     *(帧) 
     * </pre>
     */
    boolean hasReloadIntvl();
    /**
     * <code>optional int32 reload_intvl = 57 [default = 0];</code>
     *
     * <pre>
     ** 填装时间
     *(帧) 
     * </pre>
     */
    int getReloadIntvl();

    /**
     * <code>optional int32 wpn_trait_1 = 58 [default = 0];</code>
     *
     * <pre>
     ** 武器特性1 
     * </pre>
     */
    boolean hasWpnTrait1();
    /**
     * <code>optional int32 wpn_trait_1 = 58 [default = 0];</code>
     *
     * <pre>
     ** 武器特性1 
     * </pre>
     */
    int getWpnTrait1();

    /**
     * <code>optional int32 wpn_trait_2 = 59 [default = 0];</code>
     *
     * <pre>
     ** 武器特性2 
     * </pre>
     */
    boolean hasWpnTrait2();
    /**
     * <code>optional int32 wpn_trait_2 = 59 [default = 0];</code>
     *
     * <pre>
     ** 武器特性2 
     * </pre>
     */
    int getWpnTrait2();

    /**
     * <code>optional int32 wpn_trait_3 = 60 [default = 0];</code>
     *
     * <pre>
     ** 武器特性3 
     * </pre>
     */
    boolean hasWpnTrait3();
    /**
     * <code>optional int32 wpn_trait_3 = 60 [default = 0];</code>
     *
     * <pre>
     ** 武器特性3 
     * </pre>
     */
    int getWpnTrait3();

    /**
     * <code>optional int32 thrust = 61 [default = 0];</code>
     *
     * <pre>
     ** 动力 
     * </pre>
     */
    boolean hasThrust();
    /**
     * <code>optional int32 thrust = 61 [default = 0];</code>
     *
     * <pre>
     ** 动力 
     * </pre>
     */
    int getThrust();

    /**
     * <code>optional int32 fuel_vol = 62 [default = 0];</code>
     *
     * <pre>
     ** 燃料容积
     *(vol=volumn)
     *(立方米)
     * </pre>
     */
    boolean hasFuelVol();
    /**
     * <code>optional int32 fuel_vol = 62 [default = 0];</code>
     *
     * <pre>
     ** 燃料容积
     *(vol=volumn)
     *(立方米)
     * </pre>
     */
    int getFuelVol();

    /**
     * <code>optional int32 fuel_cons_rate = 63 [default = 0];</code>
     *
     * <pre>
     ** 燃料消耗率
     *(cons=consumption)
     *(立方米/光年)
     * </pre>
     */
    boolean hasFuelConsRate();
    /**
     * <code>optional int32 fuel_cons_rate = 63 [default = 0];</code>
     *
     * <pre>
     ** 燃料消耗率
     *(cons=consumption)
     *(立方米/光年)
     * </pre>
     */
    int getFuelConsRate();

    /**
     * <code>optional int32 expl_level = 64 [default = 0];</code>
     *
     * <pre>
     ** 可探索等级
     *(expl=exploration) 
     * </pre>
     */
    boolean hasExplLevel();
    /**
     * <code>optional int32 expl_level = 64 [default = 0];</code>
     *
     * <pre>
     ** 可探索等级
     *(expl=exploration) 
     * </pre>
     */
    int getExplLevel();

    /**
     * <code>optional int32 expl_spd = 65 [default = 0];</code>
     *
     * <pre>
     ** 探索速度
     *(探索量/小时)
     *探索量为
     *1000
     * </pre>
     */
    boolean hasExplSpd();
    /**
     * <code>optional int32 expl_spd = 65 [default = 0];</code>
     *
     * <pre>
     ** 探索速度
     *(探索量/小时)
     *探索量为
     *1000
     * </pre>
     */
    int getExplSpd();

    /**
     * <code>optional int32 mining_spd_coeff = 66 [default = 0];</code>
     *
     * <pre>
     ** 采矿速度系数
     *(百分比) 
     * </pre>
     */
    boolean hasMiningSpdCoeff();
    /**
     * <code>optional int32 mining_spd_coeff = 66 [default = 0];</code>
     *
     * <pre>
     ** 采矿速度系数
     *(百分比) 
     * </pre>
     */
    int getMiningSpdCoeff();

    /**
     * <code>optional int32 payload_type = 67 [default = 0];</code>
     *
     * <pre>
     ** 装载类型
     *人=1
     *货物=2
     *矿物=3
     * </pre>
     */
    boolean hasPayloadType();
    /**
     * <code>optional int32 payload_type = 67 [default = 0];</code>
     *
     * <pre>
     ** 装载类型
     *人=1
     *货物=2
     *矿物=3
     * </pre>
     */
    int getPayloadType();

    /**
     * <code>optional int32 payload = 68 [default = 0];</code>
     *
     * <pre>
     ** 装载量
     *(立方米) 
     * </pre>
     */
    boolean hasPayload();
    /**
     * <code>optional int32 payload = 68 [default = 0];</code>
     *
     * <pre>
     ** 装载量
     *(立方米) 
     * </pre>
     */
    int getPayload();

    /**
     * <code>optional int32 col_spd = 69 [default = 0];</code>
     *
     * <pre>
     ** 殖民速度
     *(col=colony)
     *(殖民量/小时)
     * </pre>
     */
    boolean hasColSpd();
    /**
     * <code>optional int32 col_spd = 69 [default = 0];</code>
     *
     * <pre>
     ** 殖民速度
     *(col=colony)
     *(殖民量/小时)
     * </pre>
     */
    int getColSpd();

    /**
     * <code>optional int32 time_cost = 70 [default = 0];</code>
     *
     * <pre>
     ** 消耗时间
     *（秒） 
     * </pre>
     */
    boolean hasTimeCost();
    /**
     * <code>optional int32 time_cost = 70 [default = 0];</code>
     *
     * <pre>
     ** 消耗时间
     *（秒） 
     * </pre>
     */
    int getTimeCost();

    /**
     * <code>optional int32 ele_cost = 71 [default = 0];</code>
     *
     * <pre>
     ** 消耗电力 
     * </pre>
     */
    boolean hasEleCost();
    /**
     * <code>optional int32 ele_cost = 71 [default = 0];</code>
     *
     * <pre>
     ** 消耗电力 
     * </pre>
     */
    int getEleCost();

    /**
     * <code>repeated .com.game.server.data.SHIP_HULL_TECH.CostStruct cost_table = 72;</code>
     */
    java.util.List<com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStruct> 
        getCostTableList();
    /**
     * <code>repeated .com.game.server.data.SHIP_HULL_TECH.CostStruct cost_table = 72;</code>
     */
    com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStruct getCostTable(int index);
    /**
     * <code>repeated .com.game.server.data.SHIP_HULL_TECH.CostStruct cost_table = 72;</code>
     */
    int getCostTableCount();
    /**
     * <code>repeated .com.game.server.data.SHIP_HULL_TECH.CostStruct cost_table = 72;</code>
     */
    java.util.List<? extends com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStructOrBuilder> 
        getCostTableOrBuilderList();
    /**
     * <code>repeated .com.game.server.data.SHIP_HULL_TECH.CostStruct cost_table = 72;</code>
     */
    com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStructOrBuilder getCostTableOrBuilder(
        int index);

    /**
     * <code>optional int32 stor_unit = 73 [default = 0];</code>
     *
     * <pre>
     ** 储存体积
     *占用
     *(立方米)
     * </pre>
     */
    boolean hasStorUnit();
    /**
     * <code>optional int32 stor_unit = 73 [default = 0];</code>
     *
     * <pre>
     ** 储存体积
     *占用
     *(立方米)
     * </pre>
     */
    int getStorUnit();
  }
  /**
   * Protobuf type {@code com.game.server.data.SHIP_HULL_TECH}
   */
  public static final class SHIP_HULL_TECH extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.game.server.data.SHIP_HULL_TECH)
      SHIP_HULL_TECHOrBuilder {
    // Use SHIP_HULL_TECH.newBuilder() to construct.
    private SHIP_HULL_TECH(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SHIP_HULL_TECH(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SHIP_HULL_TECH defaultInstance;
    public static SHIP_HULL_TECH getDefaultInstance() {
      return defaultInstance;
    }

    public SHIP_HULL_TECH getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SHIP_HULL_TECH(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      int mutable_bitField1_ = 0;
      int mutable_bitField2_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              id_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              matType_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              hullSize_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              hullType_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              hullLvl_ = input.readInt32();
              break;
            }
            case 50: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000020;
              translTableName_ = bs;
              break;
            }
            case 58: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000040;
              hullName_ = bs;
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              inUse_ = input.readInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              maxHullLvl_ = input.readInt32();
              break;
            }
            case 82: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000200;
              prefabName_ = bs;
              break;
            }
            case 90: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000400;
              iconName_ = bs;
              break;
            }
            case 98: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000800;
              desc_ = bs;
              break;
            }
            case 104: {
              bitField0_ |= 0x00001000;
              uiOrder_ = input.readInt32();
              break;
            }
            case 112: {
              bitField0_ |= 0x00002000;
              uiScale_ = input.readInt32();
              break;
            }
            case 120: {
              bitField0_ |= 0x00004000;
              hullSlotTop_ = input.readInt32();
              break;
            }
            case 128: {
              bitField0_ |= 0x00008000;
              hullSlotBottom_ = input.readInt32();
              break;
            }
            case 136: {
              bitField0_ |= 0x00010000;
              hullSlotLeft_ = input.readInt32();
              break;
            }
            case 144: {
              bitField0_ |= 0x00020000;
              hullSlotRight_ = input.readInt32();
              break;
            }
            case 152: {
              bitField0_ |= 0x00040000;
              hullSlotFront_ = input.readInt32();
              break;
            }
            case 160: {
              bitField0_ |= 0x00080000;
              hullSlotBack_ = input.readInt32();
              break;
            }
            case 168: {
              bitField0_ |= 0x00100000;
              bldgLvlReq_ = input.readInt32();
              break;
            }
            case 176: {
              bitField0_ |= 0x00200000;
              sspCost_ = input.readInt32();
              break;
            }
            case 184: {
              bitField0_ |= 0x00400000;
              funcType_ = input.readInt32();
              break;
            }
            case 192: {
              bitField0_ |= 0x00800000;
              crewQty_ = input.readInt32();
              break;
            }
            case 200: {
              bitField0_ |= 0x01000000;
              mass_ = input.readInt32();
              break;
            }
            case 208: {
              bitField0_ |= 0x02000000;
              strutHp_ = input.readInt32();
              break;
            }
            case 216: {
              bitField0_ |= 0x04000000;
              strutRepr_ = input.readInt32();
              break;
            }
            case 224: {
              bitField0_ |= 0x08000000;
              shieldHp_ = input.readInt32();
              break;
            }
            case 232: {
              bitField0_ |= 0x10000000;
              shieldRepr_ = input.readInt32();
              break;
            }
            case 240: {
              bitField0_ |= 0x20000000;
              emRes_ = input.readInt32();
              break;
            }
            case 248: {
              bitField0_ |= 0x40000000;
              thermRes_ = input.readInt32();
              break;
            }
            case 256: {
              bitField0_ |= 0x80000000;
              kinRes_ = input.readInt32();
              break;
            }
            case 264: {
              bitField1_ |= 0x00000001;
              expRes_ = input.readInt32();
              break;
            }
            case 272: {
              bitField1_ |= 0x00000002;
              tgtValue_ = input.readInt32();
              break;
            }
            case 280: {
              bitField1_ |= 0x00000004;
              evaValue_ = input.readInt32();
              break;
            }
            case 288: {
              bitField1_ |= 0x00000008;
              cruzSpd_ = input.readInt32();
              break;
            }
            case 296: {
              bitField1_ |= 0x00000010;
              revSpd_ = input.readInt32();
              break;
            }
            case 304: {
              bitField1_ |= 0x00000020;
              negStatRes_ = input.readInt32();
              break;
            }
            case 312: {
              bitField1_ |= 0x00000040;
              debuffRes_ = input.readInt32();
              break;
            }
            case 320: {
              bitField1_ |= 0x00000080;
              defTrait1_ = input.readInt32();
              break;
            }
            case 328: {
              bitField1_ |= 0x00000100;
              defTrait2_ = input.readInt32();
              break;
            }
            case 336: {
              bitField1_ |= 0x00000200;
              defTrait3_ = input.readInt32();
              break;
            }
            case 344: {
              bitField1_ |= 0x00000400;
              wpnType_ = input.readInt32();
              break;
            }
            case 352: {
              bitField1_ |= 0x00000800;
              dmgToShld_ = input.readInt32();
              break;
            }
            case 360: {
              bitField1_ |= 0x00001000;
              osEmDmg_ = input.readInt32();
              break;
            }
            case 368: {
              bitField1_ |= 0x00002000;
              osThermDmg_ = input.readInt32();
              break;
            }
            case 376: {
              bitField1_ |= 0x00004000;
              osKinDmg_ = input.readInt32();
              break;
            }
            case 384: {
              bitField1_ |= 0x00008000;
              osExpDmg_ = input.readInt32();
              break;
            }
            case 392: {
              bitField1_ |= 0x00010000;
              shortRngAc_ = input.readInt32();
              break;
            }
            case 400: {
              bitField1_ |= 0x00020000;
              midRngAc_ = input.readInt32();
              break;
            }
            case 408: {
              bitField1_ |= 0x00040000;
              longRngAc_ = input.readInt32();
              break;
            }
            case 416: {
              bitField1_ |= 0x00080000;
              shortRngDelay_ = input.readInt32();
              break;
            }
            case 424: {
              bitField1_ |= 0x00100000;
              midRngDelay_ = input.readInt32();
              break;
            }
            case 432: {
              bitField1_ |= 0x00200000;
              longRngDelay_ = input.readInt32();
              break;
            }
            case 440: {
              bitField1_ |= 0x00400000;
              burstQty_ = input.readInt32();
              break;
            }
            case 448: {
              bitField1_ |= 0x00800000;
              burstIntvl_ = input.readInt32();
              break;
            }
            case 456: {
              bitField1_ |= 0x01000000;
              reloadIntvl_ = input.readInt32();
              break;
            }
            case 464: {
              bitField1_ |= 0x02000000;
              wpnTrait1_ = input.readInt32();
              break;
            }
            case 472: {
              bitField1_ |= 0x04000000;
              wpnTrait2_ = input.readInt32();
              break;
            }
            case 480: {
              bitField1_ |= 0x08000000;
              wpnTrait3_ = input.readInt32();
              break;
            }
            case 488: {
              bitField1_ |= 0x10000000;
              thrust_ = input.readInt32();
              break;
            }
            case 496: {
              bitField1_ |= 0x20000000;
              fuelVol_ = input.readInt32();
              break;
            }
            case 504: {
              bitField1_ |= 0x40000000;
              fuelConsRate_ = input.readInt32();
              break;
            }
            case 512: {
              bitField1_ |= 0x80000000;
              explLevel_ = input.readInt32();
              break;
            }
            case 520: {
              bitField2_ |= 0x00000001;
              explSpd_ = input.readInt32();
              break;
            }
            case 528: {
              bitField2_ |= 0x00000002;
              miningSpdCoeff_ = input.readInt32();
              break;
            }
            case 536: {
              bitField2_ |= 0x00000004;
              payloadType_ = input.readInt32();
              break;
            }
            case 544: {
              bitField2_ |= 0x00000008;
              payload_ = input.readInt32();
              break;
            }
            case 552: {
              bitField2_ |= 0x00000010;
              colSpd_ = input.readInt32();
              break;
            }
            case 560: {
              bitField2_ |= 0x00000020;
              timeCost_ = input.readInt32();
              break;
            }
            case 568: {
              bitField2_ |= 0x00000040;
              eleCost_ = input.readInt32();
              break;
            }
            case 578: {
              if (!((mutable_bitField2_ & 0x00000080) == 0x00000080)) {
                costTable_ = new java.util.ArrayList<com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStruct>();
                mutable_bitField2_ |= 0x00000080;
              }
              costTable_.add(input.readMessage(com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStruct.PARSER, extensionRegistry));
              break;
            }
            case 584: {
              bitField2_ |= 0x00000080;
              storUnit_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField2_ & 0x00000080) == 0x00000080)) {
          costTable_ = java.util.Collections.unmodifiableList(costTable_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.game.server.data.ShipHullTechData.internal_static_com_game_server_data_SHIP_HULL_TECH_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.game.server.data.ShipHullTechData.internal_static_com_game_server_data_SHIP_HULL_TECH_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.class, com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.Builder.class);
    }

    public static com.google.protobuf.Parser<SHIP_HULL_TECH> PARSER =
        new com.google.protobuf.AbstractParser<SHIP_HULL_TECH>() {
      public SHIP_HULL_TECH parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SHIP_HULL_TECH(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<SHIP_HULL_TECH> getParserForType() {
      return PARSER;
    }

    public interface CostStructOrBuilder extends
        // @@protoc_insertion_point(interface_extends:com.game.server.data.SHIP_HULL_TECH.CostStruct)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>optional int32 cost_id = 1 [default = 0];</code>
       *
       * <pre>
       ** 消耗ID 
       * </pre>
       */
      boolean hasCostId();
      /**
       * <code>optional int32 cost_id = 1 [default = 0];</code>
       *
       * <pre>
       ** 消耗ID 
       * </pre>
       */
      int getCostId();

      /**
       * <code>optional int32 cost_qty = 2 [default = 0];</code>
       *
       * <pre>
       ** 消耗数量
       *(qty=quantity) 
       * </pre>
       */
      boolean hasCostQty();
      /**
       * <code>optional int32 cost_qty = 2 [default = 0];</code>
       *
       * <pre>
       ** 消耗数量
       *(qty=quantity) 
       * </pre>
       */
      int getCostQty();
    }
    /**
     * Protobuf type {@code com.game.server.data.SHIP_HULL_TECH.CostStruct}
     */
    public static final class CostStruct extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:com.game.server.data.SHIP_HULL_TECH.CostStruct)
        CostStructOrBuilder {
      // Use CostStruct.newBuilder() to construct.
      private CostStruct(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private CostStruct(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final CostStruct defaultInstance;
      public static CostStruct getDefaultInstance() {
        return defaultInstance;
      }

      public CostStruct getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private CostStruct(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                costId_ = input.readInt32();
                break;
              }
              case 16: {
                bitField0_ |= 0x00000002;
                costQty_ = input.readInt32();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.game.server.data.ShipHullTechData.internal_static_com_game_server_data_SHIP_HULL_TECH_CostStruct_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.game.server.data.ShipHullTechData.internal_static_com_game_server_data_SHIP_HULL_TECH_CostStruct_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStruct.class, com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStruct.Builder.class);
      }

      public static com.google.protobuf.Parser<CostStruct> PARSER =
          new com.google.protobuf.AbstractParser<CostStruct>() {
        public CostStruct parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new CostStruct(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<CostStruct> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      public static final int COST_ID_FIELD_NUMBER = 1;
      private int costId_;
      /**
       * <code>optional int32 cost_id = 1 [default = 0];</code>
       *
       * <pre>
       ** 消耗ID 
       * </pre>
       */
      public boolean hasCostId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 cost_id = 1 [default = 0];</code>
       *
       * <pre>
       ** 消耗ID 
       * </pre>
       */
      public int getCostId() {
        return costId_;
      }

      public static final int COST_QTY_FIELD_NUMBER = 2;
      private int costQty_;
      /**
       * <code>optional int32 cost_qty = 2 [default = 0];</code>
       *
       * <pre>
       ** 消耗数量
       *(qty=quantity) 
       * </pre>
       */
      public boolean hasCostQty() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 cost_qty = 2 [default = 0];</code>
       *
       * <pre>
       ** 消耗数量
       *(qty=quantity) 
       * </pre>
       */
      public int getCostQty() {
        return costQty_;
      }

      private void initFields() {
        costId_ = 0;
        costQty_ = 0;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeInt32(1, costId_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeInt32(2, costQty_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, costId_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(2, costQty_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStruct parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStruct parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStruct parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStruct parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStruct parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStruct parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStruct parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStruct parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStruct parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStruct parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStruct prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code com.game.server.data.SHIP_HULL_TECH.CostStruct}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:com.game.server.data.SHIP_HULL_TECH.CostStruct)
          com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStructOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.game.server.data.ShipHullTechData.internal_static_com_game_server_data_SHIP_HULL_TECH_CostStruct_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.game.server.data.ShipHullTechData.internal_static_com_game_server_data_SHIP_HULL_TECH_CostStruct_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStruct.class, com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStruct.Builder.class);
        }

        // Construct using com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStruct.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          costId_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          costQty_ = 0;
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.game.server.data.ShipHullTechData.internal_static_com_game_server_data_SHIP_HULL_TECH_CostStruct_descriptor;
        }

        public com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStruct getDefaultInstanceForType() {
          return com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStruct.getDefaultInstance();
        }

        public com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStruct build() {
          com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStruct result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStruct buildPartial() {
          com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStruct result = new com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStruct(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.costId_ = costId_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.costQty_ = costQty_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStruct) {
            return mergeFrom((com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStruct)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStruct other) {
          if (other == com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStruct.getDefaultInstance()) return this;
          if (other.hasCostId()) {
            setCostId(other.getCostId());
          }
          if (other.hasCostQty()) {
            setCostQty(other.getCostQty());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStruct parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStruct) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private int costId_ ;
        /**
         * <code>optional int32 cost_id = 1 [default = 0];</code>
         *
         * <pre>
         ** 消耗ID 
         * </pre>
         */
        public boolean hasCostId() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional int32 cost_id = 1 [default = 0];</code>
         *
         * <pre>
         ** 消耗ID 
         * </pre>
         */
        public int getCostId() {
          return costId_;
        }
        /**
         * <code>optional int32 cost_id = 1 [default = 0];</code>
         *
         * <pre>
         ** 消耗ID 
         * </pre>
         */
        public Builder setCostId(int value) {
          bitField0_ |= 0x00000001;
          costId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 cost_id = 1 [default = 0];</code>
         *
         * <pre>
         ** 消耗ID 
         * </pre>
         */
        public Builder clearCostId() {
          bitField0_ = (bitField0_ & ~0x00000001);
          costId_ = 0;
          onChanged();
          return this;
        }

        private int costQty_ ;
        /**
         * <code>optional int32 cost_qty = 2 [default = 0];</code>
         *
         * <pre>
         ** 消耗数量
         *(qty=quantity) 
         * </pre>
         */
        public boolean hasCostQty() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional int32 cost_qty = 2 [default = 0];</code>
         *
         * <pre>
         ** 消耗数量
         *(qty=quantity) 
         * </pre>
         */
        public int getCostQty() {
          return costQty_;
        }
        /**
         * <code>optional int32 cost_qty = 2 [default = 0];</code>
         *
         * <pre>
         ** 消耗数量
         *(qty=quantity) 
         * </pre>
         */
        public Builder setCostQty(int value) {
          bitField0_ |= 0x00000002;
          costQty_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 cost_qty = 2 [default = 0];</code>
         *
         * <pre>
         ** 消耗数量
         *(qty=quantity) 
         * </pre>
         */
        public Builder clearCostQty() {
          bitField0_ = (bitField0_ & ~0x00000002);
          costQty_ = 0;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:com.game.server.data.SHIP_HULL_TECH.CostStruct)
      }

      static {
        defaultInstance = new CostStruct(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:com.game.server.data.SHIP_HULL_TECH.CostStruct)
    }

    private int bitField0_;
    private int bitField1_;
    private int bitField2_;
    public static final int ID_FIELD_NUMBER = 1;
    private int id_;
    /**
     * <code>required int32 id = 1 [default = 0];</code>
     *
     * <pre>
     ** 舰体部件ID 
     * </pre>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 id = 1 [default = 0];</code>
     *
     * <pre>
     ** 舰体部件ID 
     * </pre>
     */
    public int getId() {
      return id_;
    }

    public static final int MAT_TYPE_FIELD_NUMBER = 2;
    private int matType_;
    /**
     * <code>optional int32 mat_type = 2 [default = 0];</code>
     *
     * <pre>
     ** 材料类型
     *(mat=material)
     *机械体(Mech)=1
     *生物体(Bio)=2
     *光耀体(Phot)=3
     * </pre>
     */
    public boolean hasMatType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 mat_type = 2 [default = 0];</code>
     *
     * <pre>
     ** 材料类型
     *(mat=material)
     *机械体(Mech)=1
     *生物体(Bio)=2
     *光耀体(Phot)=3
     * </pre>
     */
    public int getMatType() {
      return matType_;
    }

    public static final int HULL_SIZE_FIELD_NUMBER = 3;
    private int hullSize_;
    /**
     * <code>optional int32 hull_size = 3 [default = 0];</code>
     *
     * <pre>
     ** 舰体尺度
     *功能舰=1
     *护卫舰=2
     *驱逐舰=3
     *巡洋舰=4
     *战巡舰=5
     *战列舰=6
     * </pre>
     */
    public boolean hasHullSize() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 hull_size = 3 [default = 0];</code>
     *
     * <pre>
     ** 舰体尺度
     *功能舰=1
     *护卫舰=2
     *驱逐舰=3
     *巡洋舰=4
     *战巡舰=5
     *战列舰=6
     * </pre>
     */
    public int getHullSize() {
      return hullSize_;
    }

    public static final int HULL_TYPE_FIELD_NUMBER = 4;
    private int hullType_;
    /**
     * <code>optional int32 hull_type = 4 [default = 0];</code>
     *
     * <pre>
     ** 舰体类型
     *舰首=1
     *舰中=2
     *舰尾=3
     * </pre>
     */
    public boolean hasHullType() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 hull_type = 4 [default = 0];</code>
     *
     * <pre>
     ** 舰体类型
     *舰首=1
     *舰中=2
     *舰尾=3
     * </pre>
     */
    public int getHullType() {
      return hullType_;
    }

    public static final int HULL_LVL_FIELD_NUMBER = 5;
    private int hullLvl_;
    /**
     * <code>optional int32 hull_lvl = 5 [default = 0];</code>
     *
     * <pre>
     ** 舰体等级 
     * </pre>
     */
    public boolean hasHullLvl() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 hull_lvl = 5 [default = 0];</code>
     *
     * <pre>
     ** 舰体等级 
     * </pre>
     */
    public int getHullLvl() {
      return hullLvl_;
    }

    public static final int TRANSL_TABLE_NAME_FIELD_NUMBER = 6;
    private java.lang.Object translTableName_;
    /**
     * <code>optional string transl_table_name = 6 [default = ""];</code>
     *
     * <pre>
     ** 翻译表名 
     * </pre>
     */
    public boolean hasTranslTableName() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional string transl_table_name = 6 [default = ""];</code>
     *
     * <pre>
     ** 翻译表名 
     * </pre>
     */
    public java.lang.String getTranslTableName() {
      java.lang.Object ref = translTableName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          translTableName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string transl_table_name = 6 [default = ""];</code>
     *
     * <pre>
     ** 翻译表名 
     * </pre>
     */
    public com.google.protobuf.ByteString
        getTranslTableNameBytes() {
      java.lang.Object ref = translTableName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        translTableName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int HULL_NAME_FIELD_NUMBER = 7;
    private java.lang.Object hullName_;
    /**
     * <code>optional string hull_name = 7 [default = ""];</code>
     *
     * <pre>
     ** 舰体名 
     * </pre>
     */
    public boolean hasHullName() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional string hull_name = 7 [default = ""];</code>
     *
     * <pre>
     ** 舰体名 
     * </pre>
     */
    public java.lang.String getHullName() {
      java.lang.Object ref = hullName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          hullName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string hull_name = 7 [default = ""];</code>
     *
     * <pre>
     ** 舰体名 
     * </pre>
     */
    public com.google.protobuf.ByteString
        getHullNameBytes() {
      java.lang.Object ref = hullName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        hullName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int IN_USE_FIELD_NUMBER = 8;
    private int inUse_;
    /**
     * <code>optional int32 in_use = 8 [default = 0];</code>
     *
     * <pre>
     ** 可用
     *1表示是
     *0表示否
     * </pre>
     */
    public boolean hasInUse() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 in_use = 8 [default = 0];</code>
     *
     * <pre>
     ** 可用
     *1表示是
     *0表示否
     * </pre>
     */
    public int getInUse() {
      return inUse_;
    }

    public static final int MAX_HULL_LVL_FIELD_NUMBER = 9;
    private int maxHullLvl_;
    /**
     * <code>optional int32 max_hull_lvl = 9 [default = 0];</code>
     *
     * <pre>
     ** 舰体最大等级 
     * </pre>
     */
    public boolean hasMaxHullLvl() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional int32 max_hull_lvl = 9 [default = 0];</code>
     *
     * <pre>
     ** 舰体最大等级 
     * </pre>
     */
    public int getMaxHullLvl() {
      return maxHullLvl_;
    }

    public static final int PREFAB_NAME_FIELD_NUMBER = 10;
    private java.lang.Object prefabName_;
    /**
     * <code>optional string prefab_name = 10 [default = ""];</code>
     *
     * <pre>
     ** 模型名 
     * </pre>
     */
    public boolean hasPrefabName() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional string prefab_name = 10 [default = ""];</code>
     *
     * <pre>
     ** 模型名 
     * </pre>
     */
    public java.lang.String getPrefabName() {
      java.lang.Object ref = prefabName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          prefabName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string prefab_name = 10 [default = ""];</code>
     *
     * <pre>
     ** 模型名 
     * </pre>
     */
    public com.google.protobuf.ByteString
        getPrefabNameBytes() {
      java.lang.Object ref = prefabName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        prefabName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ICON_NAME_FIELD_NUMBER = 11;
    private java.lang.Object iconName_;
    /**
     * <code>optional string icon_name = 11 [default = ""];</code>
     *
     * <pre>
     ** 图标名称 
     * </pre>
     */
    public boolean hasIconName() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional string icon_name = 11 [default = ""];</code>
     *
     * <pre>
     ** 图标名称 
     * </pre>
     */
    public java.lang.String getIconName() {
      java.lang.Object ref = iconName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          iconName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string icon_name = 11 [default = ""];</code>
     *
     * <pre>
     ** 图标名称 
     * </pre>
     */
    public com.google.protobuf.ByteString
        getIconNameBytes() {
      java.lang.Object ref = iconName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        iconName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int DESC_FIELD_NUMBER = 12;
    private java.lang.Object desc_;
    /**
     * <code>optional string desc = 12 [default = ""];</code>
     *
     * <pre>
     ** 描述 
     * </pre>
     */
    public boolean hasDesc() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional string desc = 12 [default = ""];</code>
     *
     * <pre>
     ** 描述 
     * </pre>
     */
    public java.lang.String getDesc() {
      java.lang.Object ref = desc_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          desc_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string desc = 12 [default = ""];</code>
     *
     * <pre>
     ** 描述 
     * </pre>
     */
    public com.google.protobuf.ByteString
        getDescBytes() {
      java.lang.Object ref = desc_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        desc_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int UI_ORDER_FIELD_NUMBER = 13;
    private int uiOrder_;
    /**
     * <code>optional int32 ui_order = 13 [default = 0];</code>
     *
     * <pre>
     ** 界面排序 
     * </pre>
     */
    public boolean hasUiOrder() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional int32 ui_order = 13 [default = 0];</code>
     *
     * <pre>
     ** 界面排序 
     * </pre>
     */
    public int getUiOrder() {
      return uiOrder_;
    }

    public static final int UI_SCALE_FIELD_NUMBER = 14;
    private int uiScale_;
    /**
     * <code>optional int32 ui_scale = 14 [default = 0];</code>
     *
     * <pre>
     ** 界面缩放
     *(百分比) 
     * </pre>
     */
    public boolean hasUiScale() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional int32 ui_scale = 14 [default = 0];</code>
     *
     * <pre>
     ** 界面缩放
     *(百分比) 
     * </pre>
     */
    public int getUiScale() {
      return uiScale_;
    }

    public static final int HULL_SLOT_TOP_FIELD_NUMBER = 15;
    private int hullSlotTop_;
    /**
     * <code>optional int32 hull_slot_top = 15 [default = 0];</code>
     *
     * <pre>
     ** 舰体孔位上 
     * </pre>
     */
    public boolean hasHullSlotTop() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional int32 hull_slot_top = 15 [default = 0];</code>
     *
     * <pre>
     ** 舰体孔位上 
     * </pre>
     */
    public int getHullSlotTop() {
      return hullSlotTop_;
    }

    public static final int HULL_SLOT_BOTTOM_FIELD_NUMBER = 16;
    private int hullSlotBottom_;
    /**
     * <code>optional int32 hull_slot_bottom = 16 [default = 0];</code>
     *
     * <pre>
     ** 舰体孔位下 
     * </pre>
     */
    public boolean hasHullSlotBottom() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional int32 hull_slot_bottom = 16 [default = 0];</code>
     *
     * <pre>
     ** 舰体孔位下 
     * </pre>
     */
    public int getHullSlotBottom() {
      return hullSlotBottom_;
    }

    public static final int HULL_SLOT_LEFT_FIELD_NUMBER = 17;
    private int hullSlotLeft_;
    /**
     * <code>optional int32 hull_slot_left = 17 [default = 0];</code>
     *
     * <pre>
     ** 舰体孔位左 
     * </pre>
     */
    public boolean hasHullSlotLeft() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional int32 hull_slot_left = 17 [default = 0];</code>
     *
     * <pre>
     ** 舰体孔位左 
     * </pre>
     */
    public int getHullSlotLeft() {
      return hullSlotLeft_;
    }

    public static final int HULL_SLOT_RIGHT_FIELD_NUMBER = 18;
    private int hullSlotRight_;
    /**
     * <code>optional int32 hull_slot_right = 18 [default = 0];</code>
     *
     * <pre>
     ** 舰体孔位右 
     * </pre>
     */
    public boolean hasHullSlotRight() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional int32 hull_slot_right = 18 [default = 0];</code>
     *
     * <pre>
     ** 舰体孔位右 
     * </pre>
     */
    public int getHullSlotRight() {
      return hullSlotRight_;
    }

    public static final int HULL_SLOT_FRONT_FIELD_NUMBER = 19;
    private int hullSlotFront_;
    /**
     * <code>optional int32 hull_slot_front = 19 [default = 0];</code>
     *
     * <pre>
     ** 舰体孔位前 
     * </pre>
     */
    public boolean hasHullSlotFront() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional int32 hull_slot_front = 19 [default = 0];</code>
     *
     * <pre>
     ** 舰体孔位前 
     * </pre>
     */
    public int getHullSlotFront() {
      return hullSlotFront_;
    }

    public static final int HULL_SLOT_BACK_FIELD_NUMBER = 20;
    private int hullSlotBack_;
    /**
     * <code>optional int32 hull_slot_back = 20 [default = 0];</code>
     *
     * <pre>
     ** 舰体孔位后 
     * </pre>
     */
    public boolean hasHullSlotBack() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>optional int32 hull_slot_back = 20 [default = 0];</code>
     *
     * <pre>
     ** 舰体孔位后 
     * </pre>
     */
    public int getHullSlotBack() {
      return hullSlotBack_;
    }

    public static final int BLDG_LVL_REQ_FIELD_NUMBER = 21;
    private int bldgLvlReq_;
    /**
     * <code>optional int32 bldg_lvl_req = 21 [default = 0];</code>
     *
     * <pre>
     ** 建筑等级要求 
     * </pre>
     */
    public boolean hasBldgLvlReq() {
      return ((bitField0_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>optional int32 bldg_lvl_req = 21 [default = 0];</code>
     *
     * <pre>
     ** 建筑等级要求 
     * </pre>
     */
    public int getBldgLvlReq() {
      return bldgLvlReq_;
    }

    public static final int SSP_COST_FIELD_NUMBER = 22;
    private int sspCost_;
    /**
     * <code>optional int32 ssp_cost = 22 [default = 0];</code>
     *
     * <pre>
     ** 空间占用 
     * </pre>
     */
    public boolean hasSspCost() {
      return ((bitField0_ & 0x00200000) == 0x00200000);
    }
    /**
     * <code>optional int32 ssp_cost = 22 [default = 0];</code>
     *
     * <pre>
     ** 空间占用 
     * </pre>
     */
    public int getSspCost() {
      return sspCost_;
    }

    public static final int FUNC_TYPE_FIELD_NUMBER = 23;
    private int funcType_;
    /**
     * <code>optional int32 func_type = 23 [default = 0];</code>
     *
     * <pre>
     ** 功能类型
     *无=0
     *殖民=1
     *探索=2
     *采集=3
     *运输=4
     * </pre>
     */
    public boolean hasFuncType() {
      return ((bitField0_ & 0x00400000) == 0x00400000);
    }
    /**
     * <code>optional int32 func_type = 23 [default = 0];</code>
     *
     * <pre>
     ** 功能类型
     *无=0
     *殖民=1
     *探索=2
     *采集=3
     *运输=4
     * </pre>
     */
    public int getFuncType() {
      return funcType_;
    }

    public static final int CREW_QTY_FIELD_NUMBER = 24;
    private int crewQty_;
    /**
     * <code>optional int32 crew_qty = 24 [default = 0];</code>
     *
     * <pre>
     ** 船员需求 
     * </pre>
     */
    public boolean hasCrewQty() {
      return ((bitField0_ & 0x00800000) == 0x00800000);
    }
    /**
     * <code>optional int32 crew_qty = 24 [default = 0];</code>
     *
     * <pre>
     ** 船员需求 
     * </pre>
     */
    public int getCrewQty() {
      return crewQty_;
    }

    public static final int MASS_FIELD_NUMBER = 25;
    private int mass_;
    /**
     * <code>optional int32 mass = 25 [default = 0];</code>
     *
     * <pre>
     ** 质量 
     * </pre>
     */
    public boolean hasMass() {
      return ((bitField0_ & 0x01000000) == 0x01000000);
    }
    /**
     * <code>optional int32 mass = 25 [default = 0];</code>
     *
     * <pre>
     ** 质量 
     * </pre>
     */
    public int getMass() {
      return mass_;
    }

    public static final int STRUT_HP_FIELD_NUMBER = 26;
    private int strutHp_;
    /**
     * <code>optional int32 strut_hp = 26 [default = 0];</code>
     *
     * <pre>
     ** 结构HP 
     * </pre>
     */
    public boolean hasStrutHp() {
      return ((bitField0_ & 0x02000000) == 0x02000000);
    }
    /**
     * <code>optional int32 strut_hp = 26 [default = 0];</code>
     *
     * <pre>
     ** 结构HP 
     * </pre>
     */
    public int getStrutHp() {
      return strutHp_;
    }

    public static final int STRUT_REPR_FIELD_NUMBER = 27;
    private int strutRepr_;
    /**
     * <code>optional int32 strut_repr = 27 [default = 0];</code>
     *
     * <pre>
     ** 结构修复
     *(repr=repair) 
     * </pre>
     */
    public boolean hasStrutRepr() {
      return ((bitField0_ & 0x04000000) == 0x04000000);
    }
    /**
     * <code>optional int32 strut_repr = 27 [default = 0];</code>
     *
     * <pre>
     ** 结构修复
     *(repr=repair) 
     * </pre>
     */
    public int getStrutRepr() {
      return strutRepr_;
    }

    public static final int SHIELD_HP_FIELD_NUMBER = 28;
    private int shieldHp_;
    /**
     * <code>optional int32 shield_hp = 28 [default = 0];</code>
     *
     * <pre>
     ** 护盾HP 
     * </pre>
     */
    public boolean hasShieldHp() {
      return ((bitField0_ & 0x08000000) == 0x08000000);
    }
    /**
     * <code>optional int32 shield_hp = 28 [default = 0];</code>
     *
     * <pre>
     ** 护盾HP 
     * </pre>
     */
    public int getShieldHp() {
      return shieldHp_;
    }

    public static final int SHIELD_REPR_FIELD_NUMBER = 29;
    private int shieldRepr_;
    /**
     * <code>optional int32 shield_repr = 29 [default = 0];</code>
     *
     * <pre>
     ** 护盾修复 
     * </pre>
     */
    public boolean hasShieldRepr() {
      return ((bitField0_ & 0x10000000) == 0x10000000);
    }
    /**
     * <code>optional int32 shield_repr = 29 [default = 0];</code>
     *
     * <pre>
     ** 护盾修复 
     * </pre>
     */
    public int getShieldRepr() {
      return shieldRepr_;
    }

    public static final int EM_RES_FIELD_NUMBER = 30;
    private int emRes_;
    /**
     * <code>optional int32 em_res = 30 [default = 0];</code>
     *
     * <pre>
     ** 电磁抗性 
     * </pre>
     */
    public boolean hasEmRes() {
      return ((bitField0_ & 0x20000000) == 0x20000000);
    }
    /**
     * <code>optional int32 em_res = 30 [default = 0];</code>
     *
     * <pre>
     ** 电磁抗性 
     * </pre>
     */
    public int getEmRes() {
      return emRes_;
    }

    public static final int THERM_RES_FIELD_NUMBER = 31;
    private int thermRes_;
    /**
     * <code>optional int32 therm_res = 31 [default = 0];</code>
     *
     * <pre>
     ** 热能抗性 
     * </pre>
     */
    public boolean hasThermRes() {
      return ((bitField0_ & 0x40000000) == 0x40000000);
    }
    /**
     * <code>optional int32 therm_res = 31 [default = 0];</code>
     *
     * <pre>
     ** 热能抗性 
     * </pre>
     */
    public int getThermRes() {
      return thermRes_;
    }

    public static final int KIN_RES_FIELD_NUMBER = 32;
    private int kinRes_;
    /**
     * <code>optional int32 kin_res = 32 [default = 0];</code>
     *
     * <pre>
     ** 动能抗性 
     * </pre>
     */
    public boolean hasKinRes() {
      return ((bitField0_ & 0x80000000) == 0x80000000);
    }
    /**
     * <code>optional int32 kin_res = 32 [default = 0];</code>
     *
     * <pre>
     ** 动能抗性 
     * </pre>
     */
    public int getKinRes() {
      return kinRes_;
    }

    public static final int EXP_RES_FIELD_NUMBER = 33;
    private int expRes_;
    /**
     * <code>optional int32 exp_res = 33 [default = 0];</code>
     *
     * <pre>
     ** 爆炸抗性 
     * </pre>
     */
    public boolean hasExpRes() {
      return ((bitField1_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 exp_res = 33 [default = 0];</code>
     *
     * <pre>
     ** 爆炸抗性 
     * </pre>
     */
    public int getExpRes() {
      return expRes_;
    }

    public static final int TGT_VALUE_FIELD_NUMBER = 34;
    private int tgtValue_;
    /**
     * <code>optional int32 tgt_value = 34 [default = 0];</code>
     *
     * <pre>
     ** 瞄准值
     *(tgt=targeting) 
     * </pre>
     */
    public boolean hasTgtValue() {
      return ((bitField1_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 tgt_value = 34 [default = 0];</code>
     *
     * <pre>
     ** 瞄准值
     *(tgt=targeting) 
     * </pre>
     */
    public int getTgtValue() {
      return tgtValue_;
    }

    public static final int EVA_VALUE_FIELD_NUMBER = 35;
    private int evaValue_;
    /**
     * <code>optional int32 eva_value = 35 [default = 0];</code>
     *
     * <pre>
     ** 回避值
     *(eva=evasion) 
     * </pre>
     */
    public boolean hasEvaValue() {
      return ((bitField1_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 eva_value = 35 [default = 0];</code>
     *
     * <pre>
     ** 回避值
     *(eva=evasion) 
     * </pre>
     */
    public int getEvaValue() {
      return evaValue_;
    }

    public static final int CRUZ_SPD_FIELD_NUMBER = 36;
    private int cruzSpd_;
    /**
     * <code>optional int32 cruz_spd = 36 [default = 0];</code>
     *
     * <pre>
     ** 移速
     *(cruz=cruising) 
     * </pre>
     */
    public boolean hasCruzSpd() {
      return ((bitField1_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 cruz_spd = 36 [default = 0];</code>
     *
     * <pre>
     ** 移速
     *(cruz=cruising) 
     * </pre>
     */
    public int getCruzSpd() {
      return cruzSpd_;
    }

    public static final int REV_SPD_FIELD_NUMBER = 37;
    private int revSpd_;
    /**
     * <code>optional int32 rev_spd = 37 [default = 0];</code>
     *
     * <pre>
     ** 转速
     *(rev=revolving) 
     * </pre>
     */
    public boolean hasRevSpd() {
      return ((bitField1_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 rev_spd = 37 [default = 0];</code>
     *
     * <pre>
     ** 转速
     *(rev=revolving) 
     * </pre>
     */
    public int getRevSpd() {
      return revSpd_;
    }

    public static final int NEG_STAT_RES_FIELD_NUMBER = 38;
    private int negStatRes_;
    /**
     * <code>optional int32 neg_stat_res = 38 [default = 0];</code>
     *
     * <pre>
     ** 异常耐性
     *(res=resistance) 
     * </pre>
     */
    public boolean hasNegStatRes() {
      return ((bitField1_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 neg_stat_res = 38 [default = 0];</code>
     *
     * <pre>
     ** 异常耐性
     *(res=resistance) 
     * </pre>
     */
    public int getNegStatRes() {
      return negStatRes_;
    }

    public static final int DEBUFF_RES_FIELD_NUMBER = 39;
    private int debuffRes_;
    /**
     * <code>optional int32 debuff_res = 39 [default = 0];</code>
     *
     * <pre>
     ** 减益耐性 
     * </pre>
     */
    public boolean hasDebuffRes() {
      return ((bitField1_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 debuff_res = 39 [default = 0];</code>
     *
     * <pre>
     ** 减益耐性 
     * </pre>
     */
    public int getDebuffRes() {
      return debuffRes_;
    }

    public static final int DEF_TRAIT_1_FIELD_NUMBER = 40;
    private int defTrait1_;
    /**
     * <code>optional int32 def_trait_1 = 40 [default = 0];</code>
     *
     * <pre>
     ** 防御特性1 
     * </pre>
     */
    public boolean hasDefTrait1() {
      return ((bitField1_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 def_trait_1 = 40 [default = 0];</code>
     *
     * <pre>
     ** 防御特性1 
     * </pre>
     */
    public int getDefTrait1() {
      return defTrait1_;
    }

    public static final int DEF_TRAIT_2_FIELD_NUMBER = 41;
    private int defTrait2_;
    /**
     * <code>optional int32 def_trait_2 = 41 [default = 0];</code>
     *
     * <pre>
     ** 防御特性2 
     * </pre>
     */
    public boolean hasDefTrait2() {
      return ((bitField1_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional int32 def_trait_2 = 41 [default = 0];</code>
     *
     * <pre>
     ** 防御特性2 
     * </pre>
     */
    public int getDefTrait2() {
      return defTrait2_;
    }

    public static final int DEF_TRAIT_3_FIELD_NUMBER = 42;
    private int defTrait3_;
    /**
     * <code>optional int32 def_trait_3 = 42 [default = 0];</code>
     *
     * <pre>
     ** 防御特性3 
     * </pre>
     */
    public boolean hasDefTrait3() {
      return ((bitField1_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional int32 def_trait_3 = 42 [default = 0];</code>
     *
     * <pre>
     ** 防御特性3 
     * </pre>
     */
    public int getDefTrait3() {
      return defTrait3_;
    }

    public static final int WPN_TYPE_FIELD_NUMBER = 43;
    private int wpnType_;
    /**
     * <code>optional int32 wpn_type = 43 [default = 0];</code>
     *
     * <pre>
     ** 武器类型
     *射弹武器=1
     *能量武器=2
     *混合武器=3
     *炸弹武器=4
     *导弹武器=5
     *末日武器=6
     * </pre>
     */
    public boolean hasWpnType() {
      return ((bitField1_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional int32 wpn_type = 43 [default = 0];</code>
     *
     * <pre>
     ** 武器类型
     *射弹武器=1
     *能量武器=2
     *混合武器=3
     *炸弹武器=4
     *导弹武器=5
     *末日武器=6
     * </pre>
     */
    public int getWpnType() {
      return wpnType_;
    }

    public static final int DMG_TO_SHLD_FIELD_NUMBER = 44;
    private int dmgToShld_;
    /**
     * <code>optional int32 dmg_to_shld = 44 [default = 0];</code>
     *
     * <pre>
     ** 对护盾伤害
     *(shld=shield)
     *(百分比)
     * </pre>
     */
    public boolean hasDmgToShld() {
      return ((bitField1_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional int32 dmg_to_shld = 44 [default = 0];</code>
     *
     * <pre>
     ** 对护盾伤害
     *(shld=shield)
     *(百分比)
     * </pre>
     */
    public int getDmgToShld() {
      return dmgToShld_;
    }

    public static final int OS_EM_DMG_FIELD_NUMBER = 45;
    private int osEmDmg_;
    /**
     * <code>optional int32 os_em_dmg = 45 [default = 0];</code>
     *
     * <pre>
     ** 单发电磁伤害
     *(os=one shot) 
     * </pre>
     */
    public boolean hasOsEmDmg() {
      return ((bitField1_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional int32 os_em_dmg = 45 [default = 0];</code>
     *
     * <pre>
     ** 单发电磁伤害
     *(os=one shot) 
     * </pre>
     */
    public int getOsEmDmg() {
      return osEmDmg_;
    }

    public static final int OS_THERM_DMG_FIELD_NUMBER = 46;
    private int osThermDmg_;
    /**
     * <code>optional int32 os_therm_dmg = 46 [default = 0];</code>
     *
     * <pre>
     ** 单发热能伤害 
     * </pre>
     */
    public boolean hasOsThermDmg() {
      return ((bitField1_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional int32 os_therm_dmg = 46 [default = 0];</code>
     *
     * <pre>
     ** 单发热能伤害 
     * </pre>
     */
    public int getOsThermDmg() {
      return osThermDmg_;
    }

    public static final int OS_KIN_DMG_FIELD_NUMBER = 47;
    private int osKinDmg_;
    /**
     * <code>optional int32 os_kin_dmg = 47 [default = 0];</code>
     *
     * <pre>
     ** 单发动能伤害 
     * </pre>
     */
    public boolean hasOsKinDmg() {
      return ((bitField1_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional int32 os_kin_dmg = 47 [default = 0];</code>
     *
     * <pre>
     ** 单发动能伤害 
     * </pre>
     */
    public int getOsKinDmg() {
      return osKinDmg_;
    }

    public static final int OS_EXP_DMG_FIELD_NUMBER = 48;
    private int osExpDmg_;
    /**
     * <code>optional int32 os_exp_dmg = 48 [default = 0];</code>
     *
     * <pre>
     ** 单发爆炸伤害 
     * </pre>
     */
    public boolean hasOsExpDmg() {
      return ((bitField1_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional int32 os_exp_dmg = 48 [default = 0];</code>
     *
     * <pre>
     ** 单发爆炸伤害 
     * </pre>
     */
    public int getOsExpDmg() {
      return osExpDmg_;
    }

    public static final int SHORT_RNG_AC_FIELD_NUMBER = 49;
    private int shortRngAc_;
    /**
     * <code>optional int32 short_rng_ac = 49 [default = 0];</code>
     *
     * <pre>
     ** 近距离命中率
     *(ac=accuracy)
     *(百分比)
     * </pre>
     */
    public boolean hasShortRngAc() {
      return ((bitField1_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional int32 short_rng_ac = 49 [default = 0];</code>
     *
     * <pre>
     ** 近距离命中率
     *(ac=accuracy)
     *(百分比)
     * </pre>
     */
    public int getShortRngAc() {
      return shortRngAc_;
    }

    public static final int MID_RNG_AC_FIELD_NUMBER = 50;
    private int midRngAc_;
    /**
     * <code>optional int32 mid_rng_ac = 50 [default = 0];</code>
     *
     * <pre>
     ** 中距离命中率
     *(百分比) 
     * </pre>
     */
    public boolean hasMidRngAc() {
      return ((bitField1_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional int32 mid_rng_ac = 50 [default = 0];</code>
     *
     * <pre>
     ** 中距离命中率
     *(百分比) 
     * </pre>
     */
    public int getMidRngAc() {
      return midRngAc_;
    }

    public static final int LONG_RNG_AC_FIELD_NUMBER = 51;
    private int longRngAc_;
    /**
     * <code>optional int32 long_rng_ac = 51 [default = 0];</code>
     *
     * <pre>
     ** 远距离命中率
     *(百分比) 
     * </pre>
     */
    public boolean hasLongRngAc() {
      return ((bitField1_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional int32 long_rng_ac = 51 [default = 0];</code>
     *
     * <pre>
     ** 远距离命中率
     *(百分比) 
     * </pre>
     */
    public int getLongRngAc() {
      return longRngAc_;
    }

    public static final int SHORT_RNG_DELAY_FIELD_NUMBER = 52;
    private int shortRngDelay_;
    /**
     * <code>optional int32 short_rng_delay = 52 [default = 0];</code>
     *
     * <pre>
     ** 近距离击中延迟
     *(帧) 
     * </pre>
     */
    public boolean hasShortRngDelay() {
      return ((bitField1_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>optional int32 short_rng_delay = 52 [default = 0];</code>
     *
     * <pre>
     ** 近距离击中延迟
     *(帧) 
     * </pre>
     */
    public int getShortRngDelay() {
      return shortRngDelay_;
    }

    public static final int MID_RNG_DELAY_FIELD_NUMBER = 53;
    private int midRngDelay_;
    /**
     * <code>optional int32 mid_rng_delay = 53 [default = 0];</code>
     *
     * <pre>
     ** 中距离击中延迟
     *(帧) 
     * </pre>
     */
    public boolean hasMidRngDelay() {
      return ((bitField1_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>optional int32 mid_rng_delay = 53 [default = 0];</code>
     *
     * <pre>
     ** 中距离击中延迟
     *(帧) 
     * </pre>
     */
    public int getMidRngDelay() {
      return midRngDelay_;
    }

    public static final int LONG_RNG_DELAY_FIELD_NUMBER = 54;
    private int longRngDelay_;
    /**
     * <code>optional int32 long_rng_delay = 54 [default = 0];</code>
     *
     * <pre>
     ** 远距离击中延迟
     *(帧) 
     * </pre>
     */
    public boolean hasLongRngDelay() {
      return ((bitField1_ & 0x00200000) == 0x00200000);
    }
    /**
     * <code>optional int32 long_rng_delay = 54 [default = 0];</code>
     *
     * <pre>
     ** 远距离击中延迟
     *(帧) 
     * </pre>
     */
    public int getLongRngDelay() {
      return longRngDelay_;
    }

    public static final int BURST_QTY_FIELD_NUMBER = 55;
    private int burstQty_;
    /**
     * <code>optional int32 burst_qty = 55 [default = 0];</code>
     *
     * <pre>
     ** 连发弹数 
     * </pre>
     */
    public boolean hasBurstQty() {
      return ((bitField1_ & 0x00400000) == 0x00400000);
    }
    /**
     * <code>optional int32 burst_qty = 55 [default = 0];</code>
     *
     * <pre>
     ** 连发弹数 
     * </pre>
     */
    public int getBurstQty() {
      return burstQty_;
    }

    public static final int BURST_INTVL_FIELD_NUMBER = 56;
    private int burstIntvl_;
    /**
     * <code>optional int32 burst_intvl = 56 [default = 0];</code>
     *
     * <pre>
     ** 单发间隔
     *(intvl=interval)
     *(帧)
     * </pre>
     */
    public boolean hasBurstIntvl() {
      return ((bitField1_ & 0x00800000) == 0x00800000);
    }
    /**
     * <code>optional int32 burst_intvl = 56 [default = 0];</code>
     *
     * <pre>
     ** 单发间隔
     *(intvl=interval)
     *(帧)
     * </pre>
     */
    public int getBurstIntvl() {
      return burstIntvl_;
    }

    public static final int RELOAD_INTVL_FIELD_NUMBER = 57;
    private int reloadIntvl_;
    /**
     * <code>optional int32 reload_intvl = 57 [default = 0];</code>
     *
     * <pre>
     ** 填装时间
     *(帧) 
     * </pre>
     */
    public boolean hasReloadIntvl() {
      return ((bitField1_ & 0x01000000) == 0x01000000);
    }
    /**
     * <code>optional int32 reload_intvl = 57 [default = 0];</code>
     *
     * <pre>
     ** 填装时间
     *(帧) 
     * </pre>
     */
    public int getReloadIntvl() {
      return reloadIntvl_;
    }

    public static final int WPN_TRAIT_1_FIELD_NUMBER = 58;
    private int wpnTrait1_;
    /**
     * <code>optional int32 wpn_trait_1 = 58 [default = 0];</code>
     *
     * <pre>
     ** 武器特性1 
     * </pre>
     */
    public boolean hasWpnTrait1() {
      return ((bitField1_ & 0x02000000) == 0x02000000);
    }
    /**
     * <code>optional int32 wpn_trait_1 = 58 [default = 0];</code>
     *
     * <pre>
     ** 武器特性1 
     * </pre>
     */
    public int getWpnTrait1() {
      return wpnTrait1_;
    }

    public static final int WPN_TRAIT_2_FIELD_NUMBER = 59;
    private int wpnTrait2_;
    /**
     * <code>optional int32 wpn_trait_2 = 59 [default = 0];</code>
     *
     * <pre>
     ** 武器特性2 
     * </pre>
     */
    public boolean hasWpnTrait2() {
      return ((bitField1_ & 0x04000000) == 0x04000000);
    }
    /**
     * <code>optional int32 wpn_trait_2 = 59 [default = 0];</code>
     *
     * <pre>
     ** 武器特性2 
     * </pre>
     */
    public int getWpnTrait2() {
      return wpnTrait2_;
    }

    public static final int WPN_TRAIT_3_FIELD_NUMBER = 60;
    private int wpnTrait3_;
    /**
     * <code>optional int32 wpn_trait_3 = 60 [default = 0];</code>
     *
     * <pre>
     ** 武器特性3 
     * </pre>
     */
    public boolean hasWpnTrait3() {
      return ((bitField1_ & 0x08000000) == 0x08000000);
    }
    /**
     * <code>optional int32 wpn_trait_3 = 60 [default = 0];</code>
     *
     * <pre>
     ** 武器特性3 
     * </pre>
     */
    public int getWpnTrait3() {
      return wpnTrait3_;
    }

    public static final int THRUST_FIELD_NUMBER = 61;
    private int thrust_;
    /**
     * <code>optional int32 thrust = 61 [default = 0];</code>
     *
     * <pre>
     ** 动力 
     * </pre>
     */
    public boolean hasThrust() {
      return ((bitField1_ & 0x10000000) == 0x10000000);
    }
    /**
     * <code>optional int32 thrust = 61 [default = 0];</code>
     *
     * <pre>
     ** 动力 
     * </pre>
     */
    public int getThrust() {
      return thrust_;
    }

    public static final int FUEL_VOL_FIELD_NUMBER = 62;
    private int fuelVol_;
    /**
     * <code>optional int32 fuel_vol = 62 [default = 0];</code>
     *
     * <pre>
     ** 燃料容积
     *(vol=volumn)
     *(立方米)
     * </pre>
     */
    public boolean hasFuelVol() {
      return ((bitField1_ & 0x20000000) == 0x20000000);
    }
    /**
     * <code>optional int32 fuel_vol = 62 [default = 0];</code>
     *
     * <pre>
     ** 燃料容积
     *(vol=volumn)
     *(立方米)
     * </pre>
     */
    public int getFuelVol() {
      return fuelVol_;
    }

    public static final int FUEL_CONS_RATE_FIELD_NUMBER = 63;
    private int fuelConsRate_;
    /**
     * <code>optional int32 fuel_cons_rate = 63 [default = 0];</code>
     *
     * <pre>
     ** 燃料消耗率
     *(cons=consumption)
     *(立方米/光年)
     * </pre>
     */
    public boolean hasFuelConsRate() {
      return ((bitField1_ & 0x40000000) == 0x40000000);
    }
    /**
     * <code>optional int32 fuel_cons_rate = 63 [default = 0];</code>
     *
     * <pre>
     ** 燃料消耗率
     *(cons=consumption)
     *(立方米/光年)
     * </pre>
     */
    public int getFuelConsRate() {
      return fuelConsRate_;
    }

    public static final int EXPL_LEVEL_FIELD_NUMBER = 64;
    private int explLevel_;
    /**
     * <code>optional int32 expl_level = 64 [default = 0];</code>
     *
     * <pre>
     ** 可探索等级
     *(expl=exploration) 
     * </pre>
     */
    public boolean hasExplLevel() {
      return ((bitField1_ & 0x80000000) == 0x80000000);
    }
    /**
     * <code>optional int32 expl_level = 64 [default = 0];</code>
     *
     * <pre>
     ** 可探索等级
     *(expl=exploration) 
     * </pre>
     */
    public int getExplLevel() {
      return explLevel_;
    }

    public static final int EXPL_SPD_FIELD_NUMBER = 65;
    private int explSpd_;
    /**
     * <code>optional int32 expl_spd = 65 [default = 0];</code>
     *
     * <pre>
     ** 探索速度
     *(探索量/小时)
     *探索量为
     *1000
     * </pre>
     */
    public boolean hasExplSpd() {
      return ((bitField2_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 expl_spd = 65 [default = 0];</code>
     *
     * <pre>
     ** 探索速度
     *(探索量/小时)
     *探索量为
     *1000
     * </pre>
     */
    public int getExplSpd() {
      return explSpd_;
    }

    public static final int MINING_SPD_COEFF_FIELD_NUMBER = 66;
    private int miningSpdCoeff_;
    /**
     * <code>optional int32 mining_spd_coeff = 66 [default = 0];</code>
     *
     * <pre>
     ** 采矿速度系数
     *(百分比) 
     * </pre>
     */
    public boolean hasMiningSpdCoeff() {
      return ((bitField2_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 mining_spd_coeff = 66 [default = 0];</code>
     *
     * <pre>
     ** 采矿速度系数
     *(百分比) 
     * </pre>
     */
    public int getMiningSpdCoeff() {
      return miningSpdCoeff_;
    }

    public static final int PAYLOAD_TYPE_FIELD_NUMBER = 67;
    private int payloadType_;
    /**
     * <code>optional int32 payload_type = 67 [default = 0];</code>
     *
     * <pre>
     ** 装载类型
     *人=1
     *货物=2
     *矿物=3
     * </pre>
     */
    public boolean hasPayloadType() {
      return ((bitField2_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 payload_type = 67 [default = 0];</code>
     *
     * <pre>
     ** 装载类型
     *人=1
     *货物=2
     *矿物=3
     * </pre>
     */
    public int getPayloadType() {
      return payloadType_;
    }

    public static final int PAYLOAD_FIELD_NUMBER = 68;
    private int payload_;
    /**
     * <code>optional int32 payload = 68 [default = 0];</code>
     *
     * <pre>
     ** 装载量
     *(立方米) 
     * </pre>
     */
    public boolean hasPayload() {
      return ((bitField2_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 payload = 68 [default = 0];</code>
     *
     * <pre>
     ** 装载量
     *(立方米) 
     * </pre>
     */
    public int getPayload() {
      return payload_;
    }

    public static final int COL_SPD_FIELD_NUMBER = 69;
    private int colSpd_;
    /**
     * <code>optional int32 col_spd = 69 [default = 0];</code>
     *
     * <pre>
     ** 殖民速度
     *(col=colony)
     *(殖民量/小时)
     * </pre>
     */
    public boolean hasColSpd() {
      return ((bitField2_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 col_spd = 69 [default = 0];</code>
     *
     * <pre>
     ** 殖民速度
     *(col=colony)
     *(殖民量/小时)
     * </pre>
     */
    public int getColSpd() {
      return colSpd_;
    }

    public static final int TIME_COST_FIELD_NUMBER = 70;
    private int timeCost_;
    /**
     * <code>optional int32 time_cost = 70 [default = 0];</code>
     *
     * <pre>
     ** 消耗时间
     *（秒） 
     * </pre>
     */
    public boolean hasTimeCost() {
      return ((bitField2_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 time_cost = 70 [default = 0];</code>
     *
     * <pre>
     ** 消耗时间
     *（秒） 
     * </pre>
     */
    public int getTimeCost() {
      return timeCost_;
    }

    public static final int ELE_COST_FIELD_NUMBER = 71;
    private int eleCost_;
    /**
     * <code>optional int32 ele_cost = 71 [default = 0];</code>
     *
     * <pre>
     ** 消耗电力 
     * </pre>
     */
    public boolean hasEleCost() {
      return ((bitField2_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 ele_cost = 71 [default = 0];</code>
     *
     * <pre>
     ** 消耗电力 
     * </pre>
     */
    public int getEleCost() {
      return eleCost_;
    }

    public static final int COST_TABLE_FIELD_NUMBER = 72;
    private java.util.List<com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStruct> costTable_;
    /**
     * <code>repeated .com.game.server.data.SHIP_HULL_TECH.CostStruct cost_table = 72;</code>
     */
    public java.util.List<com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStruct> getCostTableList() {
      return costTable_;
    }
    /**
     * <code>repeated .com.game.server.data.SHIP_HULL_TECH.CostStruct cost_table = 72;</code>
     */
    public java.util.List<? extends com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStructOrBuilder> 
        getCostTableOrBuilderList() {
      return costTable_;
    }
    /**
     * <code>repeated .com.game.server.data.SHIP_HULL_TECH.CostStruct cost_table = 72;</code>
     */
    public int getCostTableCount() {
      return costTable_.size();
    }
    /**
     * <code>repeated .com.game.server.data.SHIP_HULL_TECH.CostStruct cost_table = 72;</code>
     */
    public com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStruct getCostTable(int index) {
      return costTable_.get(index);
    }
    /**
     * <code>repeated .com.game.server.data.SHIP_HULL_TECH.CostStruct cost_table = 72;</code>
     */
    public com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStructOrBuilder getCostTableOrBuilder(
        int index) {
      return costTable_.get(index);
    }

    public static final int STOR_UNIT_FIELD_NUMBER = 73;
    private int storUnit_;
    /**
     * <code>optional int32 stor_unit = 73 [default = 0];</code>
     *
     * <pre>
     ** 储存体积
     *占用
     *(立方米)
     * </pre>
     */
    public boolean hasStorUnit() {
      return ((bitField2_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 stor_unit = 73 [default = 0];</code>
     *
     * <pre>
     ** 储存体积
     *占用
     *(立方米)
     * </pre>
     */
    public int getStorUnit() {
      return storUnit_;
    }

    private void initFields() {
      id_ = 0;
      matType_ = 0;
      hullSize_ = 0;
      hullType_ = 0;
      hullLvl_ = 0;
      translTableName_ = "";
      hullName_ = "";
      inUse_ = 0;
      maxHullLvl_ = 0;
      prefabName_ = "";
      iconName_ = "";
      desc_ = "";
      uiOrder_ = 0;
      uiScale_ = 0;
      hullSlotTop_ = 0;
      hullSlotBottom_ = 0;
      hullSlotLeft_ = 0;
      hullSlotRight_ = 0;
      hullSlotFront_ = 0;
      hullSlotBack_ = 0;
      bldgLvlReq_ = 0;
      sspCost_ = 0;
      funcType_ = 0;
      crewQty_ = 0;
      mass_ = 0;
      strutHp_ = 0;
      strutRepr_ = 0;
      shieldHp_ = 0;
      shieldRepr_ = 0;
      emRes_ = 0;
      thermRes_ = 0;
      kinRes_ = 0;
      expRes_ = 0;
      tgtValue_ = 0;
      evaValue_ = 0;
      cruzSpd_ = 0;
      revSpd_ = 0;
      negStatRes_ = 0;
      debuffRes_ = 0;
      defTrait1_ = 0;
      defTrait2_ = 0;
      defTrait3_ = 0;
      wpnType_ = 0;
      dmgToShld_ = 0;
      osEmDmg_ = 0;
      osThermDmg_ = 0;
      osKinDmg_ = 0;
      osExpDmg_ = 0;
      shortRngAc_ = 0;
      midRngAc_ = 0;
      longRngAc_ = 0;
      shortRngDelay_ = 0;
      midRngDelay_ = 0;
      longRngDelay_ = 0;
      burstQty_ = 0;
      burstIntvl_ = 0;
      reloadIntvl_ = 0;
      wpnTrait1_ = 0;
      wpnTrait2_ = 0;
      wpnTrait3_ = 0;
      thrust_ = 0;
      fuelVol_ = 0;
      fuelConsRate_ = 0;
      explLevel_ = 0;
      explSpd_ = 0;
      miningSpdCoeff_ = 0;
      payloadType_ = 0;
      payload_ = 0;
      colSpd_ = 0;
      timeCost_ = 0;
      eleCost_ = 0;
      costTable_ = java.util.Collections.emptyList();
      storUnit_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, matType_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, hullSize_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, hullType_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, hullLvl_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBytes(6, getTranslTableNameBytes());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBytes(7, getHullNameBytes());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(8, inUse_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(9, maxHullLvl_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeBytes(10, getPrefabNameBytes());
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeBytes(11, getIconNameBytes());
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeBytes(12, getDescBytes());
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeInt32(13, uiOrder_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeInt32(14, uiScale_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeInt32(15, hullSlotTop_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeInt32(16, hullSlotBottom_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeInt32(17, hullSlotLeft_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeInt32(18, hullSlotRight_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeInt32(19, hullSlotFront_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeInt32(20, hullSlotBack_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        output.writeInt32(21, bldgLvlReq_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        output.writeInt32(22, sspCost_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        output.writeInt32(23, funcType_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        output.writeInt32(24, crewQty_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        output.writeInt32(25, mass_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        output.writeInt32(26, strutHp_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        output.writeInt32(27, strutRepr_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        output.writeInt32(28, shieldHp_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        output.writeInt32(29, shieldRepr_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        output.writeInt32(30, emRes_);
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        output.writeInt32(31, thermRes_);
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        output.writeInt32(32, kinRes_);
      }
      if (((bitField1_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(33, expRes_);
      }
      if (((bitField1_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(34, tgtValue_);
      }
      if (((bitField1_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(35, evaValue_);
      }
      if (((bitField1_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(36, cruzSpd_);
      }
      if (((bitField1_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(37, revSpd_);
      }
      if (((bitField1_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(38, negStatRes_);
      }
      if (((bitField1_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(39, debuffRes_);
      }
      if (((bitField1_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(40, defTrait1_);
      }
      if (((bitField1_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(41, defTrait2_);
      }
      if (((bitField1_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(42, defTrait3_);
      }
      if (((bitField1_ & 0x00000400) == 0x00000400)) {
        output.writeInt32(43, wpnType_);
      }
      if (((bitField1_ & 0x00000800) == 0x00000800)) {
        output.writeInt32(44, dmgToShld_);
      }
      if (((bitField1_ & 0x00001000) == 0x00001000)) {
        output.writeInt32(45, osEmDmg_);
      }
      if (((bitField1_ & 0x00002000) == 0x00002000)) {
        output.writeInt32(46, osThermDmg_);
      }
      if (((bitField1_ & 0x00004000) == 0x00004000)) {
        output.writeInt32(47, osKinDmg_);
      }
      if (((bitField1_ & 0x00008000) == 0x00008000)) {
        output.writeInt32(48, osExpDmg_);
      }
      if (((bitField1_ & 0x00010000) == 0x00010000)) {
        output.writeInt32(49, shortRngAc_);
      }
      if (((bitField1_ & 0x00020000) == 0x00020000)) {
        output.writeInt32(50, midRngAc_);
      }
      if (((bitField1_ & 0x00040000) == 0x00040000)) {
        output.writeInt32(51, longRngAc_);
      }
      if (((bitField1_ & 0x00080000) == 0x00080000)) {
        output.writeInt32(52, shortRngDelay_);
      }
      if (((bitField1_ & 0x00100000) == 0x00100000)) {
        output.writeInt32(53, midRngDelay_);
      }
      if (((bitField1_ & 0x00200000) == 0x00200000)) {
        output.writeInt32(54, longRngDelay_);
      }
      if (((bitField1_ & 0x00400000) == 0x00400000)) {
        output.writeInt32(55, burstQty_);
      }
      if (((bitField1_ & 0x00800000) == 0x00800000)) {
        output.writeInt32(56, burstIntvl_);
      }
      if (((bitField1_ & 0x01000000) == 0x01000000)) {
        output.writeInt32(57, reloadIntvl_);
      }
      if (((bitField1_ & 0x02000000) == 0x02000000)) {
        output.writeInt32(58, wpnTrait1_);
      }
      if (((bitField1_ & 0x04000000) == 0x04000000)) {
        output.writeInt32(59, wpnTrait2_);
      }
      if (((bitField1_ & 0x08000000) == 0x08000000)) {
        output.writeInt32(60, wpnTrait3_);
      }
      if (((bitField1_ & 0x10000000) == 0x10000000)) {
        output.writeInt32(61, thrust_);
      }
      if (((bitField1_ & 0x20000000) == 0x20000000)) {
        output.writeInt32(62, fuelVol_);
      }
      if (((bitField1_ & 0x40000000) == 0x40000000)) {
        output.writeInt32(63, fuelConsRate_);
      }
      if (((bitField1_ & 0x80000000) == 0x80000000)) {
        output.writeInt32(64, explLevel_);
      }
      if (((bitField2_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(65, explSpd_);
      }
      if (((bitField2_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(66, miningSpdCoeff_);
      }
      if (((bitField2_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(67, payloadType_);
      }
      if (((bitField2_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(68, payload_);
      }
      if (((bitField2_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(69, colSpd_);
      }
      if (((bitField2_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(70, timeCost_);
      }
      if (((bitField2_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(71, eleCost_);
      }
      for (int i = 0; i < costTable_.size(); i++) {
        output.writeMessage(72, costTable_.get(i));
      }
      if (((bitField2_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(73, storUnit_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, matType_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, hullSize_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, hullType_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, hullLvl_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(6, getTranslTableNameBytes());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(7, getHullNameBytes());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, inUse_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, maxHullLvl_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(10, getPrefabNameBytes());
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(11, getIconNameBytes());
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(12, getDescBytes());
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(13, uiOrder_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(14, uiScale_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(15, hullSlotTop_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(16, hullSlotBottom_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(17, hullSlotLeft_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(18, hullSlotRight_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(19, hullSlotFront_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(20, hullSlotBack_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(21, bldgLvlReq_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(22, sspCost_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(23, funcType_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(24, crewQty_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(25, mass_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(26, strutHp_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(27, strutRepr_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(28, shieldHp_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(29, shieldRepr_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(30, emRes_);
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(31, thermRes_);
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(32, kinRes_);
      }
      if (((bitField1_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(33, expRes_);
      }
      if (((bitField1_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(34, tgtValue_);
      }
      if (((bitField1_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(35, evaValue_);
      }
      if (((bitField1_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(36, cruzSpd_);
      }
      if (((bitField1_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(37, revSpd_);
      }
      if (((bitField1_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(38, negStatRes_);
      }
      if (((bitField1_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(39, debuffRes_);
      }
      if (((bitField1_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(40, defTrait1_);
      }
      if (((bitField1_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(41, defTrait2_);
      }
      if (((bitField1_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(42, defTrait3_);
      }
      if (((bitField1_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(43, wpnType_);
      }
      if (((bitField1_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(44, dmgToShld_);
      }
      if (((bitField1_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(45, osEmDmg_);
      }
      if (((bitField1_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(46, osThermDmg_);
      }
      if (((bitField1_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(47, osKinDmg_);
      }
      if (((bitField1_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(48, osExpDmg_);
      }
      if (((bitField1_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(49, shortRngAc_);
      }
      if (((bitField1_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(50, midRngAc_);
      }
      if (((bitField1_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(51, longRngAc_);
      }
      if (((bitField1_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(52, shortRngDelay_);
      }
      if (((bitField1_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(53, midRngDelay_);
      }
      if (((bitField1_ & 0x00200000) == 0x00200000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(54, longRngDelay_);
      }
      if (((bitField1_ & 0x00400000) == 0x00400000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(55, burstQty_);
      }
      if (((bitField1_ & 0x00800000) == 0x00800000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(56, burstIntvl_);
      }
      if (((bitField1_ & 0x01000000) == 0x01000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(57, reloadIntvl_);
      }
      if (((bitField1_ & 0x02000000) == 0x02000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(58, wpnTrait1_);
      }
      if (((bitField1_ & 0x04000000) == 0x04000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(59, wpnTrait2_);
      }
      if (((bitField1_ & 0x08000000) == 0x08000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(60, wpnTrait3_);
      }
      if (((bitField1_ & 0x10000000) == 0x10000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(61, thrust_);
      }
      if (((bitField1_ & 0x20000000) == 0x20000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(62, fuelVol_);
      }
      if (((bitField1_ & 0x40000000) == 0x40000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(63, fuelConsRate_);
      }
      if (((bitField1_ & 0x80000000) == 0x80000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(64, explLevel_);
      }
      if (((bitField2_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(65, explSpd_);
      }
      if (((bitField2_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(66, miningSpdCoeff_);
      }
      if (((bitField2_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(67, payloadType_);
      }
      if (((bitField2_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(68, payload_);
      }
      if (((bitField2_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(69, colSpd_);
      }
      if (((bitField2_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(70, timeCost_);
      }
      if (((bitField2_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(71, eleCost_);
      }
      for (int i = 0; i < costTable_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(72, costTable_.get(i));
      }
      if (((bitField2_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(73, storUnit_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.game.server.data.ShipHullTechData.SHIP_HULL_TECH parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.game.server.data.ShipHullTechData.SHIP_HULL_TECH parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.game.server.data.ShipHullTechData.SHIP_HULL_TECH parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.game.server.data.ShipHullTechData.SHIP_HULL_TECH parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.game.server.data.ShipHullTechData.SHIP_HULL_TECH parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.game.server.data.ShipHullTechData.SHIP_HULL_TECH parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.game.server.data.ShipHullTechData.SHIP_HULL_TECH parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.game.server.data.ShipHullTechData.SHIP_HULL_TECH parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.game.server.data.ShipHullTechData.SHIP_HULL_TECH parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.game.server.data.ShipHullTechData.SHIP_HULL_TECH parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.game.server.data.ShipHullTechData.SHIP_HULL_TECH prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.game.server.data.SHIP_HULL_TECH}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.game.server.data.SHIP_HULL_TECH)
        com.game.server.data.ShipHullTechData.SHIP_HULL_TECHOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.game.server.data.ShipHullTechData.internal_static_com_game_server_data_SHIP_HULL_TECH_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.game.server.data.ShipHullTechData.internal_static_com_game_server_data_SHIP_HULL_TECH_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.class, com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.Builder.class);
      }

      // Construct using com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getCostTableFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        id_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        matType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        hullSize_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        hullType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        hullLvl_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        translTableName_ = "";
        bitField0_ = (bitField0_ & ~0x00000020);
        hullName_ = "";
        bitField0_ = (bitField0_ & ~0x00000040);
        inUse_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        maxHullLvl_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        prefabName_ = "";
        bitField0_ = (bitField0_ & ~0x00000200);
        iconName_ = "";
        bitField0_ = (bitField0_ & ~0x00000400);
        desc_ = "";
        bitField0_ = (bitField0_ & ~0x00000800);
        uiOrder_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        uiScale_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        hullSlotTop_ = 0;
        bitField0_ = (bitField0_ & ~0x00004000);
        hullSlotBottom_ = 0;
        bitField0_ = (bitField0_ & ~0x00008000);
        hullSlotLeft_ = 0;
        bitField0_ = (bitField0_ & ~0x00010000);
        hullSlotRight_ = 0;
        bitField0_ = (bitField0_ & ~0x00020000);
        hullSlotFront_ = 0;
        bitField0_ = (bitField0_ & ~0x00040000);
        hullSlotBack_ = 0;
        bitField0_ = (bitField0_ & ~0x00080000);
        bldgLvlReq_ = 0;
        bitField0_ = (bitField0_ & ~0x00100000);
        sspCost_ = 0;
        bitField0_ = (bitField0_ & ~0x00200000);
        funcType_ = 0;
        bitField0_ = (bitField0_ & ~0x00400000);
        crewQty_ = 0;
        bitField0_ = (bitField0_ & ~0x00800000);
        mass_ = 0;
        bitField0_ = (bitField0_ & ~0x01000000);
        strutHp_ = 0;
        bitField0_ = (bitField0_ & ~0x02000000);
        strutRepr_ = 0;
        bitField0_ = (bitField0_ & ~0x04000000);
        shieldHp_ = 0;
        bitField0_ = (bitField0_ & ~0x08000000);
        shieldRepr_ = 0;
        bitField0_ = (bitField0_ & ~0x10000000);
        emRes_ = 0;
        bitField0_ = (bitField0_ & ~0x20000000);
        thermRes_ = 0;
        bitField0_ = (bitField0_ & ~0x40000000);
        kinRes_ = 0;
        bitField0_ = (bitField0_ & ~0x80000000);
        expRes_ = 0;
        bitField1_ = (bitField1_ & ~0x00000001);
        tgtValue_ = 0;
        bitField1_ = (bitField1_ & ~0x00000002);
        evaValue_ = 0;
        bitField1_ = (bitField1_ & ~0x00000004);
        cruzSpd_ = 0;
        bitField1_ = (bitField1_ & ~0x00000008);
        revSpd_ = 0;
        bitField1_ = (bitField1_ & ~0x00000010);
        negStatRes_ = 0;
        bitField1_ = (bitField1_ & ~0x00000020);
        debuffRes_ = 0;
        bitField1_ = (bitField1_ & ~0x00000040);
        defTrait1_ = 0;
        bitField1_ = (bitField1_ & ~0x00000080);
        defTrait2_ = 0;
        bitField1_ = (bitField1_ & ~0x00000100);
        defTrait3_ = 0;
        bitField1_ = (bitField1_ & ~0x00000200);
        wpnType_ = 0;
        bitField1_ = (bitField1_ & ~0x00000400);
        dmgToShld_ = 0;
        bitField1_ = (bitField1_ & ~0x00000800);
        osEmDmg_ = 0;
        bitField1_ = (bitField1_ & ~0x00001000);
        osThermDmg_ = 0;
        bitField1_ = (bitField1_ & ~0x00002000);
        osKinDmg_ = 0;
        bitField1_ = (bitField1_ & ~0x00004000);
        osExpDmg_ = 0;
        bitField1_ = (bitField1_ & ~0x00008000);
        shortRngAc_ = 0;
        bitField1_ = (bitField1_ & ~0x00010000);
        midRngAc_ = 0;
        bitField1_ = (bitField1_ & ~0x00020000);
        longRngAc_ = 0;
        bitField1_ = (bitField1_ & ~0x00040000);
        shortRngDelay_ = 0;
        bitField1_ = (bitField1_ & ~0x00080000);
        midRngDelay_ = 0;
        bitField1_ = (bitField1_ & ~0x00100000);
        longRngDelay_ = 0;
        bitField1_ = (bitField1_ & ~0x00200000);
        burstQty_ = 0;
        bitField1_ = (bitField1_ & ~0x00400000);
        burstIntvl_ = 0;
        bitField1_ = (bitField1_ & ~0x00800000);
        reloadIntvl_ = 0;
        bitField1_ = (bitField1_ & ~0x01000000);
        wpnTrait1_ = 0;
        bitField1_ = (bitField1_ & ~0x02000000);
        wpnTrait2_ = 0;
        bitField1_ = (bitField1_ & ~0x04000000);
        wpnTrait3_ = 0;
        bitField1_ = (bitField1_ & ~0x08000000);
        thrust_ = 0;
        bitField1_ = (bitField1_ & ~0x10000000);
        fuelVol_ = 0;
        bitField1_ = (bitField1_ & ~0x20000000);
        fuelConsRate_ = 0;
        bitField1_ = (bitField1_ & ~0x40000000);
        explLevel_ = 0;
        bitField1_ = (bitField1_ & ~0x80000000);
        explSpd_ = 0;
        bitField2_ = (bitField2_ & ~0x00000001);
        miningSpdCoeff_ = 0;
        bitField2_ = (bitField2_ & ~0x00000002);
        payloadType_ = 0;
        bitField2_ = (bitField2_ & ~0x00000004);
        payload_ = 0;
        bitField2_ = (bitField2_ & ~0x00000008);
        colSpd_ = 0;
        bitField2_ = (bitField2_ & ~0x00000010);
        timeCost_ = 0;
        bitField2_ = (bitField2_ & ~0x00000020);
        eleCost_ = 0;
        bitField2_ = (bitField2_ & ~0x00000040);
        if (costTableBuilder_ == null) {
          costTable_ = java.util.Collections.emptyList();
          bitField2_ = (bitField2_ & ~0x00000080);
        } else {
          costTableBuilder_.clear();
        }
        storUnit_ = 0;
        bitField2_ = (bitField2_ & ~0x00000100);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.game.server.data.ShipHullTechData.internal_static_com_game_server_data_SHIP_HULL_TECH_descriptor;
      }

      public com.game.server.data.ShipHullTechData.SHIP_HULL_TECH getDefaultInstanceForType() {
        return com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.getDefaultInstance();
      }

      public com.game.server.data.ShipHullTechData.SHIP_HULL_TECH build() {
        com.game.server.data.ShipHullTechData.SHIP_HULL_TECH result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.game.server.data.ShipHullTechData.SHIP_HULL_TECH buildPartial() {
        com.game.server.data.ShipHullTechData.SHIP_HULL_TECH result = new com.game.server.data.ShipHullTechData.SHIP_HULL_TECH(this);
        int from_bitField0_ = bitField0_;
        int from_bitField1_ = bitField1_;
        int from_bitField2_ = bitField2_;
        int to_bitField0_ = 0;
        int to_bitField1_ = 0;
        int to_bitField2_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.matType_ = matType_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.hullSize_ = hullSize_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.hullType_ = hullType_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.hullLvl_ = hullLvl_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.translTableName_ = translTableName_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.hullName_ = hullName_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.inUse_ = inUse_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.maxHullLvl_ = maxHullLvl_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.prefabName_ = prefabName_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.iconName_ = iconName_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.desc_ = desc_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.uiOrder_ = uiOrder_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.uiScale_ = uiScale_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.hullSlotTop_ = hullSlotTop_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.hullSlotBottom_ = hullSlotBottom_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.hullSlotLeft_ = hullSlotLeft_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00020000;
        }
        result.hullSlotRight_ = hullSlotRight_;
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00040000;
        }
        result.hullSlotFront_ = hullSlotFront_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00080000;
        }
        result.hullSlotBack_ = hullSlotBack_;
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00100000;
        }
        result.bldgLvlReq_ = bldgLvlReq_;
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00200000;
        }
        result.sspCost_ = sspCost_;
        if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
          to_bitField0_ |= 0x00400000;
        }
        result.funcType_ = funcType_;
        if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
          to_bitField0_ |= 0x00800000;
        }
        result.crewQty_ = crewQty_;
        if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
          to_bitField0_ |= 0x01000000;
        }
        result.mass_ = mass_;
        if (((from_bitField0_ & 0x02000000) == 0x02000000)) {
          to_bitField0_ |= 0x02000000;
        }
        result.strutHp_ = strutHp_;
        if (((from_bitField0_ & 0x04000000) == 0x04000000)) {
          to_bitField0_ |= 0x04000000;
        }
        result.strutRepr_ = strutRepr_;
        if (((from_bitField0_ & 0x08000000) == 0x08000000)) {
          to_bitField0_ |= 0x08000000;
        }
        result.shieldHp_ = shieldHp_;
        if (((from_bitField0_ & 0x10000000) == 0x10000000)) {
          to_bitField0_ |= 0x10000000;
        }
        result.shieldRepr_ = shieldRepr_;
        if (((from_bitField0_ & 0x20000000) == 0x20000000)) {
          to_bitField0_ |= 0x20000000;
        }
        result.emRes_ = emRes_;
        if (((from_bitField0_ & 0x40000000) == 0x40000000)) {
          to_bitField0_ |= 0x40000000;
        }
        result.thermRes_ = thermRes_;
        if (((from_bitField0_ & 0x80000000) == 0x80000000)) {
          to_bitField0_ |= 0x80000000;
        }
        result.kinRes_ = kinRes_;
        if (((from_bitField1_ & 0x00000001) == 0x00000001)) {
          to_bitField1_ |= 0x00000001;
        }
        result.expRes_ = expRes_;
        if (((from_bitField1_ & 0x00000002) == 0x00000002)) {
          to_bitField1_ |= 0x00000002;
        }
        result.tgtValue_ = tgtValue_;
        if (((from_bitField1_ & 0x00000004) == 0x00000004)) {
          to_bitField1_ |= 0x00000004;
        }
        result.evaValue_ = evaValue_;
        if (((from_bitField1_ & 0x00000008) == 0x00000008)) {
          to_bitField1_ |= 0x00000008;
        }
        result.cruzSpd_ = cruzSpd_;
        if (((from_bitField1_ & 0x00000010) == 0x00000010)) {
          to_bitField1_ |= 0x00000010;
        }
        result.revSpd_ = revSpd_;
        if (((from_bitField1_ & 0x00000020) == 0x00000020)) {
          to_bitField1_ |= 0x00000020;
        }
        result.negStatRes_ = negStatRes_;
        if (((from_bitField1_ & 0x00000040) == 0x00000040)) {
          to_bitField1_ |= 0x00000040;
        }
        result.debuffRes_ = debuffRes_;
        if (((from_bitField1_ & 0x00000080) == 0x00000080)) {
          to_bitField1_ |= 0x00000080;
        }
        result.defTrait1_ = defTrait1_;
        if (((from_bitField1_ & 0x00000100) == 0x00000100)) {
          to_bitField1_ |= 0x00000100;
        }
        result.defTrait2_ = defTrait2_;
        if (((from_bitField1_ & 0x00000200) == 0x00000200)) {
          to_bitField1_ |= 0x00000200;
        }
        result.defTrait3_ = defTrait3_;
        if (((from_bitField1_ & 0x00000400) == 0x00000400)) {
          to_bitField1_ |= 0x00000400;
        }
        result.wpnType_ = wpnType_;
        if (((from_bitField1_ & 0x00000800) == 0x00000800)) {
          to_bitField1_ |= 0x00000800;
        }
        result.dmgToShld_ = dmgToShld_;
        if (((from_bitField1_ & 0x00001000) == 0x00001000)) {
          to_bitField1_ |= 0x00001000;
        }
        result.osEmDmg_ = osEmDmg_;
        if (((from_bitField1_ & 0x00002000) == 0x00002000)) {
          to_bitField1_ |= 0x00002000;
        }
        result.osThermDmg_ = osThermDmg_;
        if (((from_bitField1_ & 0x00004000) == 0x00004000)) {
          to_bitField1_ |= 0x00004000;
        }
        result.osKinDmg_ = osKinDmg_;
        if (((from_bitField1_ & 0x00008000) == 0x00008000)) {
          to_bitField1_ |= 0x00008000;
        }
        result.osExpDmg_ = osExpDmg_;
        if (((from_bitField1_ & 0x00010000) == 0x00010000)) {
          to_bitField1_ |= 0x00010000;
        }
        result.shortRngAc_ = shortRngAc_;
        if (((from_bitField1_ & 0x00020000) == 0x00020000)) {
          to_bitField1_ |= 0x00020000;
        }
        result.midRngAc_ = midRngAc_;
        if (((from_bitField1_ & 0x00040000) == 0x00040000)) {
          to_bitField1_ |= 0x00040000;
        }
        result.longRngAc_ = longRngAc_;
        if (((from_bitField1_ & 0x00080000) == 0x00080000)) {
          to_bitField1_ |= 0x00080000;
        }
        result.shortRngDelay_ = shortRngDelay_;
        if (((from_bitField1_ & 0x00100000) == 0x00100000)) {
          to_bitField1_ |= 0x00100000;
        }
        result.midRngDelay_ = midRngDelay_;
        if (((from_bitField1_ & 0x00200000) == 0x00200000)) {
          to_bitField1_ |= 0x00200000;
        }
        result.longRngDelay_ = longRngDelay_;
        if (((from_bitField1_ & 0x00400000) == 0x00400000)) {
          to_bitField1_ |= 0x00400000;
        }
        result.burstQty_ = burstQty_;
        if (((from_bitField1_ & 0x00800000) == 0x00800000)) {
          to_bitField1_ |= 0x00800000;
        }
        result.burstIntvl_ = burstIntvl_;
        if (((from_bitField1_ & 0x01000000) == 0x01000000)) {
          to_bitField1_ |= 0x01000000;
        }
        result.reloadIntvl_ = reloadIntvl_;
        if (((from_bitField1_ & 0x02000000) == 0x02000000)) {
          to_bitField1_ |= 0x02000000;
        }
        result.wpnTrait1_ = wpnTrait1_;
        if (((from_bitField1_ & 0x04000000) == 0x04000000)) {
          to_bitField1_ |= 0x04000000;
        }
        result.wpnTrait2_ = wpnTrait2_;
        if (((from_bitField1_ & 0x08000000) == 0x08000000)) {
          to_bitField1_ |= 0x08000000;
        }
        result.wpnTrait3_ = wpnTrait3_;
        if (((from_bitField1_ & 0x10000000) == 0x10000000)) {
          to_bitField1_ |= 0x10000000;
        }
        result.thrust_ = thrust_;
        if (((from_bitField1_ & 0x20000000) == 0x20000000)) {
          to_bitField1_ |= 0x20000000;
        }
        result.fuelVol_ = fuelVol_;
        if (((from_bitField1_ & 0x40000000) == 0x40000000)) {
          to_bitField1_ |= 0x40000000;
        }
        result.fuelConsRate_ = fuelConsRate_;
        if (((from_bitField1_ & 0x80000000) == 0x80000000)) {
          to_bitField1_ |= 0x80000000;
        }
        result.explLevel_ = explLevel_;
        if (((from_bitField2_ & 0x00000001) == 0x00000001)) {
          to_bitField2_ |= 0x00000001;
        }
        result.explSpd_ = explSpd_;
        if (((from_bitField2_ & 0x00000002) == 0x00000002)) {
          to_bitField2_ |= 0x00000002;
        }
        result.miningSpdCoeff_ = miningSpdCoeff_;
        if (((from_bitField2_ & 0x00000004) == 0x00000004)) {
          to_bitField2_ |= 0x00000004;
        }
        result.payloadType_ = payloadType_;
        if (((from_bitField2_ & 0x00000008) == 0x00000008)) {
          to_bitField2_ |= 0x00000008;
        }
        result.payload_ = payload_;
        if (((from_bitField2_ & 0x00000010) == 0x00000010)) {
          to_bitField2_ |= 0x00000010;
        }
        result.colSpd_ = colSpd_;
        if (((from_bitField2_ & 0x00000020) == 0x00000020)) {
          to_bitField2_ |= 0x00000020;
        }
        result.timeCost_ = timeCost_;
        if (((from_bitField2_ & 0x00000040) == 0x00000040)) {
          to_bitField2_ |= 0x00000040;
        }
        result.eleCost_ = eleCost_;
        if (costTableBuilder_ == null) {
          if (((bitField2_ & 0x00000080) == 0x00000080)) {
            costTable_ = java.util.Collections.unmodifiableList(costTable_);
            bitField2_ = (bitField2_ & ~0x00000080);
          }
          result.costTable_ = costTable_;
        } else {
          result.costTable_ = costTableBuilder_.build();
        }
        if (((from_bitField2_ & 0x00000100) == 0x00000100)) {
          to_bitField2_ |= 0x00000080;
        }
        result.storUnit_ = storUnit_;
        result.bitField0_ = to_bitField0_;
        result.bitField1_ = to_bitField1_;
        result.bitField2_ = to_bitField2_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.game.server.data.ShipHullTechData.SHIP_HULL_TECH) {
          return mergeFrom((com.game.server.data.ShipHullTechData.SHIP_HULL_TECH)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.game.server.data.ShipHullTechData.SHIP_HULL_TECH other) {
        if (other == com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.getDefaultInstance()) return this;
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasMatType()) {
          setMatType(other.getMatType());
        }
        if (other.hasHullSize()) {
          setHullSize(other.getHullSize());
        }
        if (other.hasHullType()) {
          setHullType(other.getHullType());
        }
        if (other.hasHullLvl()) {
          setHullLvl(other.getHullLvl());
        }
        if (other.hasTranslTableName()) {
          bitField0_ |= 0x00000020;
          translTableName_ = other.translTableName_;
          onChanged();
        }
        if (other.hasHullName()) {
          bitField0_ |= 0x00000040;
          hullName_ = other.hullName_;
          onChanged();
        }
        if (other.hasInUse()) {
          setInUse(other.getInUse());
        }
        if (other.hasMaxHullLvl()) {
          setMaxHullLvl(other.getMaxHullLvl());
        }
        if (other.hasPrefabName()) {
          bitField0_ |= 0x00000200;
          prefabName_ = other.prefabName_;
          onChanged();
        }
        if (other.hasIconName()) {
          bitField0_ |= 0x00000400;
          iconName_ = other.iconName_;
          onChanged();
        }
        if (other.hasDesc()) {
          bitField0_ |= 0x00000800;
          desc_ = other.desc_;
          onChanged();
        }
        if (other.hasUiOrder()) {
          setUiOrder(other.getUiOrder());
        }
        if (other.hasUiScale()) {
          setUiScale(other.getUiScale());
        }
        if (other.hasHullSlotTop()) {
          setHullSlotTop(other.getHullSlotTop());
        }
        if (other.hasHullSlotBottom()) {
          setHullSlotBottom(other.getHullSlotBottom());
        }
        if (other.hasHullSlotLeft()) {
          setHullSlotLeft(other.getHullSlotLeft());
        }
        if (other.hasHullSlotRight()) {
          setHullSlotRight(other.getHullSlotRight());
        }
        if (other.hasHullSlotFront()) {
          setHullSlotFront(other.getHullSlotFront());
        }
        if (other.hasHullSlotBack()) {
          setHullSlotBack(other.getHullSlotBack());
        }
        if (other.hasBldgLvlReq()) {
          setBldgLvlReq(other.getBldgLvlReq());
        }
        if (other.hasSspCost()) {
          setSspCost(other.getSspCost());
        }
        if (other.hasFuncType()) {
          setFuncType(other.getFuncType());
        }
        if (other.hasCrewQty()) {
          setCrewQty(other.getCrewQty());
        }
        if (other.hasMass()) {
          setMass(other.getMass());
        }
        if (other.hasStrutHp()) {
          setStrutHp(other.getStrutHp());
        }
        if (other.hasStrutRepr()) {
          setStrutRepr(other.getStrutRepr());
        }
        if (other.hasShieldHp()) {
          setShieldHp(other.getShieldHp());
        }
        if (other.hasShieldRepr()) {
          setShieldRepr(other.getShieldRepr());
        }
        if (other.hasEmRes()) {
          setEmRes(other.getEmRes());
        }
        if (other.hasThermRes()) {
          setThermRes(other.getThermRes());
        }
        if (other.hasKinRes()) {
          setKinRes(other.getKinRes());
        }
        if (other.hasExpRes()) {
          setExpRes(other.getExpRes());
        }
        if (other.hasTgtValue()) {
          setTgtValue(other.getTgtValue());
        }
        if (other.hasEvaValue()) {
          setEvaValue(other.getEvaValue());
        }
        if (other.hasCruzSpd()) {
          setCruzSpd(other.getCruzSpd());
        }
        if (other.hasRevSpd()) {
          setRevSpd(other.getRevSpd());
        }
        if (other.hasNegStatRes()) {
          setNegStatRes(other.getNegStatRes());
        }
        if (other.hasDebuffRes()) {
          setDebuffRes(other.getDebuffRes());
        }
        if (other.hasDefTrait1()) {
          setDefTrait1(other.getDefTrait1());
        }
        if (other.hasDefTrait2()) {
          setDefTrait2(other.getDefTrait2());
        }
        if (other.hasDefTrait3()) {
          setDefTrait3(other.getDefTrait3());
        }
        if (other.hasWpnType()) {
          setWpnType(other.getWpnType());
        }
        if (other.hasDmgToShld()) {
          setDmgToShld(other.getDmgToShld());
        }
        if (other.hasOsEmDmg()) {
          setOsEmDmg(other.getOsEmDmg());
        }
        if (other.hasOsThermDmg()) {
          setOsThermDmg(other.getOsThermDmg());
        }
        if (other.hasOsKinDmg()) {
          setOsKinDmg(other.getOsKinDmg());
        }
        if (other.hasOsExpDmg()) {
          setOsExpDmg(other.getOsExpDmg());
        }
        if (other.hasShortRngAc()) {
          setShortRngAc(other.getShortRngAc());
        }
        if (other.hasMidRngAc()) {
          setMidRngAc(other.getMidRngAc());
        }
        if (other.hasLongRngAc()) {
          setLongRngAc(other.getLongRngAc());
        }
        if (other.hasShortRngDelay()) {
          setShortRngDelay(other.getShortRngDelay());
        }
        if (other.hasMidRngDelay()) {
          setMidRngDelay(other.getMidRngDelay());
        }
        if (other.hasLongRngDelay()) {
          setLongRngDelay(other.getLongRngDelay());
        }
        if (other.hasBurstQty()) {
          setBurstQty(other.getBurstQty());
        }
        if (other.hasBurstIntvl()) {
          setBurstIntvl(other.getBurstIntvl());
        }
        if (other.hasReloadIntvl()) {
          setReloadIntvl(other.getReloadIntvl());
        }
        if (other.hasWpnTrait1()) {
          setWpnTrait1(other.getWpnTrait1());
        }
        if (other.hasWpnTrait2()) {
          setWpnTrait2(other.getWpnTrait2());
        }
        if (other.hasWpnTrait3()) {
          setWpnTrait3(other.getWpnTrait3());
        }
        if (other.hasThrust()) {
          setThrust(other.getThrust());
        }
        if (other.hasFuelVol()) {
          setFuelVol(other.getFuelVol());
        }
        if (other.hasFuelConsRate()) {
          setFuelConsRate(other.getFuelConsRate());
        }
        if (other.hasExplLevel()) {
          setExplLevel(other.getExplLevel());
        }
        if (other.hasExplSpd()) {
          setExplSpd(other.getExplSpd());
        }
        if (other.hasMiningSpdCoeff()) {
          setMiningSpdCoeff(other.getMiningSpdCoeff());
        }
        if (other.hasPayloadType()) {
          setPayloadType(other.getPayloadType());
        }
        if (other.hasPayload()) {
          setPayload(other.getPayload());
        }
        if (other.hasColSpd()) {
          setColSpd(other.getColSpd());
        }
        if (other.hasTimeCost()) {
          setTimeCost(other.getTimeCost());
        }
        if (other.hasEleCost()) {
          setEleCost(other.getEleCost());
        }
        if (costTableBuilder_ == null) {
          if (!other.costTable_.isEmpty()) {
            if (costTable_.isEmpty()) {
              costTable_ = other.costTable_;
              bitField2_ = (bitField2_ & ~0x00000080);
            } else {
              ensureCostTableIsMutable();
              costTable_.addAll(other.costTable_);
            }
            onChanged();
          }
        } else {
          if (!other.costTable_.isEmpty()) {
            if (costTableBuilder_.isEmpty()) {
              costTableBuilder_.dispose();
              costTableBuilder_ = null;
              costTable_ = other.costTable_;
              bitField2_ = (bitField2_ & ~0x00000080);
              costTableBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCostTableFieldBuilder() : null;
            } else {
              costTableBuilder_.addAllMessages(other.costTable_);
            }
          }
        }
        if (other.hasStorUnit()) {
          setStorUnit(other.getStorUnit());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasId()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.game.server.data.ShipHullTechData.SHIP_HULL_TECH parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.game.server.data.ShipHullTechData.SHIP_HULL_TECH) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;
      private int bitField1_;
      private int bitField2_;

      private int id_ ;
      /**
       * <code>required int32 id = 1 [default = 0];</code>
       *
       * <pre>
       ** 舰体部件ID 
       * </pre>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 id = 1 [default = 0];</code>
       *
       * <pre>
       ** 舰体部件ID 
       * </pre>
       */
      public int getId() {
        return id_;
      }
      /**
       * <code>required int32 id = 1 [default = 0];</code>
       *
       * <pre>
       ** 舰体部件ID 
       * </pre>
       */
      public Builder setId(int value) {
        bitField0_ |= 0x00000001;
        id_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 id = 1 [default = 0];</code>
       *
       * <pre>
       ** 舰体部件ID 
       * </pre>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0;
        onChanged();
        return this;
      }

      private int matType_ ;
      /**
       * <code>optional int32 mat_type = 2 [default = 0];</code>
       *
       * <pre>
       ** 材料类型
       *(mat=material)
       *机械体(Mech)=1
       *生物体(Bio)=2
       *光耀体(Phot)=3
       * </pre>
       */
      public boolean hasMatType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 mat_type = 2 [default = 0];</code>
       *
       * <pre>
       ** 材料类型
       *(mat=material)
       *机械体(Mech)=1
       *生物体(Bio)=2
       *光耀体(Phot)=3
       * </pre>
       */
      public int getMatType() {
        return matType_;
      }
      /**
       * <code>optional int32 mat_type = 2 [default = 0];</code>
       *
       * <pre>
       ** 材料类型
       *(mat=material)
       *机械体(Mech)=1
       *生物体(Bio)=2
       *光耀体(Phot)=3
       * </pre>
       */
      public Builder setMatType(int value) {
        bitField0_ |= 0x00000002;
        matType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 mat_type = 2 [default = 0];</code>
       *
       * <pre>
       ** 材料类型
       *(mat=material)
       *机械体(Mech)=1
       *生物体(Bio)=2
       *光耀体(Phot)=3
       * </pre>
       */
      public Builder clearMatType() {
        bitField0_ = (bitField0_ & ~0x00000002);
        matType_ = 0;
        onChanged();
        return this;
      }

      private int hullSize_ ;
      /**
       * <code>optional int32 hull_size = 3 [default = 0];</code>
       *
       * <pre>
       ** 舰体尺度
       *功能舰=1
       *护卫舰=2
       *驱逐舰=3
       *巡洋舰=4
       *战巡舰=5
       *战列舰=6
       * </pre>
       */
      public boolean hasHullSize() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 hull_size = 3 [default = 0];</code>
       *
       * <pre>
       ** 舰体尺度
       *功能舰=1
       *护卫舰=2
       *驱逐舰=3
       *巡洋舰=4
       *战巡舰=5
       *战列舰=6
       * </pre>
       */
      public int getHullSize() {
        return hullSize_;
      }
      /**
       * <code>optional int32 hull_size = 3 [default = 0];</code>
       *
       * <pre>
       ** 舰体尺度
       *功能舰=1
       *护卫舰=2
       *驱逐舰=3
       *巡洋舰=4
       *战巡舰=5
       *战列舰=6
       * </pre>
       */
      public Builder setHullSize(int value) {
        bitField0_ |= 0x00000004;
        hullSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 hull_size = 3 [default = 0];</code>
       *
       * <pre>
       ** 舰体尺度
       *功能舰=1
       *护卫舰=2
       *驱逐舰=3
       *巡洋舰=4
       *战巡舰=5
       *战列舰=6
       * </pre>
       */
      public Builder clearHullSize() {
        bitField0_ = (bitField0_ & ~0x00000004);
        hullSize_ = 0;
        onChanged();
        return this;
      }

      private int hullType_ ;
      /**
       * <code>optional int32 hull_type = 4 [default = 0];</code>
       *
       * <pre>
       ** 舰体类型
       *舰首=1
       *舰中=2
       *舰尾=3
       * </pre>
       */
      public boolean hasHullType() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 hull_type = 4 [default = 0];</code>
       *
       * <pre>
       ** 舰体类型
       *舰首=1
       *舰中=2
       *舰尾=3
       * </pre>
       */
      public int getHullType() {
        return hullType_;
      }
      /**
       * <code>optional int32 hull_type = 4 [default = 0];</code>
       *
       * <pre>
       ** 舰体类型
       *舰首=1
       *舰中=2
       *舰尾=3
       * </pre>
       */
      public Builder setHullType(int value) {
        bitField0_ |= 0x00000008;
        hullType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 hull_type = 4 [default = 0];</code>
       *
       * <pre>
       ** 舰体类型
       *舰首=1
       *舰中=2
       *舰尾=3
       * </pre>
       */
      public Builder clearHullType() {
        bitField0_ = (bitField0_ & ~0x00000008);
        hullType_ = 0;
        onChanged();
        return this;
      }

      private int hullLvl_ ;
      /**
       * <code>optional int32 hull_lvl = 5 [default = 0];</code>
       *
       * <pre>
       ** 舰体等级 
       * </pre>
       */
      public boolean hasHullLvl() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 hull_lvl = 5 [default = 0];</code>
       *
       * <pre>
       ** 舰体等级 
       * </pre>
       */
      public int getHullLvl() {
        return hullLvl_;
      }
      /**
       * <code>optional int32 hull_lvl = 5 [default = 0];</code>
       *
       * <pre>
       ** 舰体等级 
       * </pre>
       */
      public Builder setHullLvl(int value) {
        bitField0_ |= 0x00000010;
        hullLvl_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 hull_lvl = 5 [default = 0];</code>
       *
       * <pre>
       ** 舰体等级 
       * </pre>
       */
      public Builder clearHullLvl() {
        bitField0_ = (bitField0_ & ~0x00000010);
        hullLvl_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object translTableName_ = "";
      /**
       * <code>optional string transl_table_name = 6 [default = ""];</code>
       *
       * <pre>
       ** 翻译表名 
       * </pre>
       */
      public boolean hasTranslTableName() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional string transl_table_name = 6 [default = ""];</code>
       *
       * <pre>
       ** 翻译表名 
       * </pre>
       */
      public java.lang.String getTranslTableName() {
        java.lang.Object ref = translTableName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            translTableName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string transl_table_name = 6 [default = ""];</code>
       *
       * <pre>
       ** 翻译表名 
       * </pre>
       */
      public com.google.protobuf.ByteString
          getTranslTableNameBytes() {
        java.lang.Object ref = translTableName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          translTableName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string transl_table_name = 6 [default = ""];</code>
       *
       * <pre>
       ** 翻译表名 
       * </pre>
       */
      public Builder setTranslTableName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        translTableName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string transl_table_name = 6 [default = ""];</code>
       *
       * <pre>
       ** 翻译表名 
       * </pre>
       */
      public Builder clearTranslTableName() {
        bitField0_ = (bitField0_ & ~0x00000020);
        translTableName_ = getDefaultInstance().getTranslTableName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string transl_table_name = 6 [default = ""];</code>
       *
       * <pre>
       ** 翻译表名 
       * </pre>
       */
      public Builder setTranslTableNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        translTableName_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object hullName_ = "";
      /**
       * <code>optional string hull_name = 7 [default = ""];</code>
       *
       * <pre>
       ** 舰体名 
       * </pre>
       */
      public boolean hasHullName() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional string hull_name = 7 [default = ""];</code>
       *
       * <pre>
       ** 舰体名 
       * </pre>
       */
      public java.lang.String getHullName() {
        java.lang.Object ref = hullName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            hullName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string hull_name = 7 [default = ""];</code>
       *
       * <pre>
       ** 舰体名 
       * </pre>
       */
      public com.google.protobuf.ByteString
          getHullNameBytes() {
        java.lang.Object ref = hullName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          hullName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string hull_name = 7 [default = ""];</code>
       *
       * <pre>
       ** 舰体名 
       * </pre>
       */
      public Builder setHullName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
        hullName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string hull_name = 7 [default = ""];</code>
       *
       * <pre>
       ** 舰体名 
       * </pre>
       */
      public Builder clearHullName() {
        bitField0_ = (bitField0_ & ~0x00000040);
        hullName_ = getDefaultInstance().getHullName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string hull_name = 7 [default = ""];</code>
       *
       * <pre>
       ** 舰体名 
       * </pre>
       */
      public Builder setHullNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
        hullName_ = value;
        onChanged();
        return this;
      }

      private int inUse_ ;
      /**
       * <code>optional int32 in_use = 8 [default = 0];</code>
       *
       * <pre>
       ** 可用
       *1表示是
       *0表示否
       * </pre>
       */
      public boolean hasInUse() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 in_use = 8 [default = 0];</code>
       *
       * <pre>
       ** 可用
       *1表示是
       *0表示否
       * </pre>
       */
      public int getInUse() {
        return inUse_;
      }
      /**
       * <code>optional int32 in_use = 8 [default = 0];</code>
       *
       * <pre>
       ** 可用
       *1表示是
       *0表示否
       * </pre>
       */
      public Builder setInUse(int value) {
        bitField0_ |= 0x00000080;
        inUse_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 in_use = 8 [default = 0];</code>
       *
       * <pre>
       ** 可用
       *1表示是
       *0表示否
       * </pre>
       */
      public Builder clearInUse() {
        bitField0_ = (bitField0_ & ~0x00000080);
        inUse_ = 0;
        onChanged();
        return this;
      }

      private int maxHullLvl_ ;
      /**
       * <code>optional int32 max_hull_lvl = 9 [default = 0];</code>
       *
       * <pre>
       ** 舰体最大等级 
       * </pre>
       */
      public boolean hasMaxHullLvl() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int32 max_hull_lvl = 9 [default = 0];</code>
       *
       * <pre>
       ** 舰体最大等级 
       * </pre>
       */
      public int getMaxHullLvl() {
        return maxHullLvl_;
      }
      /**
       * <code>optional int32 max_hull_lvl = 9 [default = 0];</code>
       *
       * <pre>
       ** 舰体最大等级 
       * </pre>
       */
      public Builder setMaxHullLvl(int value) {
        bitField0_ |= 0x00000100;
        maxHullLvl_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 max_hull_lvl = 9 [default = 0];</code>
       *
       * <pre>
       ** 舰体最大等级 
       * </pre>
       */
      public Builder clearMaxHullLvl() {
        bitField0_ = (bitField0_ & ~0x00000100);
        maxHullLvl_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object prefabName_ = "";
      /**
       * <code>optional string prefab_name = 10 [default = ""];</code>
       *
       * <pre>
       ** 模型名 
       * </pre>
       */
      public boolean hasPrefabName() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional string prefab_name = 10 [default = ""];</code>
       *
       * <pre>
       ** 模型名 
       * </pre>
       */
      public java.lang.String getPrefabName() {
        java.lang.Object ref = prefabName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            prefabName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string prefab_name = 10 [default = ""];</code>
       *
       * <pre>
       ** 模型名 
       * </pre>
       */
      public com.google.protobuf.ByteString
          getPrefabNameBytes() {
        java.lang.Object ref = prefabName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          prefabName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string prefab_name = 10 [default = ""];</code>
       *
       * <pre>
       ** 模型名 
       * </pre>
       */
      public Builder setPrefabName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000200;
        prefabName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string prefab_name = 10 [default = ""];</code>
       *
       * <pre>
       ** 模型名 
       * </pre>
       */
      public Builder clearPrefabName() {
        bitField0_ = (bitField0_ & ~0x00000200);
        prefabName_ = getDefaultInstance().getPrefabName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string prefab_name = 10 [default = ""];</code>
       *
       * <pre>
       ** 模型名 
       * </pre>
       */
      public Builder setPrefabNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000200;
        prefabName_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object iconName_ = "";
      /**
       * <code>optional string icon_name = 11 [default = ""];</code>
       *
       * <pre>
       ** 图标名称 
       * </pre>
       */
      public boolean hasIconName() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional string icon_name = 11 [default = ""];</code>
       *
       * <pre>
       ** 图标名称 
       * </pre>
       */
      public java.lang.String getIconName() {
        java.lang.Object ref = iconName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            iconName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string icon_name = 11 [default = ""];</code>
       *
       * <pre>
       ** 图标名称 
       * </pre>
       */
      public com.google.protobuf.ByteString
          getIconNameBytes() {
        java.lang.Object ref = iconName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          iconName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string icon_name = 11 [default = ""];</code>
       *
       * <pre>
       ** 图标名称 
       * </pre>
       */
      public Builder setIconName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000400;
        iconName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string icon_name = 11 [default = ""];</code>
       *
       * <pre>
       ** 图标名称 
       * </pre>
       */
      public Builder clearIconName() {
        bitField0_ = (bitField0_ & ~0x00000400);
        iconName_ = getDefaultInstance().getIconName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string icon_name = 11 [default = ""];</code>
       *
       * <pre>
       ** 图标名称 
       * </pre>
       */
      public Builder setIconNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000400;
        iconName_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object desc_ = "";
      /**
       * <code>optional string desc = 12 [default = ""];</code>
       *
       * <pre>
       ** 描述 
       * </pre>
       */
      public boolean hasDesc() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional string desc = 12 [default = ""];</code>
       *
       * <pre>
       ** 描述 
       * </pre>
       */
      public java.lang.String getDesc() {
        java.lang.Object ref = desc_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            desc_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string desc = 12 [default = ""];</code>
       *
       * <pre>
       ** 描述 
       * </pre>
       */
      public com.google.protobuf.ByteString
          getDescBytes() {
        java.lang.Object ref = desc_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          desc_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string desc = 12 [default = ""];</code>
       *
       * <pre>
       ** 描述 
       * </pre>
       */
      public Builder setDesc(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000800;
        desc_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string desc = 12 [default = ""];</code>
       *
       * <pre>
       ** 描述 
       * </pre>
       */
      public Builder clearDesc() {
        bitField0_ = (bitField0_ & ~0x00000800);
        desc_ = getDefaultInstance().getDesc();
        onChanged();
        return this;
      }
      /**
       * <code>optional string desc = 12 [default = ""];</code>
       *
       * <pre>
       ** 描述 
       * </pre>
       */
      public Builder setDescBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000800;
        desc_ = value;
        onChanged();
        return this;
      }

      private int uiOrder_ ;
      /**
       * <code>optional int32 ui_order = 13 [default = 0];</code>
       *
       * <pre>
       ** 界面排序 
       * </pre>
       */
      public boolean hasUiOrder() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional int32 ui_order = 13 [default = 0];</code>
       *
       * <pre>
       ** 界面排序 
       * </pre>
       */
      public int getUiOrder() {
        return uiOrder_;
      }
      /**
       * <code>optional int32 ui_order = 13 [default = 0];</code>
       *
       * <pre>
       ** 界面排序 
       * </pre>
       */
      public Builder setUiOrder(int value) {
        bitField0_ |= 0x00001000;
        uiOrder_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 ui_order = 13 [default = 0];</code>
       *
       * <pre>
       ** 界面排序 
       * </pre>
       */
      public Builder clearUiOrder() {
        bitField0_ = (bitField0_ & ~0x00001000);
        uiOrder_ = 0;
        onChanged();
        return this;
      }

      private int uiScale_ ;
      /**
       * <code>optional int32 ui_scale = 14 [default = 0];</code>
       *
       * <pre>
       ** 界面缩放
       *(百分比) 
       * </pre>
       */
      public boolean hasUiScale() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional int32 ui_scale = 14 [default = 0];</code>
       *
       * <pre>
       ** 界面缩放
       *(百分比) 
       * </pre>
       */
      public int getUiScale() {
        return uiScale_;
      }
      /**
       * <code>optional int32 ui_scale = 14 [default = 0];</code>
       *
       * <pre>
       ** 界面缩放
       *(百分比) 
       * </pre>
       */
      public Builder setUiScale(int value) {
        bitField0_ |= 0x00002000;
        uiScale_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 ui_scale = 14 [default = 0];</code>
       *
       * <pre>
       ** 界面缩放
       *(百分比) 
       * </pre>
       */
      public Builder clearUiScale() {
        bitField0_ = (bitField0_ & ~0x00002000);
        uiScale_ = 0;
        onChanged();
        return this;
      }

      private int hullSlotTop_ ;
      /**
       * <code>optional int32 hull_slot_top = 15 [default = 0];</code>
       *
       * <pre>
       ** 舰体孔位上 
       * </pre>
       */
      public boolean hasHullSlotTop() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional int32 hull_slot_top = 15 [default = 0];</code>
       *
       * <pre>
       ** 舰体孔位上 
       * </pre>
       */
      public int getHullSlotTop() {
        return hullSlotTop_;
      }
      /**
       * <code>optional int32 hull_slot_top = 15 [default = 0];</code>
       *
       * <pre>
       ** 舰体孔位上 
       * </pre>
       */
      public Builder setHullSlotTop(int value) {
        bitField0_ |= 0x00004000;
        hullSlotTop_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 hull_slot_top = 15 [default = 0];</code>
       *
       * <pre>
       ** 舰体孔位上 
       * </pre>
       */
      public Builder clearHullSlotTop() {
        bitField0_ = (bitField0_ & ~0x00004000);
        hullSlotTop_ = 0;
        onChanged();
        return this;
      }

      private int hullSlotBottom_ ;
      /**
       * <code>optional int32 hull_slot_bottom = 16 [default = 0];</code>
       *
       * <pre>
       ** 舰体孔位下 
       * </pre>
       */
      public boolean hasHullSlotBottom() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional int32 hull_slot_bottom = 16 [default = 0];</code>
       *
       * <pre>
       ** 舰体孔位下 
       * </pre>
       */
      public int getHullSlotBottom() {
        return hullSlotBottom_;
      }
      /**
       * <code>optional int32 hull_slot_bottom = 16 [default = 0];</code>
       *
       * <pre>
       ** 舰体孔位下 
       * </pre>
       */
      public Builder setHullSlotBottom(int value) {
        bitField0_ |= 0x00008000;
        hullSlotBottom_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 hull_slot_bottom = 16 [default = 0];</code>
       *
       * <pre>
       ** 舰体孔位下 
       * </pre>
       */
      public Builder clearHullSlotBottom() {
        bitField0_ = (bitField0_ & ~0x00008000);
        hullSlotBottom_ = 0;
        onChanged();
        return this;
      }

      private int hullSlotLeft_ ;
      /**
       * <code>optional int32 hull_slot_left = 17 [default = 0];</code>
       *
       * <pre>
       ** 舰体孔位左 
       * </pre>
       */
      public boolean hasHullSlotLeft() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional int32 hull_slot_left = 17 [default = 0];</code>
       *
       * <pre>
       ** 舰体孔位左 
       * </pre>
       */
      public int getHullSlotLeft() {
        return hullSlotLeft_;
      }
      /**
       * <code>optional int32 hull_slot_left = 17 [default = 0];</code>
       *
       * <pre>
       ** 舰体孔位左 
       * </pre>
       */
      public Builder setHullSlotLeft(int value) {
        bitField0_ |= 0x00010000;
        hullSlotLeft_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 hull_slot_left = 17 [default = 0];</code>
       *
       * <pre>
       ** 舰体孔位左 
       * </pre>
       */
      public Builder clearHullSlotLeft() {
        bitField0_ = (bitField0_ & ~0x00010000);
        hullSlotLeft_ = 0;
        onChanged();
        return this;
      }

      private int hullSlotRight_ ;
      /**
       * <code>optional int32 hull_slot_right = 18 [default = 0];</code>
       *
       * <pre>
       ** 舰体孔位右 
       * </pre>
       */
      public boolean hasHullSlotRight() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional int32 hull_slot_right = 18 [default = 0];</code>
       *
       * <pre>
       ** 舰体孔位右 
       * </pre>
       */
      public int getHullSlotRight() {
        return hullSlotRight_;
      }
      /**
       * <code>optional int32 hull_slot_right = 18 [default = 0];</code>
       *
       * <pre>
       ** 舰体孔位右 
       * </pre>
       */
      public Builder setHullSlotRight(int value) {
        bitField0_ |= 0x00020000;
        hullSlotRight_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 hull_slot_right = 18 [default = 0];</code>
       *
       * <pre>
       ** 舰体孔位右 
       * </pre>
       */
      public Builder clearHullSlotRight() {
        bitField0_ = (bitField0_ & ~0x00020000);
        hullSlotRight_ = 0;
        onChanged();
        return this;
      }

      private int hullSlotFront_ ;
      /**
       * <code>optional int32 hull_slot_front = 19 [default = 0];</code>
       *
       * <pre>
       ** 舰体孔位前 
       * </pre>
       */
      public boolean hasHullSlotFront() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional int32 hull_slot_front = 19 [default = 0];</code>
       *
       * <pre>
       ** 舰体孔位前 
       * </pre>
       */
      public int getHullSlotFront() {
        return hullSlotFront_;
      }
      /**
       * <code>optional int32 hull_slot_front = 19 [default = 0];</code>
       *
       * <pre>
       ** 舰体孔位前 
       * </pre>
       */
      public Builder setHullSlotFront(int value) {
        bitField0_ |= 0x00040000;
        hullSlotFront_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 hull_slot_front = 19 [default = 0];</code>
       *
       * <pre>
       ** 舰体孔位前 
       * </pre>
       */
      public Builder clearHullSlotFront() {
        bitField0_ = (bitField0_ & ~0x00040000);
        hullSlotFront_ = 0;
        onChanged();
        return this;
      }

      private int hullSlotBack_ ;
      /**
       * <code>optional int32 hull_slot_back = 20 [default = 0];</code>
       *
       * <pre>
       ** 舰体孔位后 
       * </pre>
       */
      public boolean hasHullSlotBack() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional int32 hull_slot_back = 20 [default = 0];</code>
       *
       * <pre>
       ** 舰体孔位后 
       * </pre>
       */
      public int getHullSlotBack() {
        return hullSlotBack_;
      }
      /**
       * <code>optional int32 hull_slot_back = 20 [default = 0];</code>
       *
       * <pre>
       ** 舰体孔位后 
       * </pre>
       */
      public Builder setHullSlotBack(int value) {
        bitField0_ |= 0x00080000;
        hullSlotBack_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 hull_slot_back = 20 [default = 0];</code>
       *
       * <pre>
       ** 舰体孔位后 
       * </pre>
       */
      public Builder clearHullSlotBack() {
        bitField0_ = (bitField0_ & ~0x00080000);
        hullSlotBack_ = 0;
        onChanged();
        return this;
      }

      private int bldgLvlReq_ ;
      /**
       * <code>optional int32 bldg_lvl_req = 21 [default = 0];</code>
       *
       * <pre>
       ** 建筑等级要求 
       * </pre>
       */
      public boolean hasBldgLvlReq() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional int32 bldg_lvl_req = 21 [default = 0];</code>
       *
       * <pre>
       ** 建筑等级要求 
       * </pre>
       */
      public int getBldgLvlReq() {
        return bldgLvlReq_;
      }
      /**
       * <code>optional int32 bldg_lvl_req = 21 [default = 0];</code>
       *
       * <pre>
       ** 建筑等级要求 
       * </pre>
       */
      public Builder setBldgLvlReq(int value) {
        bitField0_ |= 0x00100000;
        bldgLvlReq_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 bldg_lvl_req = 21 [default = 0];</code>
       *
       * <pre>
       ** 建筑等级要求 
       * </pre>
       */
      public Builder clearBldgLvlReq() {
        bitField0_ = (bitField0_ & ~0x00100000);
        bldgLvlReq_ = 0;
        onChanged();
        return this;
      }

      private int sspCost_ ;
      /**
       * <code>optional int32 ssp_cost = 22 [default = 0];</code>
       *
       * <pre>
       ** 空间占用 
       * </pre>
       */
      public boolean hasSspCost() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional int32 ssp_cost = 22 [default = 0];</code>
       *
       * <pre>
       ** 空间占用 
       * </pre>
       */
      public int getSspCost() {
        return sspCost_;
      }
      /**
       * <code>optional int32 ssp_cost = 22 [default = 0];</code>
       *
       * <pre>
       ** 空间占用 
       * </pre>
       */
      public Builder setSspCost(int value) {
        bitField0_ |= 0x00200000;
        sspCost_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 ssp_cost = 22 [default = 0];</code>
       *
       * <pre>
       ** 空间占用 
       * </pre>
       */
      public Builder clearSspCost() {
        bitField0_ = (bitField0_ & ~0x00200000);
        sspCost_ = 0;
        onChanged();
        return this;
      }

      private int funcType_ ;
      /**
       * <code>optional int32 func_type = 23 [default = 0];</code>
       *
       * <pre>
       ** 功能类型
       *无=0
       *殖民=1
       *探索=2
       *采集=3
       *运输=4
       * </pre>
       */
      public boolean hasFuncType() {
        return ((bitField0_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>optional int32 func_type = 23 [default = 0];</code>
       *
       * <pre>
       ** 功能类型
       *无=0
       *殖民=1
       *探索=2
       *采集=3
       *运输=4
       * </pre>
       */
      public int getFuncType() {
        return funcType_;
      }
      /**
       * <code>optional int32 func_type = 23 [default = 0];</code>
       *
       * <pre>
       ** 功能类型
       *无=0
       *殖民=1
       *探索=2
       *采集=3
       *运输=4
       * </pre>
       */
      public Builder setFuncType(int value) {
        bitField0_ |= 0x00400000;
        funcType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 func_type = 23 [default = 0];</code>
       *
       * <pre>
       ** 功能类型
       *无=0
       *殖民=1
       *探索=2
       *采集=3
       *运输=4
       * </pre>
       */
      public Builder clearFuncType() {
        bitField0_ = (bitField0_ & ~0x00400000);
        funcType_ = 0;
        onChanged();
        return this;
      }

      private int crewQty_ ;
      /**
       * <code>optional int32 crew_qty = 24 [default = 0];</code>
       *
       * <pre>
       ** 船员需求 
       * </pre>
       */
      public boolean hasCrewQty() {
        return ((bitField0_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>optional int32 crew_qty = 24 [default = 0];</code>
       *
       * <pre>
       ** 船员需求 
       * </pre>
       */
      public int getCrewQty() {
        return crewQty_;
      }
      /**
       * <code>optional int32 crew_qty = 24 [default = 0];</code>
       *
       * <pre>
       ** 船员需求 
       * </pre>
       */
      public Builder setCrewQty(int value) {
        bitField0_ |= 0x00800000;
        crewQty_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 crew_qty = 24 [default = 0];</code>
       *
       * <pre>
       ** 船员需求 
       * </pre>
       */
      public Builder clearCrewQty() {
        bitField0_ = (bitField0_ & ~0x00800000);
        crewQty_ = 0;
        onChanged();
        return this;
      }

      private int mass_ ;
      /**
       * <code>optional int32 mass = 25 [default = 0];</code>
       *
       * <pre>
       ** 质量 
       * </pre>
       */
      public boolean hasMass() {
        return ((bitField0_ & 0x01000000) == 0x01000000);
      }
      /**
       * <code>optional int32 mass = 25 [default = 0];</code>
       *
       * <pre>
       ** 质量 
       * </pre>
       */
      public int getMass() {
        return mass_;
      }
      /**
       * <code>optional int32 mass = 25 [default = 0];</code>
       *
       * <pre>
       ** 质量 
       * </pre>
       */
      public Builder setMass(int value) {
        bitField0_ |= 0x01000000;
        mass_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 mass = 25 [default = 0];</code>
       *
       * <pre>
       ** 质量 
       * </pre>
       */
      public Builder clearMass() {
        bitField0_ = (bitField0_ & ~0x01000000);
        mass_ = 0;
        onChanged();
        return this;
      }

      private int strutHp_ ;
      /**
       * <code>optional int32 strut_hp = 26 [default = 0];</code>
       *
       * <pre>
       ** 结构HP 
       * </pre>
       */
      public boolean hasStrutHp() {
        return ((bitField0_ & 0x02000000) == 0x02000000);
      }
      /**
       * <code>optional int32 strut_hp = 26 [default = 0];</code>
       *
       * <pre>
       ** 结构HP 
       * </pre>
       */
      public int getStrutHp() {
        return strutHp_;
      }
      /**
       * <code>optional int32 strut_hp = 26 [default = 0];</code>
       *
       * <pre>
       ** 结构HP 
       * </pre>
       */
      public Builder setStrutHp(int value) {
        bitField0_ |= 0x02000000;
        strutHp_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 strut_hp = 26 [default = 0];</code>
       *
       * <pre>
       ** 结构HP 
       * </pre>
       */
      public Builder clearStrutHp() {
        bitField0_ = (bitField0_ & ~0x02000000);
        strutHp_ = 0;
        onChanged();
        return this;
      }

      private int strutRepr_ ;
      /**
       * <code>optional int32 strut_repr = 27 [default = 0];</code>
       *
       * <pre>
       ** 结构修复
       *(repr=repair) 
       * </pre>
       */
      public boolean hasStrutRepr() {
        return ((bitField0_ & 0x04000000) == 0x04000000);
      }
      /**
       * <code>optional int32 strut_repr = 27 [default = 0];</code>
       *
       * <pre>
       ** 结构修复
       *(repr=repair) 
       * </pre>
       */
      public int getStrutRepr() {
        return strutRepr_;
      }
      /**
       * <code>optional int32 strut_repr = 27 [default = 0];</code>
       *
       * <pre>
       ** 结构修复
       *(repr=repair) 
       * </pre>
       */
      public Builder setStrutRepr(int value) {
        bitField0_ |= 0x04000000;
        strutRepr_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 strut_repr = 27 [default = 0];</code>
       *
       * <pre>
       ** 结构修复
       *(repr=repair) 
       * </pre>
       */
      public Builder clearStrutRepr() {
        bitField0_ = (bitField0_ & ~0x04000000);
        strutRepr_ = 0;
        onChanged();
        return this;
      }

      private int shieldHp_ ;
      /**
       * <code>optional int32 shield_hp = 28 [default = 0];</code>
       *
       * <pre>
       ** 护盾HP 
       * </pre>
       */
      public boolean hasShieldHp() {
        return ((bitField0_ & 0x08000000) == 0x08000000);
      }
      /**
       * <code>optional int32 shield_hp = 28 [default = 0];</code>
       *
       * <pre>
       ** 护盾HP 
       * </pre>
       */
      public int getShieldHp() {
        return shieldHp_;
      }
      /**
       * <code>optional int32 shield_hp = 28 [default = 0];</code>
       *
       * <pre>
       ** 护盾HP 
       * </pre>
       */
      public Builder setShieldHp(int value) {
        bitField0_ |= 0x08000000;
        shieldHp_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 shield_hp = 28 [default = 0];</code>
       *
       * <pre>
       ** 护盾HP 
       * </pre>
       */
      public Builder clearShieldHp() {
        bitField0_ = (bitField0_ & ~0x08000000);
        shieldHp_ = 0;
        onChanged();
        return this;
      }

      private int shieldRepr_ ;
      /**
       * <code>optional int32 shield_repr = 29 [default = 0];</code>
       *
       * <pre>
       ** 护盾修复 
       * </pre>
       */
      public boolean hasShieldRepr() {
        return ((bitField0_ & 0x10000000) == 0x10000000);
      }
      /**
       * <code>optional int32 shield_repr = 29 [default = 0];</code>
       *
       * <pre>
       ** 护盾修复 
       * </pre>
       */
      public int getShieldRepr() {
        return shieldRepr_;
      }
      /**
       * <code>optional int32 shield_repr = 29 [default = 0];</code>
       *
       * <pre>
       ** 护盾修复 
       * </pre>
       */
      public Builder setShieldRepr(int value) {
        bitField0_ |= 0x10000000;
        shieldRepr_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 shield_repr = 29 [default = 0];</code>
       *
       * <pre>
       ** 护盾修复 
       * </pre>
       */
      public Builder clearShieldRepr() {
        bitField0_ = (bitField0_ & ~0x10000000);
        shieldRepr_ = 0;
        onChanged();
        return this;
      }

      private int emRes_ ;
      /**
       * <code>optional int32 em_res = 30 [default = 0];</code>
       *
       * <pre>
       ** 电磁抗性 
       * </pre>
       */
      public boolean hasEmRes() {
        return ((bitField0_ & 0x20000000) == 0x20000000);
      }
      /**
       * <code>optional int32 em_res = 30 [default = 0];</code>
       *
       * <pre>
       ** 电磁抗性 
       * </pre>
       */
      public int getEmRes() {
        return emRes_;
      }
      /**
       * <code>optional int32 em_res = 30 [default = 0];</code>
       *
       * <pre>
       ** 电磁抗性 
       * </pre>
       */
      public Builder setEmRes(int value) {
        bitField0_ |= 0x20000000;
        emRes_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 em_res = 30 [default = 0];</code>
       *
       * <pre>
       ** 电磁抗性 
       * </pre>
       */
      public Builder clearEmRes() {
        bitField0_ = (bitField0_ & ~0x20000000);
        emRes_ = 0;
        onChanged();
        return this;
      }

      private int thermRes_ ;
      /**
       * <code>optional int32 therm_res = 31 [default = 0];</code>
       *
       * <pre>
       ** 热能抗性 
       * </pre>
       */
      public boolean hasThermRes() {
        return ((bitField0_ & 0x40000000) == 0x40000000);
      }
      /**
       * <code>optional int32 therm_res = 31 [default = 0];</code>
       *
       * <pre>
       ** 热能抗性 
       * </pre>
       */
      public int getThermRes() {
        return thermRes_;
      }
      /**
       * <code>optional int32 therm_res = 31 [default = 0];</code>
       *
       * <pre>
       ** 热能抗性 
       * </pre>
       */
      public Builder setThermRes(int value) {
        bitField0_ |= 0x40000000;
        thermRes_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 therm_res = 31 [default = 0];</code>
       *
       * <pre>
       ** 热能抗性 
       * </pre>
       */
      public Builder clearThermRes() {
        bitField0_ = (bitField0_ & ~0x40000000);
        thermRes_ = 0;
        onChanged();
        return this;
      }

      private int kinRes_ ;
      /**
       * <code>optional int32 kin_res = 32 [default = 0];</code>
       *
       * <pre>
       ** 动能抗性 
       * </pre>
       */
      public boolean hasKinRes() {
        return ((bitField0_ & 0x80000000) == 0x80000000);
      }
      /**
       * <code>optional int32 kin_res = 32 [default = 0];</code>
       *
       * <pre>
       ** 动能抗性 
       * </pre>
       */
      public int getKinRes() {
        return kinRes_;
      }
      /**
       * <code>optional int32 kin_res = 32 [default = 0];</code>
       *
       * <pre>
       ** 动能抗性 
       * </pre>
       */
      public Builder setKinRes(int value) {
        bitField0_ |= 0x80000000;
        kinRes_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 kin_res = 32 [default = 0];</code>
       *
       * <pre>
       ** 动能抗性 
       * </pre>
       */
      public Builder clearKinRes() {
        bitField0_ = (bitField0_ & ~0x80000000);
        kinRes_ = 0;
        onChanged();
        return this;
      }

      private int expRes_ ;
      /**
       * <code>optional int32 exp_res = 33 [default = 0];</code>
       *
       * <pre>
       ** 爆炸抗性 
       * </pre>
       */
      public boolean hasExpRes() {
        return ((bitField1_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 exp_res = 33 [default = 0];</code>
       *
       * <pre>
       ** 爆炸抗性 
       * </pre>
       */
      public int getExpRes() {
        return expRes_;
      }
      /**
       * <code>optional int32 exp_res = 33 [default = 0];</code>
       *
       * <pre>
       ** 爆炸抗性 
       * </pre>
       */
      public Builder setExpRes(int value) {
        bitField1_ |= 0x00000001;
        expRes_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 exp_res = 33 [default = 0];</code>
       *
       * <pre>
       ** 爆炸抗性 
       * </pre>
       */
      public Builder clearExpRes() {
        bitField1_ = (bitField1_ & ~0x00000001);
        expRes_ = 0;
        onChanged();
        return this;
      }

      private int tgtValue_ ;
      /**
       * <code>optional int32 tgt_value = 34 [default = 0];</code>
       *
       * <pre>
       ** 瞄准值
       *(tgt=targeting) 
       * </pre>
       */
      public boolean hasTgtValue() {
        return ((bitField1_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 tgt_value = 34 [default = 0];</code>
       *
       * <pre>
       ** 瞄准值
       *(tgt=targeting) 
       * </pre>
       */
      public int getTgtValue() {
        return tgtValue_;
      }
      /**
       * <code>optional int32 tgt_value = 34 [default = 0];</code>
       *
       * <pre>
       ** 瞄准值
       *(tgt=targeting) 
       * </pre>
       */
      public Builder setTgtValue(int value) {
        bitField1_ |= 0x00000002;
        tgtValue_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 tgt_value = 34 [default = 0];</code>
       *
       * <pre>
       ** 瞄准值
       *(tgt=targeting) 
       * </pre>
       */
      public Builder clearTgtValue() {
        bitField1_ = (bitField1_ & ~0x00000002);
        tgtValue_ = 0;
        onChanged();
        return this;
      }

      private int evaValue_ ;
      /**
       * <code>optional int32 eva_value = 35 [default = 0];</code>
       *
       * <pre>
       ** 回避值
       *(eva=evasion) 
       * </pre>
       */
      public boolean hasEvaValue() {
        return ((bitField1_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 eva_value = 35 [default = 0];</code>
       *
       * <pre>
       ** 回避值
       *(eva=evasion) 
       * </pre>
       */
      public int getEvaValue() {
        return evaValue_;
      }
      /**
       * <code>optional int32 eva_value = 35 [default = 0];</code>
       *
       * <pre>
       ** 回避值
       *(eva=evasion) 
       * </pre>
       */
      public Builder setEvaValue(int value) {
        bitField1_ |= 0x00000004;
        evaValue_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 eva_value = 35 [default = 0];</code>
       *
       * <pre>
       ** 回避值
       *(eva=evasion) 
       * </pre>
       */
      public Builder clearEvaValue() {
        bitField1_ = (bitField1_ & ~0x00000004);
        evaValue_ = 0;
        onChanged();
        return this;
      }

      private int cruzSpd_ ;
      /**
       * <code>optional int32 cruz_spd = 36 [default = 0];</code>
       *
       * <pre>
       ** 移速
       *(cruz=cruising) 
       * </pre>
       */
      public boolean hasCruzSpd() {
        return ((bitField1_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 cruz_spd = 36 [default = 0];</code>
       *
       * <pre>
       ** 移速
       *(cruz=cruising) 
       * </pre>
       */
      public int getCruzSpd() {
        return cruzSpd_;
      }
      /**
       * <code>optional int32 cruz_spd = 36 [default = 0];</code>
       *
       * <pre>
       ** 移速
       *(cruz=cruising) 
       * </pre>
       */
      public Builder setCruzSpd(int value) {
        bitField1_ |= 0x00000008;
        cruzSpd_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cruz_spd = 36 [default = 0];</code>
       *
       * <pre>
       ** 移速
       *(cruz=cruising) 
       * </pre>
       */
      public Builder clearCruzSpd() {
        bitField1_ = (bitField1_ & ~0x00000008);
        cruzSpd_ = 0;
        onChanged();
        return this;
      }

      private int revSpd_ ;
      /**
       * <code>optional int32 rev_spd = 37 [default = 0];</code>
       *
       * <pre>
       ** 转速
       *(rev=revolving) 
       * </pre>
       */
      public boolean hasRevSpd() {
        return ((bitField1_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 rev_spd = 37 [default = 0];</code>
       *
       * <pre>
       ** 转速
       *(rev=revolving) 
       * </pre>
       */
      public int getRevSpd() {
        return revSpd_;
      }
      /**
       * <code>optional int32 rev_spd = 37 [default = 0];</code>
       *
       * <pre>
       ** 转速
       *(rev=revolving) 
       * </pre>
       */
      public Builder setRevSpd(int value) {
        bitField1_ |= 0x00000010;
        revSpd_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 rev_spd = 37 [default = 0];</code>
       *
       * <pre>
       ** 转速
       *(rev=revolving) 
       * </pre>
       */
      public Builder clearRevSpd() {
        bitField1_ = (bitField1_ & ~0x00000010);
        revSpd_ = 0;
        onChanged();
        return this;
      }

      private int negStatRes_ ;
      /**
       * <code>optional int32 neg_stat_res = 38 [default = 0];</code>
       *
       * <pre>
       ** 异常耐性
       *(res=resistance) 
       * </pre>
       */
      public boolean hasNegStatRes() {
        return ((bitField1_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 neg_stat_res = 38 [default = 0];</code>
       *
       * <pre>
       ** 异常耐性
       *(res=resistance) 
       * </pre>
       */
      public int getNegStatRes() {
        return negStatRes_;
      }
      /**
       * <code>optional int32 neg_stat_res = 38 [default = 0];</code>
       *
       * <pre>
       ** 异常耐性
       *(res=resistance) 
       * </pre>
       */
      public Builder setNegStatRes(int value) {
        bitField1_ |= 0x00000020;
        negStatRes_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 neg_stat_res = 38 [default = 0];</code>
       *
       * <pre>
       ** 异常耐性
       *(res=resistance) 
       * </pre>
       */
      public Builder clearNegStatRes() {
        bitField1_ = (bitField1_ & ~0x00000020);
        negStatRes_ = 0;
        onChanged();
        return this;
      }

      private int debuffRes_ ;
      /**
       * <code>optional int32 debuff_res = 39 [default = 0];</code>
       *
       * <pre>
       ** 减益耐性 
       * </pre>
       */
      public boolean hasDebuffRes() {
        return ((bitField1_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 debuff_res = 39 [default = 0];</code>
       *
       * <pre>
       ** 减益耐性 
       * </pre>
       */
      public int getDebuffRes() {
        return debuffRes_;
      }
      /**
       * <code>optional int32 debuff_res = 39 [default = 0];</code>
       *
       * <pre>
       ** 减益耐性 
       * </pre>
       */
      public Builder setDebuffRes(int value) {
        bitField1_ |= 0x00000040;
        debuffRes_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 debuff_res = 39 [default = 0];</code>
       *
       * <pre>
       ** 减益耐性 
       * </pre>
       */
      public Builder clearDebuffRes() {
        bitField1_ = (bitField1_ & ~0x00000040);
        debuffRes_ = 0;
        onChanged();
        return this;
      }

      private int defTrait1_ ;
      /**
       * <code>optional int32 def_trait_1 = 40 [default = 0];</code>
       *
       * <pre>
       ** 防御特性1 
       * </pre>
       */
      public boolean hasDefTrait1() {
        return ((bitField1_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 def_trait_1 = 40 [default = 0];</code>
       *
       * <pre>
       ** 防御特性1 
       * </pre>
       */
      public int getDefTrait1() {
        return defTrait1_;
      }
      /**
       * <code>optional int32 def_trait_1 = 40 [default = 0];</code>
       *
       * <pre>
       ** 防御特性1 
       * </pre>
       */
      public Builder setDefTrait1(int value) {
        bitField1_ |= 0x00000080;
        defTrait1_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 def_trait_1 = 40 [default = 0];</code>
       *
       * <pre>
       ** 防御特性1 
       * </pre>
       */
      public Builder clearDefTrait1() {
        bitField1_ = (bitField1_ & ~0x00000080);
        defTrait1_ = 0;
        onChanged();
        return this;
      }

      private int defTrait2_ ;
      /**
       * <code>optional int32 def_trait_2 = 41 [default = 0];</code>
       *
       * <pre>
       ** 防御特性2 
       * </pre>
       */
      public boolean hasDefTrait2() {
        return ((bitField1_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int32 def_trait_2 = 41 [default = 0];</code>
       *
       * <pre>
       ** 防御特性2 
       * </pre>
       */
      public int getDefTrait2() {
        return defTrait2_;
      }
      /**
       * <code>optional int32 def_trait_2 = 41 [default = 0];</code>
       *
       * <pre>
       ** 防御特性2 
       * </pre>
       */
      public Builder setDefTrait2(int value) {
        bitField1_ |= 0x00000100;
        defTrait2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 def_trait_2 = 41 [default = 0];</code>
       *
       * <pre>
       ** 防御特性2 
       * </pre>
       */
      public Builder clearDefTrait2() {
        bitField1_ = (bitField1_ & ~0x00000100);
        defTrait2_ = 0;
        onChanged();
        return this;
      }

      private int defTrait3_ ;
      /**
       * <code>optional int32 def_trait_3 = 42 [default = 0];</code>
       *
       * <pre>
       ** 防御特性3 
       * </pre>
       */
      public boolean hasDefTrait3() {
        return ((bitField1_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional int32 def_trait_3 = 42 [default = 0];</code>
       *
       * <pre>
       ** 防御特性3 
       * </pre>
       */
      public int getDefTrait3() {
        return defTrait3_;
      }
      /**
       * <code>optional int32 def_trait_3 = 42 [default = 0];</code>
       *
       * <pre>
       ** 防御特性3 
       * </pre>
       */
      public Builder setDefTrait3(int value) {
        bitField1_ |= 0x00000200;
        defTrait3_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 def_trait_3 = 42 [default = 0];</code>
       *
       * <pre>
       ** 防御特性3 
       * </pre>
       */
      public Builder clearDefTrait3() {
        bitField1_ = (bitField1_ & ~0x00000200);
        defTrait3_ = 0;
        onChanged();
        return this;
      }

      private int wpnType_ ;
      /**
       * <code>optional int32 wpn_type = 43 [default = 0];</code>
       *
       * <pre>
       ** 武器类型
       *射弹武器=1
       *能量武器=2
       *混合武器=3
       *炸弹武器=4
       *导弹武器=5
       *末日武器=6
       * </pre>
       */
      public boolean hasWpnType() {
        return ((bitField1_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional int32 wpn_type = 43 [default = 0];</code>
       *
       * <pre>
       ** 武器类型
       *射弹武器=1
       *能量武器=2
       *混合武器=3
       *炸弹武器=4
       *导弹武器=5
       *末日武器=6
       * </pre>
       */
      public int getWpnType() {
        return wpnType_;
      }
      /**
       * <code>optional int32 wpn_type = 43 [default = 0];</code>
       *
       * <pre>
       ** 武器类型
       *射弹武器=1
       *能量武器=2
       *混合武器=3
       *炸弹武器=4
       *导弹武器=5
       *末日武器=6
       * </pre>
       */
      public Builder setWpnType(int value) {
        bitField1_ |= 0x00000400;
        wpnType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 wpn_type = 43 [default = 0];</code>
       *
       * <pre>
       ** 武器类型
       *射弹武器=1
       *能量武器=2
       *混合武器=3
       *炸弹武器=4
       *导弹武器=5
       *末日武器=6
       * </pre>
       */
      public Builder clearWpnType() {
        bitField1_ = (bitField1_ & ~0x00000400);
        wpnType_ = 0;
        onChanged();
        return this;
      }

      private int dmgToShld_ ;
      /**
       * <code>optional int32 dmg_to_shld = 44 [default = 0];</code>
       *
       * <pre>
       ** 对护盾伤害
       *(shld=shield)
       *(百分比)
       * </pre>
       */
      public boolean hasDmgToShld() {
        return ((bitField1_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional int32 dmg_to_shld = 44 [default = 0];</code>
       *
       * <pre>
       ** 对护盾伤害
       *(shld=shield)
       *(百分比)
       * </pre>
       */
      public int getDmgToShld() {
        return dmgToShld_;
      }
      /**
       * <code>optional int32 dmg_to_shld = 44 [default = 0];</code>
       *
       * <pre>
       ** 对护盾伤害
       *(shld=shield)
       *(百分比)
       * </pre>
       */
      public Builder setDmgToShld(int value) {
        bitField1_ |= 0x00000800;
        dmgToShld_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 dmg_to_shld = 44 [default = 0];</code>
       *
       * <pre>
       ** 对护盾伤害
       *(shld=shield)
       *(百分比)
       * </pre>
       */
      public Builder clearDmgToShld() {
        bitField1_ = (bitField1_ & ~0x00000800);
        dmgToShld_ = 0;
        onChanged();
        return this;
      }

      private int osEmDmg_ ;
      /**
       * <code>optional int32 os_em_dmg = 45 [default = 0];</code>
       *
       * <pre>
       ** 单发电磁伤害
       *(os=one shot) 
       * </pre>
       */
      public boolean hasOsEmDmg() {
        return ((bitField1_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional int32 os_em_dmg = 45 [default = 0];</code>
       *
       * <pre>
       ** 单发电磁伤害
       *(os=one shot) 
       * </pre>
       */
      public int getOsEmDmg() {
        return osEmDmg_;
      }
      /**
       * <code>optional int32 os_em_dmg = 45 [default = 0];</code>
       *
       * <pre>
       ** 单发电磁伤害
       *(os=one shot) 
       * </pre>
       */
      public Builder setOsEmDmg(int value) {
        bitField1_ |= 0x00001000;
        osEmDmg_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 os_em_dmg = 45 [default = 0];</code>
       *
       * <pre>
       ** 单发电磁伤害
       *(os=one shot) 
       * </pre>
       */
      public Builder clearOsEmDmg() {
        bitField1_ = (bitField1_ & ~0x00001000);
        osEmDmg_ = 0;
        onChanged();
        return this;
      }

      private int osThermDmg_ ;
      /**
       * <code>optional int32 os_therm_dmg = 46 [default = 0];</code>
       *
       * <pre>
       ** 单发热能伤害 
       * </pre>
       */
      public boolean hasOsThermDmg() {
        return ((bitField1_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional int32 os_therm_dmg = 46 [default = 0];</code>
       *
       * <pre>
       ** 单发热能伤害 
       * </pre>
       */
      public int getOsThermDmg() {
        return osThermDmg_;
      }
      /**
       * <code>optional int32 os_therm_dmg = 46 [default = 0];</code>
       *
       * <pre>
       ** 单发热能伤害 
       * </pre>
       */
      public Builder setOsThermDmg(int value) {
        bitField1_ |= 0x00002000;
        osThermDmg_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 os_therm_dmg = 46 [default = 0];</code>
       *
       * <pre>
       ** 单发热能伤害 
       * </pre>
       */
      public Builder clearOsThermDmg() {
        bitField1_ = (bitField1_ & ~0x00002000);
        osThermDmg_ = 0;
        onChanged();
        return this;
      }

      private int osKinDmg_ ;
      /**
       * <code>optional int32 os_kin_dmg = 47 [default = 0];</code>
       *
       * <pre>
       ** 单发动能伤害 
       * </pre>
       */
      public boolean hasOsKinDmg() {
        return ((bitField1_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional int32 os_kin_dmg = 47 [default = 0];</code>
       *
       * <pre>
       ** 单发动能伤害 
       * </pre>
       */
      public int getOsKinDmg() {
        return osKinDmg_;
      }
      /**
       * <code>optional int32 os_kin_dmg = 47 [default = 0];</code>
       *
       * <pre>
       ** 单发动能伤害 
       * </pre>
       */
      public Builder setOsKinDmg(int value) {
        bitField1_ |= 0x00004000;
        osKinDmg_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 os_kin_dmg = 47 [default = 0];</code>
       *
       * <pre>
       ** 单发动能伤害 
       * </pre>
       */
      public Builder clearOsKinDmg() {
        bitField1_ = (bitField1_ & ~0x00004000);
        osKinDmg_ = 0;
        onChanged();
        return this;
      }

      private int osExpDmg_ ;
      /**
       * <code>optional int32 os_exp_dmg = 48 [default = 0];</code>
       *
       * <pre>
       ** 单发爆炸伤害 
       * </pre>
       */
      public boolean hasOsExpDmg() {
        return ((bitField1_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional int32 os_exp_dmg = 48 [default = 0];</code>
       *
       * <pre>
       ** 单发爆炸伤害 
       * </pre>
       */
      public int getOsExpDmg() {
        return osExpDmg_;
      }
      /**
       * <code>optional int32 os_exp_dmg = 48 [default = 0];</code>
       *
       * <pre>
       ** 单发爆炸伤害 
       * </pre>
       */
      public Builder setOsExpDmg(int value) {
        bitField1_ |= 0x00008000;
        osExpDmg_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 os_exp_dmg = 48 [default = 0];</code>
       *
       * <pre>
       ** 单发爆炸伤害 
       * </pre>
       */
      public Builder clearOsExpDmg() {
        bitField1_ = (bitField1_ & ~0x00008000);
        osExpDmg_ = 0;
        onChanged();
        return this;
      }

      private int shortRngAc_ ;
      /**
       * <code>optional int32 short_rng_ac = 49 [default = 0];</code>
       *
       * <pre>
       ** 近距离命中率
       *(ac=accuracy)
       *(百分比)
       * </pre>
       */
      public boolean hasShortRngAc() {
        return ((bitField1_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional int32 short_rng_ac = 49 [default = 0];</code>
       *
       * <pre>
       ** 近距离命中率
       *(ac=accuracy)
       *(百分比)
       * </pre>
       */
      public int getShortRngAc() {
        return shortRngAc_;
      }
      /**
       * <code>optional int32 short_rng_ac = 49 [default = 0];</code>
       *
       * <pre>
       ** 近距离命中率
       *(ac=accuracy)
       *(百分比)
       * </pre>
       */
      public Builder setShortRngAc(int value) {
        bitField1_ |= 0x00010000;
        shortRngAc_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 short_rng_ac = 49 [default = 0];</code>
       *
       * <pre>
       ** 近距离命中率
       *(ac=accuracy)
       *(百分比)
       * </pre>
       */
      public Builder clearShortRngAc() {
        bitField1_ = (bitField1_ & ~0x00010000);
        shortRngAc_ = 0;
        onChanged();
        return this;
      }

      private int midRngAc_ ;
      /**
       * <code>optional int32 mid_rng_ac = 50 [default = 0];</code>
       *
       * <pre>
       ** 中距离命中率
       *(百分比) 
       * </pre>
       */
      public boolean hasMidRngAc() {
        return ((bitField1_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional int32 mid_rng_ac = 50 [default = 0];</code>
       *
       * <pre>
       ** 中距离命中率
       *(百分比) 
       * </pre>
       */
      public int getMidRngAc() {
        return midRngAc_;
      }
      /**
       * <code>optional int32 mid_rng_ac = 50 [default = 0];</code>
       *
       * <pre>
       ** 中距离命中率
       *(百分比) 
       * </pre>
       */
      public Builder setMidRngAc(int value) {
        bitField1_ |= 0x00020000;
        midRngAc_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 mid_rng_ac = 50 [default = 0];</code>
       *
       * <pre>
       ** 中距离命中率
       *(百分比) 
       * </pre>
       */
      public Builder clearMidRngAc() {
        bitField1_ = (bitField1_ & ~0x00020000);
        midRngAc_ = 0;
        onChanged();
        return this;
      }

      private int longRngAc_ ;
      /**
       * <code>optional int32 long_rng_ac = 51 [default = 0];</code>
       *
       * <pre>
       ** 远距离命中率
       *(百分比) 
       * </pre>
       */
      public boolean hasLongRngAc() {
        return ((bitField1_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional int32 long_rng_ac = 51 [default = 0];</code>
       *
       * <pre>
       ** 远距离命中率
       *(百分比) 
       * </pre>
       */
      public int getLongRngAc() {
        return longRngAc_;
      }
      /**
       * <code>optional int32 long_rng_ac = 51 [default = 0];</code>
       *
       * <pre>
       ** 远距离命中率
       *(百分比) 
       * </pre>
       */
      public Builder setLongRngAc(int value) {
        bitField1_ |= 0x00040000;
        longRngAc_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 long_rng_ac = 51 [default = 0];</code>
       *
       * <pre>
       ** 远距离命中率
       *(百分比) 
       * </pre>
       */
      public Builder clearLongRngAc() {
        bitField1_ = (bitField1_ & ~0x00040000);
        longRngAc_ = 0;
        onChanged();
        return this;
      }

      private int shortRngDelay_ ;
      /**
       * <code>optional int32 short_rng_delay = 52 [default = 0];</code>
       *
       * <pre>
       ** 近距离击中延迟
       *(帧) 
       * </pre>
       */
      public boolean hasShortRngDelay() {
        return ((bitField1_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional int32 short_rng_delay = 52 [default = 0];</code>
       *
       * <pre>
       ** 近距离击中延迟
       *(帧) 
       * </pre>
       */
      public int getShortRngDelay() {
        return shortRngDelay_;
      }
      /**
       * <code>optional int32 short_rng_delay = 52 [default = 0];</code>
       *
       * <pre>
       ** 近距离击中延迟
       *(帧) 
       * </pre>
       */
      public Builder setShortRngDelay(int value) {
        bitField1_ |= 0x00080000;
        shortRngDelay_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 short_rng_delay = 52 [default = 0];</code>
       *
       * <pre>
       ** 近距离击中延迟
       *(帧) 
       * </pre>
       */
      public Builder clearShortRngDelay() {
        bitField1_ = (bitField1_ & ~0x00080000);
        shortRngDelay_ = 0;
        onChanged();
        return this;
      }

      private int midRngDelay_ ;
      /**
       * <code>optional int32 mid_rng_delay = 53 [default = 0];</code>
       *
       * <pre>
       ** 中距离击中延迟
       *(帧) 
       * </pre>
       */
      public boolean hasMidRngDelay() {
        return ((bitField1_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional int32 mid_rng_delay = 53 [default = 0];</code>
       *
       * <pre>
       ** 中距离击中延迟
       *(帧) 
       * </pre>
       */
      public int getMidRngDelay() {
        return midRngDelay_;
      }
      /**
       * <code>optional int32 mid_rng_delay = 53 [default = 0];</code>
       *
       * <pre>
       ** 中距离击中延迟
       *(帧) 
       * </pre>
       */
      public Builder setMidRngDelay(int value) {
        bitField1_ |= 0x00100000;
        midRngDelay_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 mid_rng_delay = 53 [default = 0];</code>
       *
       * <pre>
       ** 中距离击中延迟
       *(帧) 
       * </pre>
       */
      public Builder clearMidRngDelay() {
        bitField1_ = (bitField1_ & ~0x00100000);
        midRngDelay_ = 0;
        onChanged();
        return this;
      }

      private int longRngDelay_ ;
      /**
       * <code>optional int32 long_rng_delay = 54 [default = 0];</code>
       *
       * <pre>
       ** 远距离击中延迟
       *(帧) 
       * </pre>
       */
      public boolean hasLongRngDelay() {
        return ((bitField1_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional int32 long_rng_delay = 54 [default = 0];</code>
       *
       * <pre>
       ** 远距离击中延迟
       *(帧) 
       * </pre>
       */
      public int getLongRngDelay() {
        return longRngDelay_;
      }
      /**
       * <code>optional int32 long_rng_delay = 54 [default = 0];</code>
       *
       * <pre>
       ** 远距离击中延迟
       *(帧) 
       * </pre>
       */
      public Builder setLongRngDelay(int value) {
        bitField1_ |= 0x00200000;
        longRngDelay_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 long_rng_delay = 54 [default = 0];</code>
       *
       * <pre>
       ** 远距离击中延迟
       *(帧) 
       * </pre>
       */
      public Builder clearLongRngDelay() {
        bitField1_ = (bitField1_ & ~0x00200000);
        longRngDelay_ = 0;
        onChanged();
        return this;
      }

      private int burstQty_ ;
      /**
       * <code>optional int32 burst_qty = 55 [default = 0];</code>
       *
       * <pre>
       ** 连发弹数 
       * </pre>
       */
      public boolean hasBurstQty() {
        return ((bitField1_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>optional int32 burst_qty = 55 [default = 0];</code>
       *
       * <pre>
       ** 连发弹数 
       * </pre>
       */
      public int getBurstQty() {
        return burstQty_;
      }
      /**
       * <code>optional int32 burst_qty = 55 [default = 0];</code>
       *
       * <pre>
       ** 连发弹数 
       * </pre>
       */
      public Builder setBurstQty(int value) {
        bitField1_ |= 0x00400000;
        burstQty_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 burst_qty = 55 [default = 0];</code>
       *
       * <pre>
       ** 连发弹数 
       * </pre>
       */
      public Builder clearBurstQty() {
        bitField1_ = (bitField1_ & ~0x00400000);
        burstQty_ = 0;
        onChanged();
        return this;
      }

      private int burstIntvl_ ;
      /**
       * <code>optional int32 burst_intvl = 56 [default = 0];</code>
       *
       * <pre>
       ** 单发间隔
       *(intvl=interval)
       *(帧)
       * </pre>
       */
      public boolean hasBurstIntvl() {
        return ((bitField1_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>optional int32 burst_intvl = 56 [default = 0];</code>
       *
       * <pre>
       ** 单发间隔
       *(intvl=interval)
       *(帧)
       * </pre>
       */
      public int getBurstIntvl() {
        return burstIntvl_;
      }
      /**
       * <code>optional int32 burst_intvl = 56 [default = 0];</code>
       *
       * <pre>
       ** 单发间隔
       *(intvl=interval)
       *(帧)
       * </pre>
       */
      public Builder setBurstIntvl(int value) {
        bitField1_ |= 0x00800000;
        burstIntvl_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 burst_intvl = 56 [default = 0];</code>
       *
       * <pre>
       ** 单发间隔
       *(intvl=interval)
       *(帧)
       * </pre>
       */
      public Builder clearBurstIntvl() {
        bitField1_ = (bitField1_ & ~0x00800000);
        burstIntvl_ = 0;
        onChanged();
        return this;
      }

      private int reloadIntvl_ ;
      /**
       * <code>optional int32 reload_intvl = 57 [default = 0];</code>
       *
       * <pre>
       ** 填装时间
       *(帧) 
       * </pre>
       */
      public boolean hasReloadIntvl() {
        return ((bitField1_ & 0x01000000) == 0x01000000);
      }
      /**
       * <code>optional int32 reload_intvl = 57 [default = 0];</code>
       *
       * <pre>
       ** 填装时间
       *(帧) 
       * </pre>
       */
      public int getReloadIntvl() {
        return reloadIntvl_;
      }
      /**
       * <code>optional int32 reload_intvl = 57 [default = 0];</code>
       *
       * <pre>
       ** 填装时间
       *(帧) 
       * </pre>
       */
      public Builder setReloadIntvl(int value) {
        bitField1_ |= 0x01000000;
        reloadIntvl_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 reload_intvl = 57 [default = 0];</code>
       *
       * <pre>
       ** 填装时间
       *(帧) 
       * </pre>
       */
      public Builder clearReloadIntvl() {
        bitField1_ = (bitField1_ & ~0x01000000);
        reloadIntvl_ = 0;
        onChanged();
        return this;
      }

      private int wpnTrait1_ ;
      /**
       * <code>optional int32 wpn_trait_1 = 58 [default = 0];</code>
       *
       * <pre>
       ** 武器特性1 
       * </pre>
       */
      public boolean hasWpnTrait1() {
        return ((bitField1_ & 0x02000000) == 0x02000000);
      }
      /**
       * <code>optional int32 wpn_trait_1 = 58 [default = 0];</code>
       *
       * <pre>
       ** 武器特性1 
       * </pre>
       */
      public int getWpnTrait1() {
        return wpnTrait1_;
      }
      /**
       * <code>optional int32 wpn_trait_1 = 58 [default = 0];</code>
       *
       * <pre>
       ** 武器特性1 
       * </pre>
       */
      public Builder setWpnTrait1(int value) {
        bitField1_ |= 0x02000000;
        wpnTrait1_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 wpn_trait_1 = 58 [default = 0];</code>
       *
       * <pre>
       ** 武器特性1 
       * </pre>
       */
      public Builder clearWpnTrait1() {
        bitField1_ = (bitField1_ & ~0x02000000);
        wpnTrait1_ = 0;
        onChanged();
        return this;
      }

      private int wpnTrait2_ ;
      /**
       * <code>optional int32 wpn_trait_2 = 59 [default = 0];</code>
       *
       * <pre>
       ** 武器特性2 
       * </pre>
       */
      public boolean hasWpnTrait2() {
        return ((bitField1_ & 0x04000000) == 0x04000000);
      }
      /**
       * <code>optional int32 wpn_trait_2 = 59 [default = 0];</code>
       *
       * <pre>
       ** 武器特性2 
       * </pre>
       */
      public int getWpnTrait2() {
        return wpnTrait2_;
      }
      /**
       * <code>optional int32 wpn_trait_2 = 59 [default = 0];</code>
       *
       * <pre>
       ** 武器特性2 
       * </pre>
       */
      public Builder setWpnTrait2(int value) {
        bitField1_ |= 0x04000000;
        wpnTrait2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 wpn_trait_2 = 59 [default = 0];</code>
       *
       * <pre>
       ** 武器特性2 
       * </pre>
       */
      public Builder clearWpnTrait2() {
        bitField1_ = (bitField1_ & ~0x04000000);
        wpnTrait2_ = 0;
        onChanged();
        return this;
      }

      private int wpnTrait3_ ;
      /**
       * <code>optional int32 wpn_trait_3 = 60 [default = 0];</code>
       *
       * <pre>
       ** 武器特性3 
       * </pre>
       */
      public boolean hasWpnTrait3() {
        return ((bitField1_ & 0x08000000) == 0x08000000);
      }
      /**
       * <code>optional int32 wpn_trait_3 = 60 [default = 0];</code>
       *
       * <pre>
       ** 武器特性3 
       * </pre>
       */
      public int getWpnTrait3() {
        return wpnTrait3_;
      }
      /**
       * <code>optional int32 wpn_trait_3 = 60 [default = 0];</code>
       *
       * <pre>
       ** 武器特性3 
       * </pre>
       */
      public Builder setWpnTrait3(int value) {
        bitField1_ |= 0x08000000;
        wpnTrait3_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 wpn_trait_3 = 60 [default = 0];</code>
       *
       * <pre>
       ** 武器特性3 
       * </pre>
       */
      public Builder clearWpnTrait3() {
        bitField1_ = (bitField1_ & ~0x08000000);
        wpnTrait3_ = 0;
        onChanged();
        return this;
      }

      private int thrust_ ;
      /**
       * <code>optional int32 thrust = 61 [default = 0];</code>
       *
       * <pre>
       ** 动力 
       * </pre>
       */
      public boolean hasThrust() {
        return ((bitField1_ & 0x10000000) == 0x10000000);
      }
      /**
       * <code>optional int32 thrust = 61 [default = 0];</code>
       *
       * <pre>
       ** 动力 
       * </pre>
       */
      public int getThrust() {
        return thrust_;
      }
      /**
       * <code>optional int32 thrust = 61 [default = 0];</code>
       *
       * <pre>
       ** 动力 
       * </pre>
       */
      public Builder setThrust(int value) {
        bitField1_ |= 0x10000000;
        thrust_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 thrust = 61 [default = 0];</code>
       *
       * <pre>
       ** 动力 
       * </pre>
       */
      public Builder clearThrust() {
        bitField1_ = (bitField1_ & ~0x10000000);
        thrust_ = 0;
        onChanged();
        return this;
      }

      private int fuelVol_ ;
      /**
       * <code>optional int32 fuel_vol = 62 [default = 0];</code>
       *
       * <pre>
       ** 燃料容积
       *(vol=volumn)
       *(立方米)
       * </pre>
       */
      public boolean hasFuelVol() {
        return ((bitField1_ & 0x20000000) == 0x20000000);
      }
      /**
       * <code>optional int32 fuel_vol = 62 [default = 0];</code>
       *
       * <pre>
       ** 燃料容积
       *(vol=volumn)
       *(立方米)
       * </pre>
       */
      public int getFuelVol() {
        return fuelVol_;
      }
      /**
       * <code>optional int32 fuel_vol = 62 [default = 0];</code>
       *
       * <pre>
       ** 燃料容积
       *(vol=volumn)
       *(立方米)
       * </pre>
       */
      public Builder setFuelVol(int value) {
        bitField1_ |= 0x20000000;
        fuelVol_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 fuel_vol = 62 [default = 0];</code>
       *
       * <pre>
       ** 燃料容积
       *(vol=volumn)
       *(立方米)
       * </pre>
       */
      public Builder clearFuelVol() {
        bitField1_ = (bitField1_ & ~0x20000000);
        fuelVol_ = 0;
        onChanged();
        return this;
      }

      private int fuelConsRate_ ;
      /**
       * <code>optional int32 fuel_cons_rate = 63 [default = 0];</code>
       *
       * <pre>
       ** 燃料消耗率
       *(cons=consumption)
       *(立方米/光年)
       * </pre>
       */
      public boolean hasFuelConsRate() {
        return ((bitField1_ & 0x40000000) == 0x40000000);
      }
      /**
       * <code>optional int32 fuel_cons_rate = 63 [default = 0];</code>
       *
       * <pre>
       ** 燃料消耗率
       *(cons=consumption)
       *(立方米/光年)
       * </pre>
       */
      public int getFuelConsRate() {
        return fuelConsRate_;
      }
      /**
       * <code>optional int32 fuel_cons_rate = 63 [default = 0];</code>
       *
       * <pre>
       ** 燃料消耗率
       *(cons=consumption)
       *(立方米/光年)
       * </pre>
       */
      public Builder setFuelConsRate(int value) {
        bitField1_ |= 0x40000000;
        fuelConsRate_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 fuel_cons_rate = 63 [default = 0];</code>
       *
       * <pre>
       ** 燃料消耗率
       *(cons=consumption)
       *(立方米/光年)
       * </pre>
       */
      public Builder clearFuelConsRate() {
        bitField1_ = (bitField1_ & ~0x40000000);
        fuelConsRate_ = 0;
        onChanged();
        return this;
      }

      private int explLevel_ ;
      /**
       * <code>optional int32 expl_level = 64 [default = 0];</code>
       *
       * <pre>
       ** 可探索等级
       *(expl=exploration) 
       * </pre>
       */
      public boolean hasExplLevel() {
        return ((bitField1_ & 0x80000000) == 0x80000000);
      }
      /**
       * <code>optional int32 expl_level = 64 [default = 0];</code>
       *
       * <pre>
       ** 可探索等级
       *(expl=exploration) 
       * </pre>
       */
      public int getExplLevel() {
        return explLevel_;
      }
      /**
       * <code>optional int32 expl_level = 64 [default = 0];</code>
       *
       * <pre>
       ** 可探索等级
       *(expl=exploration) 
       * </pre>
       */
      public Builder setExplLevel(int value) {
        bitField1_ |= 0x80000000;
        explLevel_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 expl_level = 64 [default = 0];</code>
       *
       * <pre>
       ** 可探索等级
       *(expl=exploration) 
       * </pre>
       */
      public Builder clearExplLevel() {
        bitField1_ = (bitField1_ & ~0x80000000);
        explLevel_ = 0;
        onChanged();
        return this;
      }

      private int explSpd_ ;
      /**
       * <code>optional int32 expl_spd = 65 [default = 0];</code>
       *
       * <pre>
       ** 探索速度
       *(探索量/小时)
       *探索量为
       *1000
       * </pre>
       */
      public boolean hasExplSpd() {
        return ((bitField2_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 expl_spd = 65 [default = 0];</code>
       *
       * <pre>
       ** 探索速度
       *(探索量/小时)
       *探索量为
       *1000
       * </pre>
       */
      public int getExplSpd() {
        return explSpd_;
      }
      /**
       * <code>optional int32 expl_spd = 65 [default = 0];</code>
       *
       * <pre>
       ** 探索速度
       *(探索量/小时)
       *探索量为
       *1000
       * </pre>
       */
      public Builder setExplSpd(int value) {
        bitField2_ |= 0x00000001;
        explSpd_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 expl_spd = 65 [default = 0];</code>
       *
       * <pre>
       ** 探索速度
       *(探索量/小时)
       *探索量为
       *1000
       * </pre>
       */
      public Builder clearExplSpd() {
        bitField2_ = (bitField2_ & ~0x00000001);
        explSpd_ = 0;
        onChanged();
        return this;
      }

      private int miningSpdCoeff_ ;
      /**
       * <code>optional int32 mining_spd_coeff = 66 [default = 0];</code>
       *
       * <pre>
       ** 采矿速度系数
       *(百分比) 
       * </pre>
       */
      public boolean hasMiningSpdCoeff() {
        return ((bitField2_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 mining_spd_coeff = 66 [default = 0];</code>
       *
       * <pre>
       ** 采矿速度系数
       *(百分比) 
       * </pre>
       */
      public int getMiningSpdCoeff() {
        return miningSpdCoeff_;
      }
      /**
       * <code>optional int32 mining_spd_coeff = 66 [default = 0];</code>
       *
       * <pre>
       ** 采矿速度系数
       *(百分比) 
       * </pre>
       */
      public Builder setMiningSpdCoeff(int value) {
        bitField2_ |= 0x00000002;
        miningSpdCoeff_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 mining_spd_coeff = 66 [default = 0];</code>
       *
       * <pre>
       ** 采矿速度系数
       *(百分比) 
       * </pre>
       */
      public Builder clearMiningSpdCoeff() {
        bitField2_ = (bitField2_ & ~0x00000002);
        miningSpdCoeff_ = 0;
        onChanged();
        return this;
      }

      private int payloadType_ ;
      /**
       * <code>optional int32 payload_type = 67 [default = 0];</code>
       *
       * <pre>
       ** 装载类型
       *人=1
       *货物=2
       *矿物=3
       * </pre>
       */
      public boolean hasPayloadType() {
        return ((bitField2_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 payload_type = 67 [default = 0];</code>
       *
       * <pre>
       ** 装载类型
       *人=1
       *货物=2
       *矿物=3
       * </pre>
       */
      public int getPayloadType() {
        return payloadType_;
      }
      /**
       * <code>optional int32 payload_type = 67 [default = 0];</code>
       *
       * <pre>
       ** 装载类型
       *人=1
       *货物=2
       *矿物=3
       * </pre>
       */
      public Builder setPayloadType(int value) {
        bitField2_ |= 0x00000004;
        payloadType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 payload_type = 67 [default = 0];</code>
       *
       * <pre>
       ** 装载类型
       *人=1
       *货物=2
       *矿物=3
       * </pre>
       */
      public Builder clearPayloadType() {
        bitField2_ = (bitField2_ & ~0x00000004);
        payloadType_ = 0;
        onChanged();
        return this;
      }

      private int payload_ ;
      /**
       * <code>optional int32 payload = 68 [default = 0];</code>
       *
       * <pre>
       ** 装载量
       *(立方米) 
       * </pre>
       */
      public boolean hasPayload() {
        return ((bitField2_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 payload = 68 [default = 0];</code>
       *
       * <pre>
       ** 装载量
       *(立方米) 
       * </pre>
       */
      public int getPayload() {
        return payload_;
      }
      /**
       * <code>optional int32 payload = 68 [default = 0];</code>
       *
       * <pre>
       ** 装载量
       *(立方米) 
       * </pre>
       */
      public Builder setPayload(int value) {
        bitField2_ |= 0x00000008;
        payload_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 payload = 68 [default = 0];</code>
       *
       * <pre>
       ** 装载量
       *(立方米) 
       * </pre>
       */
      public Builder clearPayload() {
        bitField2_ = (bitField2_ & ~0x00000008);
        payload_ = 0;
        onChanged();
        return this;
      }

      private int colSpd_ ;
      /**
       * <code>optional int32 col_spd = 69 [default = 0];</code>
       *
       * <pre>
       ** 殖民速度
       *(col=colony)
       *(殖民量/小时)
       * </pre>
       */
      public boolean hasColSpd() {
        return ((bitField2_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 col_spd = 69 [default = 0];</code>
       *
       * <pre>
       ** 殖民速度
       *(col=colony)
       *(殖民量/小时)
       * </pre>
       */
      public int getColSpd() {
        return colSpd_;
      }
      /**
       * <code>optional int32 col_spd = 69 [default = 0];</code>
       *
       * <pre>
       ** 殖民速度
       *(col=colony)
       *(殖民量/小时)
       * </pre>
       */
      public Builder setColSpd(int value) {
        bitField2_ |= 0x00000010;
        colSpd_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 col_spd = 69 [default = 0];</code>
       *
       * <pre>
       ** 殖民速度
       *(col=colony)
       *(殖民量/小时)
       * </pre>
       */
      public Builder clearColSpd() {
        bitField2_ = (bitField2_ & ~0x00000010);
        colSpd_ = 0;
        onChanged();
        return this;
      }

      private int timeCost_ ;
      /**
       * <code>optional int32 time_cost = 70 [default = 0];</code>
       *
       * <pre>
       ** 消耗时间
       *（秒） 
       * </pre>
       */
      public boolean hasTimeCost() {
        return ((bitField2_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 time_cost = 70 [default = 0];</code>
       *
       * <pre>
       ** 消耗时间
       *（秒） 
       * </pre>
       */
      public int getTimeCost() {
        return timeCost_;
      }
      /**
       * <code>optional int32 time_cost = 70 [default = 0];</code>
       *
       * <pre>
       ** 消耗时间
       *（秒） 
       * </pre>
       */
      public Builder setTimeCost(int value) {
        bitField2_ |= 0x00000020;
        timeCost_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 time_cost = 70 [default = 0];</code>
       *
       * <pre>
       ** 消耗时间
       *（秒） 
       * </pre>
       */
      public Builder clearTimeCost() {
        bitField2_ = (bitField2_ & ~0x00000020);
        timeCost_ = 0;
        onChanged();
        return this;
      }

      private int eleCost_ ;
      /**
       * <code>optional int32 ele_cost = 71 [default = 0];</code>
       *
       * <pre>
       ** 消耗电力 
       * </pre>
       */
      public boolean hasEleCost() {
        return ((bitField2_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 ele_cost = 71 [default = 0];</code>
       *
       * <pre>
       ** 消耗电力 
       * </pre>
       */
      public int getEleCost() {
        return eleCost_;
      }
      /**
       * <code>optional int32 ele_cost = 71 [default = 0];</code>
       *
       * <pre>
       ** 消耗电力 
       * </pre>
       */
      public Builder setEleCost(int value) {
        bitField2_ |= 0x00000040;
        eleCost_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 ele_cost = 71 [default = 0];</code>
       *
       * <pre>
       ** 消耗电力 
       * </pre>
       */
      public Builder clearEleCost() {
        bitField2_ = (bitField2_ & ~0x00000040);
        eleCost_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStruct> costTable_ =
        java.util.Collections.emptyList();
      private void ensureCostTableIsMutable() {
        if (!((bitField2_ & 0x00000080) == 0x00000080)) {
          costTable_ = new java.util.ArrayList<com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStruct>(costTable_);
          bitField2_ |= 0x00000080;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStruct, com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStruct.Builder, com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStructOrBuilder> costTableBuilder_;

      /**
       * <code>repeated .com.game.server.data.SHIP_HULL_TECH.CostStruct cost_table = 72;</code>
       */
      public java.util.List<com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStruct> getCostTableList() {
        if (costTableBuilder_ == null) {
          return java.util.Collections.unmodifiableList(costTable_);
        } else {
          return costTableBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .com.game.server.data.SHIP_HULL_TECH.CostStruct cost_table = 72;</code>
       */
      public int getCostTableCount() {
        if (costTableBuilder_ == null) {
          return costTable_.size();
        } else {
          return costTableBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .com.game.server.data.SHIP_HULL_TECH.CostStruct cost_table = 72;</code>
       */
      public com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStruct getCostTable(int index) {
        if (costTableBuilder_ == null) {
          return costTable_.get(index);
        } else {
          return costTableBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .com.game.server.data.SHIP_HULL_TECH.CostStruct cost_table = 72;</code>
       */
      public Builder setCostTable(
          int index, com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStruct value) {
        if (costTableBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCostTableIsMutable();
          costTable_.set(index, value);
          onChanged();
        } else {
          costTableBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.game.server.data.SHIP_HULL_TECH.CostStruct cost_table = 72;</code>
       */
      public Builder setCostTable(
          int index, com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStruct.Builder builderForValue) {
        if (costTableBuilder_ == null) {
          ensureCostTableIsMutable();
          costTable_.set(index, builderForValue.build());
          onChanged();
        } else {
          costTableBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.game.server.data.SHIP_HULL_TECH.CostStruct cost_table = 72;</code>
       */
      public Builder addCostTable(com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStruct value) {
        if (costTableBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCostTableIsMutable();
          costTable_.add(value);
          onChanged();
        } else {
          costTableBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .com.game.server.data.SHIP_HULL_TECH.CostStruct cost_table = 72;</code>
       */
      public Builder addCostTable(
          int index, com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStruct value) {
        if (costTableBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCostTableIsMutable();
          costTable_.add(index, value);
          onChanged();
        } else {
          costTableBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.game.server.data.SHIP_HULL_TECH.CostStruct cost_table = 72;</code>
       */
      public Builder addCostTable(
          com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStruct.Builder builderForValue) {
        if (costTableBuilder_ == null) {
          ensureCostTableIsMutable();
          costTable_.add(builderForValue.build());
          onChanged();
        } else {
          costTableBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.game.server.data.SHIP_HULL_TECH.CostStruct cost_table = 72;</code>
       */
      public Builder addCostTable(
          int index, com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStruct.Builder builderForValue) {
        if (costTableBuilder_ == null) {
          ensureCostTableIsMutable();
          costTable_.add(index, builderForValue.build());
          onChanged();
        } else {
          costTableBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.game.server.data.SHIP_HULL_TECH.CostStruct cost_table = 72;</code>
       */
      public Builder addAllCostTable(
          java.lang.Iterable<? extends com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStruct> values) {
        if (costTableBuilder_ == null) {
          ensureCostTableIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, costTable_);
          onChanged();
        } else {
          costTableBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .com.game.server.data.SHIP_HULL_TECH.CostStruct cost_table = 72;</code>
       */
      public Builder clearCostTable() {
        if (costTableBuilder_ == null) {
          costTable_ = java.util.Collections.emptyList();
          bitField2_ = (bitField2_ & ~0x00000080);
          onChanged();
        } else {
          costTableBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .com.game.server.data.SHIP_HULL_TECH.CostStruct cost_table = 72;</code>
       */
      public Builder removeCostTable(int index) {
        if (costTableBuilder_ == null) {
          ensureCostTableIsMutable();
          costTable_.remove(index);
          onChanged();
        } else {
          costTableBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .com.game.server.data.SHIP_HULL_TECH.CostStruct cost_table = 72;</code>
       */
      public com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStruct.Builder getCostTableBuilder(
          int index) {
        return getCostTableFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .com.game.server.data.SHIP_HULL_TECH.CostStruct cost_table = 72;</code>
       */
      public com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStructOrBuilder getCostTableOrBuilder(
          int index) {
        if (costTableBuilder_ == null) {
          return costTable_.get(index);  } else {
          return costTableBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .com.game.server.data.SHIP_HULL_TECH.CostStruct cost_table = 72;</code>
       */
      public java.util.List<? extends com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStructOrBuilder> 
           getCostTableOrBuilderList() {
        if (costTableBuilder_ != null) {
          return costTableBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(costTable_);
        }
      }
      /**
       * <code>repeated .com.game.server.data.SHIP_HULL_TECH.CostStruct cost_table = 72;</code>
       */
      public com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStruct.Builder addCostTableBuilder() {
        return getCostTableFieldBuilder().addBuilder(
            com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStruct.getDefaultInstance());
      }
      /**
       * <code>repeated .com.game.server.data.SHIP_HULL_TECH.CostStruct cost_table = 72;</code>
       */
      public com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStruct.Builder addCostTableBuilder(
          int index) {
        return getCostTableFieldBuilder().addBuilder(
            index, com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStruct.getDefaultInstance());
      }
      /**
       * <code>repeated .com.game.server.data.SHIP_HULL_TECH.CostStruct cost_table = 72;</code>
       */
      public java.util.List<com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStruct.Builder> 
           getCostTableBuilderList() {
        return getCostTableFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStruct, com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStruct.Builder, com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStructOrBuilder> 
          getCostTableFieldBuilder() {
        if (costTableBuilder_ == null) {
          costTableBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStruct, com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStruct.Builder, com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.CostStructOrBuilder>(
                  costTable_,
                  ((bitField2_ & 0x00000080) == 0x00000080),
                  getParentForChildren(),
                  isClean());
          costTable_ = null;
        }
        return costTableBuilder_;
      }

      private int storUnit_ ;
      /**
       * <code>optional int32 stor_unit = 73 [default = 0];</code>
       *
       * <pre>
       ** 储存体积
       *占用
       *(立方米)
       * </pre>
       */
      public boolean hasStorUnit() {
        return ((bitField2_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int32 stor_unit = 73 [default = 0];</code>
       *
       * <pre>
       ** 储存体积
       *占用
       *(立方米)
       * </pre>
       */
      public int getStorUnit() {
        return storUnit_;
      }
      /**
       * <code>optional int32 stor_unit = 73 [default = 0];</code>
       *
       * <pre>
       ** 储存体积
       *占用
       *(立方米)
       * </pre>
       */
      public Builder setStorUnit(int value) {
        bitField2_ |= 0x00000100;
        storUnit_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 stor_unit = 73 [default = 0];</code>
       *
       * <pre>
       ** 储存体积
       *占用
       *(立方米)
       * </pre>
       */
      public Builder clearStorUnit() {
        bitField2_ = (bitField2_ & ~0x00000100);
        storUnit_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.game.server.data.SHIP_HULL_TECH)
    }

    static {
      defaultInstance = new SHIP_HULL_TECH(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.game.server.data.SHIP_HULL_TECH)
  }

  public interface SHIP_HULL_TECH_ARRAYOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.game.server.data.SHIP_HULL_TECH_ARRAY)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .com.game.server.data.SHIP_HULL_TECH items = 1;</code>
     */
    java.util.List<com.game.server.data.ShipHullTechData.SHIP_HULL_TECH> 
        getItemsList();
    /**
     * <code>repeated .com.game.server.data.SHIP_HULL_TECH items = 1;</code>
     */
    com.game.server.data.ShipHullTechData.SHIP_HULL_TECH getItems(int index);
    /**
     * <code>repeated .com.game.server.data.SHIP_HULL_TECH items = 1;</code>
     */
    int getItemsCount();
    /**
     * <code>repeated .com.game.server.data.SHIP_HULL_TECH items = 1;</code>
     */
    java.util.List<? extends com.game.server.data.ShipHullTechData.SHIP_HULL_TECHOrBuilder> 
        getItemsOrBuilderList();
    /**
     * <code>repeated .com.game.server.data.SHIP_HULL_TECH items = 1;</code>
     */
    com.game.server.data.ShipHullTechData.SHIP_HULL_TECHOrBuilder getItemsOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code com.game.server.data.SHIP_HULL_TECH_ARRAY}
   */
  public static final class SHIP_HULL_TECH_ARRAY extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.game.server.data.SHIP_HULL_TECH_ARRAY)
      SHIP_HULL_TECH_ARRAYOrBuilder {
    // Use SHIP_HULL_TECH_ARRAY.newBuilder() to construct.
    private SHIP_HULL_TECH_ARRAY(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SHIP_HULL_TECH_ARRAY(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SHIP_HULL_TECH_ARRAY defaultInstance;
    public static SHIP_HULL_TECH_ARRAY getDefaultInstance() {
      return defaultInstance;
    }

    public SHIP_HULL_TECH_ARRAY getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SHIP_HULL_TECH_ARRAY(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                items_ = new java.util.ArrayList<com.game.server.data.ShipHullTechData.SHIP_HULL_TECH>();
                mutable_bitField0_ |= 0x00000001;
              }
              items_.add(input.readMessage(com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          items_ = java.util.Collections.unmodifiableList(items_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.game.server.data.ShipHullTechData.internal_static_com_game_server_data_SHIP_HULL_TECH_ARRAY_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.game.server.data.ShipHullTechData.internal_static_com_game_server_data_SHIP_HULL_TECH_ARRAY_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.game.server.data.ShipHullTechData.SHIP_HULL_TECH_ARRAY.class, com.game.server.data.ShipHullTechData.SHIP_HULL_TECH_ARRAY.Builder.class);
    }

    public static com.google.protobuf.Parser<SHIP_HULL_TECH_ARRAY> PARSER =
        new com.google.protobuf.AbstractParser<SHIP_HULL_TECH_ARRAY>() {
      public SHIP_HULL_TECH_ARRAY parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SHIP_HULL_TECH_ARRAY(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<SHIP_HULL_TECH_ARRAY> getParserForType() {
      return PARSER;
    }

    public static final int ITEMS_FIELD_NUMBER = 1;
    private java.util.List<com.game.server.data.ShipHullTechData.SHIP_HULL_TECH> items_;
    /**
     * <code>repeated .com.game.server.data.SHIP_HULL_TECH items = 1;</code>
     */
    public java.util.List<com.game.server.data.ShipHullTechData.SHIP_HULL_TECH> getItemsList() {
      return items_;
    }
    /**
     * <code>repeated .com.game.server.data.SHIP_HULL_TECH items = 1;</code>
     */
    public java.util.List<? extends com.game.server.data.ShipHullTechData.SHIP_HULL_TECHOrBuilder> 
        getItemsOrBuilderList() {
      return items_;
    }
    /**
     * <code>repeated .com.game.server.data.SHIP_HULL_TECH items = 1;</code>
     */
    public int getItemsCount() {
      return items_.size();
    }
    /**
     * <code>repeated .com.game.server.data.SHIP_HULL_TECH items = 1;</code>
     */
    public com.game.server.data.ShipHullTechData.SHIP_HULL_TECH getItems(int index) {
      return items_.get(index);
    }
    /**
     * <code>repeated .com.game.server.data.SHIP_HULL_TECH items = 1;</code>
     */
    public com.game.server.data.ShipHullTechData.SHIP_HULL_TECHOrBuilder getItemsOrBuilder(
        int index) {
      return items_.get(index);
    }

    private void initFields() {
      items_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getItemsCount(); i++) {
        if (!getItems(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < items_.size(); i++) {
        output.writeMessage(1, items_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < items_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, items_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.game.server.data.ShipHullTechData.SHIP_HULL_TECH_ARRAY parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.game.server.data.ShipHullTechData.SHIP_HULL_TECH_ARRAY parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.game.server.data.ShipHullTechData.SHIP_HULL_TECH_ARRAY parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.game.server.data.ShipHullTechData.SHIP_HULL_TECH_ARRAY parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.game.server.data.ShipHullTechData.SHIP_HULL_TECH_ARRAY parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.game.server.data.ShipHullTechData.SHIP_HULL_TECH_ARRAY parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.game.server.data.ShipHullTechData.SHIP_HULL_TECH_ARRAY parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.game.server.data.ShipHullTechData.SHIP_HULL_TECH_ARRAY parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.game.server.data.ShipHullTechData.SHIP_HULL_TECH_ARRAY parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.game.server.data.ShipHullTechData.SHIP_HULL_TECH_ARRAY parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.game.server.data.ShipHullTechData.SHIP_HULL_TECH_ARRAY prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.game.server.data.SHIP_HULL_TECH_ARRAY}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.game.server.data.SHIP_HULL_TECH_ARRAY)
        com.game.server.data.ShipHullTechData.SHIP_HULL_TECH_ARRAYOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.game.server.data.ShipHullTechData.internal_static_com_game_server_data_SHIP_HULL_TECH_ARRAY_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.game.server.data.ShipHullTechData.internal_static_com_game_server_data_SHIP_HULL_TECH_ARRAY_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.game.server.data.ShipHullTechData.SHIP_HULL_TECH_ARRAY.class, com.game.server.data.ShipHullTechData.SHIP_HULL_TECH_ARRAY.Builder.class);
      }

      // Construct using com.game.server.data.ShipHullTechData.SHIP_HULL_TECH_ARRAY.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getItemsFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (itemsBuilder_ == null) {
          items_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          itemsBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.game.server.data.ShipHullTechData.internal_static_com_game_server_data_SHIP_HULL_TECH_ARRAY_descriptor;
      }

      public com.game.server.data.ShipHullTechData.SHIP_HULL_TECH_ARRAY getDefaultInstanceForType() {
        return com.game.server.data.ShipHullTechData.SHIP_HULL_TECH_ARRAY.getDefaultInstance();
      }

      public com.game.server.data.ShipHullTechData.SHIP_HULL_TECH_ARRAY build() {
        com.game.server.data.ShipHullTechData.SHIP_HULL_TECH_ARRAY result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.game.server.data.ShipHullTechData.SHIP_HULL_TECH_ARRAY buildPartial() {
        com.game.server.data.ShipHullTechData.SHIP_HULL_TECH_ARRAY result = new com.game.server.data.ShipHullTechData.SHIP_HULL_TECH_ARRAY(this);
        int from_bitField0_ = bitField0_;
        if (itemsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            items_ = java.util.Collections.unmodifiableList(items_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.items_ = items_;
        } else {
          result.items_ = itemsBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.game.server.data.ShipHullTechData.SHIP_HULL_TECH_ARRAY) {
          return mergeFrom((com.game.server.data.ShipHullTechData.SHIP_HULL_TECH_ARRAY)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.game.server.data.ShipHullTechData.SHIP_HULL_TECH_ARRAY other) {
        if (other == com.game.server.data.ShipHullTechData.SHIP_HULL_TECH_ARRAY.getDefaultInstance()) return this;
        if (itemsBuilder_ == null) {
          if (!other.items_.isEmpty()) {
            if (items_.isEmpty()) {
              items_ = other.items_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureItemsIsMutable();
              items_.addAll(other.items_);
            }
            onChanged();
          }
        } else {
          if (!other.items_.isEmpty()) {
            if (itemsBuilder_.isEmpty()) {
              itemsBuilder_.dispose();
              itemsBuilder_ = null;
              items_ = other.items_;
              bitField0_ = (bitField0_ & ~0x00000001);
              itemsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getItemsFieldBuilder() : null;
            } else {
              itemsBuilder_.addAllMessages(other.items_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getItemsCount(); i++) {
          if (!getItems(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.game.server.data.ShipHullTechData.SHIP_HULL_TECH_ARRAY parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.game.server.data.ShipHullTechData.SHIP_HULL_TECH_ARRAY) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<com.game.server.data.ShipHullTechData.SHIP_HULL_TECH> items_ =
        java.util.Collections.emptyList();
      private void ensureItemsIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          items_ = new java.util.ArrayList<com.game.server.data.ShipHullTechData.SHIP_HULL_TECH>(items_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.game.server.data.ShipHullTechData.SHIP_HULL_TECH, com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.Builder, com.game.server.data.ShipHullTechData.SHIP_HULL_TECHOrBuilder> itemsBuilder_;

      /**
       * <code>repeated .com.game.server.data.SHIP_HULL_TECH items = 1;</code>
       */
      public java.util.List<com.game.server.data.ShipHullTechData.SHIP_HULL_TECH> getItemsList() {
        if (itemsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(items_);
        } else {
          return itemsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .com.game.server.data.SHIP_HULL_TECH items = 1;</code>
       */
      public int getItemsCount() {
        if (itemsBuilder_ == null) {
          return items_.size();
        } else {
          return itemsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .com.game.server.data.SHIP_HULL_TECH items = 1;</code>
       */
      public com.game.server.data.ShipHullTechData.SHIP_HULL_TECH getItems(int index) {
        if (itemsBuilder_ == null) {
          return items_.get(index);
        } else {
          return itemsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .com.game.server.data.SHIP_HULL_TECH items = 1;</code>
       */
      public Builder setItems(
          int index, com.game.server.data.ShipHullTechData.SHIP_HULL_TECH value) {
        if (itemsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureItemsIsMutable();
          items_.set(index, value);
          onChanged();
        } else {
          itemsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.game.server.data.SHIP_HULL_TECH items = 1;</code>
       */
      public Builder setItems(
          int index, com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.Builder builderForValue) {
        if (itemsBuilder_ == null) {
          ensureItemsIsMutable();
          items_.set(index, builderForValue.build());
          onChanged();
        } else {
          itemsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.game.server.data.SHIP_HULL_TECH items = 1;</code>
       */
      public Builder addItems(com.game.server.data.ShipHullTechData.SHIP_HULL_TECH value) {
        if (itemsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureItemsIsMutable();
          items_.add(value);
          onChanged();
        } else {
          itemsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .com.game.server.data.SHIP_HULL_TECH items = 1;</code>
       */
      public Builder addItems(
          int index, com.game.server.data.ShipHullTechData.SHIP_HULL_TECH value) {
        if (itemsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureItemsIsMutable();
          items_.add(index, value);
          onChanged();
        } else {
          itemsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.game.server.data.SHIP_HULL_TECH items = 1;</code>
       */
      public Builder addItems(
          com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.Builder builderForValue) {
        if (itemsBuilder_ == null) {
          ensureItemsIsMutable();
          items_.add(builderForValue.build());
          onChanged();
        } else {
          itemsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.game.server.data.SHIP_HULL_TECH items = 1;</code>
       */
      public Builder addItems(
          int index, com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.Builder builderForValue) {
        if (itemsBuilder_ == null) {
          ensureItemsIsMutable();
          items_.add(index, builderForValue.build());
          onChanged();
        } else {
          itemsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.game.server.data.SHIP_HULL_TECH items = 1;</code>
       */
      public Builder addAllItems(
          java.lang.Iterable<? extends com.game.server.data.ShipHullTechData.SHIP_HULL_TECH> values) {
        if (itemsBuilder_ == null) {
          ensureItemsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, items_);
          onChanged();
        } else {
          itemsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .com.game.server.data.SHIP_HULL_TECH items = 1;</code>
       */
      public Builder clearItems() {
        if (itemsBuilder_ == null) {
          items_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          itemsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .com.game.server.data.SHIP_HULL_TECH items = 1;</code>
       */
      public Builder removeItems(int index) {
        if (itemsBuilder_ == null) {
          ensureItemsIsMutable();
          items_.remove(index);
          onChanged();
        } else {
          itemsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .com.game.server.data.SHIP_HULL_TECH items = 1;</code>
       */
      public com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.Builder getItemsBuilder(
          int index) {
        return getItemsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .com.game.server.data.SHIP_HULL_TECH items = 1;</code>
       */
      public com.game.server.data.ShipHullTechData.SHIP_HULL_TECHOrBuilder getItemsOrBuilder(
          int index) {
        if (itemsBuilder_ == null) {
          return items_.get(index);  } else {
          return itemsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .com.game.server.data.SHIP_HULL_TECH items = 1;</code>
       */
      public java.util.List<? extends com.game.server.data.ShipHullTechData.SHIP_HULL_TECHOrBuilder> 
           getItemsOrBuilderList() {
        if (itemsBuilder_ != null) {
          return itemsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(items_);
        }
      }
      /**
       * <code>repeated .com.game.server.data.SHIP_HULL_TECH items = 1;</code>
       */
      public com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.Builder addItemsBuilder() {
        return getItemsFieldBuilder().addBuilder(
            com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.getDefaultInstance());
      }
      /**
       * <code>repeated .com.game.server.data.SHIP_HULL_TECH items = 1;</code>
       */
      public com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.Builder addItemsBuilder(
          int index) {
        return getItemsFieldBuilder().addBuilder(
            index, com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.getDefaultInstance());
      }
      /**
       * <code>repeated .com.game.server.data.SHIP_HULL_TECH items = 1;</code>
       */
      public java.util.List<com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.Builder> 
           getItemsBuilderList() {
        return getItemsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.game.server.data.ShipHullTechData.SHIP_HULL_TECH, com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.Builder, com.game.server.data.ShipHullTechData.SHIP_HULL_TECHOrBuilder> 
          getItemsFieldBuilder() {
        if (itemsBuilder_ == null) {
          itemsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.game.server.data.ShipHullTechData.SHIP_HULL_TECH, com.game.server.data.ShipHullTechData.SHIP_HULL_TECH.Builder, com.game.server.data.ShipHullTechData.SHIP_HULL_TECHOrBuilder>(
                  items_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          items_ = null;
        }
        return itemsBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:com.game.server.data.SHIP_HULL_TECH_ARRAY)
    }

    static {
      defaultInstance = new SHIP_HULL_TECH_ARRAY(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.game.server.data.SHIP_HULL_TECH_ARRAY)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_game_server_data_SHIP_HULL_TECH_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_game_server_data_SHIP_HULL_TECH_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_game_server_data_SHIP_HULL_TECH_CostStruct_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_game_server_data_SHIP_HULL_TECH_CostStruct_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_game_server_data_SHIP_HULL_TECH_ARRAY_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_game_server_data_SHIP_HULL_TECH_ARRAY_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\037proto/ship_hull_tech_data.proto\022\024com.g" +
      "ame.server.data\"\374\r\n\016SHIP_HULL_TECH\022\r\n\002id" +
      "\030\001 \002(\005:\0010\022\023\n\010mat_type\030\002 \001(\005:\0010\022\024\n\thull_s" +
      "ize\030\003 \001(\005:\0010\022\024\n\thull_type\030\004 \001(\005:\0010\022\023\n\010hu" +
      "ll_lvl\030\005 \001(\005:\0010\022\033\n\021transl_table_name\030\006 \001" +
      "(\t:\000\022\023\n\thull_name\030\007 \001(\t:\000\022\021\n\006in_use\030\010 \001(" +
      "\005:\0010\022\027\n\014max_hull_lvl\030\t \001(\005:\0010\022\025\n\013prefab_" +
      "name\030\n \001(\t:\000\022\023\n\ticon_name\030\013 \001(\t:\000\022\016\n\004des" +
      "c\030\014 \001(\t:\000\022\023\n\010ui_order\030\r \001(\005:\0010\022\023\n\010ui_sca" +
      "le\030\016 \001(\005:\0010\022\030\n\rhull_slot_top\030\017 \001(\005:\0010\022\033\n",
      "\020hull_slot_bottom\030\020 \001(\005:\0010\022\031\n\016hull_slot_" +
      "left\030\021 \001(\005:\0010\022\032\n\017hull_slot_right\030\022 \001(\005:\001" +
      "0\022\032\n\017hull_slot_front\030\023 \001(\005:\0010\022\031\n\016hull_sl" +
      "ot_back\030\024 \001(\005:\0010\022\027\n\014bldg_lvl_req\030\025 \001(\005:\001" +
      "0\022\023\n\010ssp_cost\030\026 \001(\005:\0010\022\024\n\tfunc_type\030\027 \001(" +
      "\005:\0010\022\023\n\010crew_qty\030\030 \001(\005:\0010\022\017\n\004mass\030\031 \001(\005:" +
      "\0010\022\023\n\010strut_hp\030\032 \001(\005:\0010\022\025\n\nstrut_repr\030\033 " +
      "\001(\005:\0010\022\024\n\tshield_hp\030\034 \001(\005:\0010\022\026\n\013shield_r" +
      "epr\030\035 \001(\005:\0010\022\021\n\006em_res\030\036 \001(\005:\0010\022\024\n\ttherm" +
      "_res\030\037 \001(\005:\0010\022\022\n\007kin_res\030  \001(\005:\0010\022\022\n\007exp",
      "_res\030! \001(\005:\0010\022\024\n\ttgt_value\030\" \001(\005:\0010\022\024\n\te" +
      "va_value\030# \001(\005:\0010\022\023\n\010cruz_spd\030$ \001(\005:\0010\022\022" +
      "\n\007rev_spd\030% \001(\005:\0010\022\027\n\014neg_stat_res\030& \001(\005" +
      ":\0010\022\025\n\ndebuff_res\030\' \001(\005:\0010\022\026\n\013def_trait_" +
      "1\030( \001(\005:\0010\022\026\n\013def_trait_2\030) \001(\005:\0010\022\026\n\013de" +
      "f_trait_3\030* \001(\005:\0010\022\023\n\010wpn_type\030+ \001(\005:\0010\022" +
      "\026\n\013dmg_to_shld\030, \001(\005:\0010\022\024\n\tos_em_dmg\030- \001" +
      "(\005:\0010\022\027\n\014os_therm_dmg\030. \001(\005:\0010\022\025\n\nos_kin" +
      "_dmg\030/ \001(\005:\0010\022\025\n\nos_exp_dmg\0300 \001(\005:\0010\022\027\n\014" +
      "short_rng_ac\0301 \001(\005:\0010\022\025\n\nmid_rng_ac\0302 \001(",
      "\005:\0010\022\026\n\013long_rng_ac\0303 \001(\005:\0010\022\032\n\017short_rn" +
      "g_delay\0304 \001(\005:\0010\022\030\n\rmid_rng_delay\0305 \001(\005:" +
      "\0010\022\031\n\016long_rng_delay\0306 \001(\005:\0010\022\024\n\tburst_q" +
      "ty\0307 \001(\005:\0010\022\026\n\013burst_intvl\0308 \001(\005:\0010\022\027\n\014r" +
      "eload_intvl\0309 \001(\005:\0010\022\026\n\013wpn_trait_1\030: \001(" +
      "\005:\0010\022\026\n\013wpn_trait_2\030; \001(\005:\0010\022\026\n\013wpn_trai" +
      "t_3\030< \001(\005:\0010\022\021\n\006thrust\030= \001(\005:\0010\022\023\n\010fuel_" +
      "vol\030> \001(\005:\0010\022\031\n\016fuel_cons_rate\030? \001(\005:\0010\022" +
      "\025\n\nexpl_level\030@ \001(\005:\0010\022\023\n\010expl_spd\030A \001(\005" +
      ":\0010\022\033\n\020mining_spd_coeff\030B \001(\005:\0010\022\027\n\014payl",
      "oad_type\030C \001(\005:\0010\022\022\n\007payload\030D \001(\005:\0010\022\022\n" +
      "\007col_spd\030E \001(\005:\0010\022\024\n\ttime_cost\030F \001(\005:\0010\022" +
      "\023\n\010ele_cost\030G \001(\005:\0010\022C\n\ncost_table\030H \003(\013" +
      "2/.com.game.server.data.SHIP_HULL_TECH.C" +
      "ostStruct\022\024\n\tstor_unit\030I \001(\005:\0010\0325\n\nCostS" +
      "truct\022\022\n\007cost_id\030\001 \001(\005:\0010\022\023\n\010cost_qty\030\002 " +
      "\001(\005:\0010\"K\n\024SHIP_HULL_TECH_ARRAY\0223\n\005items\030" +
      "\001 \003(\0132$.com.game.server.data.SHIP_HULL_T" +
      "ECH"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_com_game_server_data_SHIP_HULL_TECH_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_com_game_server_data_SHIP_HULL_TECH_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_game_server_data_SHIP_HULL_TECH_descriptor,
        new java.lang.String[] { "Id", "MatType", "HullSize", "HullType", "HullLvl", "TranslTableName", "HullName", "InUse", "MaxHullLvl", "PrefabName", "IconName", "Desc", "UiOrder", "UiScale", "HullSlotTop", "HullSlotBottom", "HullSlotLeft", "HullSlotRight", "HullSlotFront", "HullSlotBack", "BldgLvlReq", "SspCost", "FuncType", "CrewQty", "Mass", "StrutHp", "StrutRepr", "ShieldHp", "ShieldRepr", "EmRes", "ThermRes", "KinRes", "ExpRes", "TgtValue", "EvaValue", "CruzSpd", "RevSpd", "NegStatRes", "DebuffRes", "DefTrait1", "DefTrait2", "DefTrait3", "WpnType", "DmgToShld", "OsEmDmg", "OsThermDmg", "OsKinDmg", "OsExpDmg", "ShortRngAc", "MidRngAc", "LongRngAc", "ShortRngDelay", "MidRngDelay", "LongRngDelay", "BurstQty", "BurstIntvl", "ReloadIntvl", "WpnTrait1", "WpnTrait2", "WpnTrait3", "Thrust", "FuelVol", "FuelConsRate", "ExplLevel", "ExplSpd", "MiningSpdCoeff", "PayloadType", "Payload", "ColSpd", "TimeCost", "EleCost", "CostTable", "StorUnit", });
    internal_static_com_game_server_data_SHIP_HULL_TECH_CostStruct_descriptor =
      internal_static_com_game_server_data_SHIP_HULL_TECH_descriptor.getNestedTypes().get(0);
    internal_static_com_game_server_data_SHIP_HULL_TECH_CostStruct_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_game_server_data_SHIP_HULL_TECH_CostStruct_descriptor,
        new java.lang.String[] { "CostId", "CostQty", });
    internal_static_com_game_server_data_SHIP_HULL_TECH_ARRAY_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_com_game_server_data_SHIP_HULL_TECH_ARRAY_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_game_server_data_SHIP_HULL_TECH_ARRAY_descriptor,
        new java.lang.String[] { "Items", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
