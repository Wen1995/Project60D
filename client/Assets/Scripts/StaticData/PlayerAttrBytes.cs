// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=null.  DO NOT EDIT!
#pragma warning disable
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace com.nkm.framework.resource.data {
  
  public static partial class PlayerAttrBytes {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    #endregion
    #region Extensions
    internal static readonly object Descriptor;
    static PlayerAttrBytes() {
      Descriptor = null;
    }
    #endregion
    
  }
  #region Messages
  public sealed partial class PLAYER_ATTR : pb::GeneratedMessageLite<PLAYER_ATTR, PLAYER_ATTR.Builder> {
    private PLAYER_ATTR() { }
    private static readonly PLAYER_ATTR defaultInstance = new PLAYER_ATTR().MakeReadOnly();
    private static readonly string[] _pLAYERATTRFieldNames = new string[] { "attr_k1", "attr_k2", "begin_num", "id", "lim_k1", "lim_k2", "lim_real", "player_attrkey", "rec_k1", "spc_k1", "spc_k2" };
    private static readonly uint[] _pLAYERATTRFieldTags = new uint[] { 32, 40, 24, 8, 64, 72, 56, 18, 48, 80, 88 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PLAYER_ATTR DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override PLAYER_ATTR DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PLAYER_ATTR ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int PlayerAttrkeyFieldNumber = 2;
    private bool hasPlayerAttrkey;
    private string playerAttrkey_ = "";
    public bool HasPlayerAttrkey {
      get { return hasPlayerAttrkey; }
    }
    public string PlayerAttrkey {
      get { return playerAttrkey_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int BeginNumFieldNumber = 3;
    private bool hasBeginNum;
    private int beginNum_;
    public bool HasBeginNum {
      get { return hasBeginNum; }
    }
    public int BeginNum {
      get { return beginNum_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int AttrK1FieldNumber = 4;
    private bool hasAttrK1;
    private int attrK1_;
    public bool HasAttrK1 {
      get { return hasAttrK1; }
    }
    public int AttrK1 {
      get { return attrK1_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int AttrK2FieldNumber = 5;
    private bool hasAttrK2;
    private int attrK2_;
    public bool HasAttrK2 {
      get { return hasAttrK2; }
    }
    public int AttrK2 {
      get { return attrK2_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int RecK1FieldNumber = 6;
    private bool hasRecK1;
    private int recK1_;
    public bool HasRecK1 {
      get { return hasRecK1; }
    }
    public int RecK1 {
      get { return recK1_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int LimRealFieldNumber = 7;
    private bool hasLimReal;
    private int limReal_;
    public bool HasLimReal {
      get { return hasLimReal; }
    }
    public int LimReal {
      get { return limReal_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int LimK1FieldNumber = 8;
    private bool hasLimK1;
    private int limK1_;
    public bool HasLimK1 {
      get { return hasLimK1; }
    }
    public int LimK1 {
      get { return limK1_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int LimK2FieldNumber = 9;
    private bool hasLimK2;
    private int limK2_;
    public bool HasLimK2 {
      get { return hasLimK2; }
    }
    public int LimK2 {
      get { return limK2_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int SpcK1FieldNumber = 10;
    private bool hasSpcK1;
    private int spcK1_;
    public bool HasSpcK1 {
      get { return hasSpcK1; }
    }
    public int SpcK1 {
      get { return spcK1_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int SpcK2FieldNumber = 11;
    private bool hasSpcK2;
    private int spcK2_;
    public bool HasSpcK2 {
      get { return hasSpcK2; }
    }
    public int SpcK2 {
      get { return spcK2_; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pLAYERATTRFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[3], Id);
      }
      if (hasPlayerAttrkey) {
        output.WriteString(2, field_names[7], PlayerAttrkey);
      }
      if (hasBeginNum) {
        output.WriteInt32(3, field_names[2], BeginNum);
      }
      if (hasAttrK1) {
        output.WriteInt32(4, field_names[0], AttrK1);
      }
      if (hasAttrK2) {
        output.WriteInt32(5, field_names[1], AttrK2);
      }
      if (hasRecK1) {
        output.WriteInt32(6, field_names[8], RecK1);
      }
      if (hasLimReal) {
        output.WriteInt32(7, field_names[6], LimReal);
      }
      if (hasLimK1) {
        output.WriteInt32(8, field_names[4], LimK1);
      }
      if (hasLimK2) {
        output.WriteInt32(9, field_names[5], LimK2);
      }
      if (hasSpcK1) {
        output.WriteInt32(10, field_names[9], SpcK1);
      }
      if (hasSpcK2) {
        output.WriteInt32(11, field_names[10], SpcK2);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
        }
        if (hasPlayerAttrkey) {
          size += pb::CodedOutputStream.ComputeStringSize(2, PlayerAttrkey);
        }
        if (hasBeginNum) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, BeginNum);
        }
        if (hasAttrK1) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, AttrK1);
        }
        if (hasAttrK2) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, AttrK2);
        }
        if (hasRecK1) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, RecK1);
        }
        if (hasLimReal) {
          size += pb::CodedOutputStream.ComputeInt32Size(7, LimReal);
        }
        if (hasLimK1) {
          size += pb::CodedOutputStream.ComputeInt32Size(8, LimK1);
        }
        if (hasLimK2) {
          size += pb::CodedOutputStream.ComputeInt32Size(9, LimK2);
        }
        if (hasSpcK1) {
          size += pb::CodedOutputStream.ComputeInt32Size(10, SpcK1);
        }
        if (hasSpcK2) {
          size += pb::CodedOutputStream.ComputeInt32Size(11, SpcK2);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasPlayerAttrkey) hash ^= playerAttrkey_.GetHashCode();
      if (hasBeginNum) hash ^= beginNum_.GetHashCode();
      if (hasAttrK1) hash ^= attrK1_.GetHashCode();
      if (hasAttrK2) hash ^= attrK2_.GetHashCode();
      if (hasRecK1) hash ^= recK1_.GetHashCode();
      if (hasLimReal) hash ^= limReal_.GetHashCode();
      if (hasLimK1) hash ^= limK1_.GetHashCode();
      if (hasLimK2) hash ^= limK2_.GetHashCode();
      if (hasSpcK1) hash ^= spcK1_.GetHashCode();
      if (hasSpcK2) hash ^= spcK2_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      PLAYER_ATTR other = obj as PLAYER_ATTR;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasPlayerAttrkey != other.hasPlayerAttrkey || (hasPlayerAttrkey && !playerAttrkey_.Equals(other.playerAttrkey_))) return false;
      if (hasBeginNum != other.hasBeginNum || (hasBeginNum && !beginNum_.Equals(other.beginNum_))) return false;
      if (hasAttrK1 != other.hasAttrK1 || (hasAttrK1 && !attrK1_.Equals(other.attrK1_))) return false;
      if (hasAttrK2 != other.hasAttrK2 || (hasAttrK2 && !attrK2_.Equals(other.attrK2_))) return false;
      if (hasRecK1 != other.hasRecK1 || (hasRecK1 && !recK1_.Equals(other.recK1_))) return false;
      if (hasLimReal != other.hasLimReal || (hasLimReal && !limReal_.Equals(other.limReal_))) return false;
      if (hasLimK1 != other.hasLimK1 || (hasLimK1 && !limK1_.Equals(other.limK1_))) return false;
      if (hasLimK2 != other.hasLimK2 || (hasLimK2 && !limK2_.Equals(other.limK2_))) return false;
      if (hasSpcK1 != other.hasSpcK1 || (hasSpcK1 && !spcK1_.Equals(other.spcK1_))) return false;
      if (hasSpcK2 != other.hasSpcK2 || (hasSpcK2 && !spcK2_.Equals(other.spcK2_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PLAYER_ATTR ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PLAYER_ATTR ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PLAYER_ATTR ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PLAYER_ATTR ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PLAYER_ATTR ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PLAYER_ATTR ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PLAYER_ATTR ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PLAYER_ATTR ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PLAYER_ATTR ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PLAYER_ATTR ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PLAYER_ATTR MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(PLAYER_ATTR prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<PLAYER_ATTR, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PLAYER_ATTR cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PLAYER_ATTR result;
      
      private PLAYER_ATTR PrepareBuilder() {
        if (resultIsReadOnly) {
          PLAYER_ATTR original = result;
          result = new PLAYER_ATTR();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PLAYER_ATTR MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override PLAYER_ATTR DefaultInstanceForType {
        get { return global::com.nkm.framework.resource.data.PLAYER_ATTR.DefaultInstance; }
      }
      
      public override PLAYER_ATTR BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is PLAYER_ATTR) {
          return MergeFrom((PLAYER_ATTR) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PLAYER_ATTR other) {
        if (other == global::com.nkm.framework.resource.data.PLAYER_ATTR.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasPlayerAttrkey) {
          PlayerAttrkey = other.PlayerAttrkey;
        }
        if (other.HasBeginNum) {
          BeginNum = other.BeginNum;
        }
        if (other.HasAttrK1) {
          AttrK1 = other.AttrK1;
        }
        if (other.HasAttrK2) {
          AttrK2 = other.AttrK2;
        }
        if (other.HasRecK1) {
          RecK1 = other.RecK1;
        }
        if (other.HasLimReal) {
          LimReal = other.LimReal;
        }
        if (other.HasLimK1) {
          LimK1 = other.LimK1;
        }
        if (other.HasLimK2) {
          LimK2 = other.LimK2;
        }
        if (other.HasSpcK1) {
          SpcK1 = other.SpcK1;
        }
        if (other.HasSpcK2) {
          SpcK2 = other.SpcK2;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pLAYERATTRFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pLAYERATTRFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 18: {
              result.hasPlayerAttrkey = input.ReadString(ref result.playerAttrkey_);
              break;
            }
            case 24: {
              result.hasBeginNum = input.ReadInt32(ref result.beginNum_);
              break;
            }
            case 32: {
              result.hasAttrK1 = input.ReadInt32(ref result.attrK1_);
              break;
            }
            case 40: {
              result.hasAttrK2 = input.ReadInt32(ref result.attrK2_);
              break;
            }
            case 48: {
              result.hasRecK1 = input.ReadInt32(ref result.recK1_);
              break;
            }
            case 56: {
              result.hasLimReal = input.ReadInt32(ref result.limReal_);
              break;
            }
            case 64: {
              result.hasLimK1 = input.ReadInt32(ref result.limK1_);
              break;
            }
            case 72: {
              result.hasLimK2 = input.ReadInt32(ref result.limK2_);
              break;
            }
            case 80: {
              result.hasSpcK1 = input.ReadInt32(ref result.spcK1_);
              break;
            }
            case 88: {
              result.hasSpcK2 = input.ReadInt32(ref result.spcK2_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasPlayerAttrkey {
        get { return result.hasPlayerAttrkey; }
      }
      public string PlayerAttrkey {
        get { return result.PlayerAttrkey; }
        set { SetPlayerAttrkey(value); }
      }
      public Builder SetPlayerAttrkey(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlayerAttrkey = true;
        result.playerAttrkey_ = value;
        return this;
      }
      public Builder ClearPlayerAttrkey() {
        PrepareBuilder();
        result.hasPlayerAttrkey = false;
        result.playerAttrkey_ = "";
        return this;
      }
      
      public bool HasBeginNum {
        get { return result.hasBeginNum; }
      }
      public int BeginNum {
        get { return result.BeginNum; }
        set { SetBeginNum(value); }
      }
      public Builder SetBeginNum(int value) {
        PrepareBuilder();
        result.hasBeginNum = true;
        result.beginNum_ = value;
        return this;
      }
      public Builder ClearBeginNum() {
        PrepareBuilder();
        result.hasBeginNum = false;
        result.beginNum_ = 0;
        return this;
      }
      
      public bool HasAttrK1 {
        get { return result.hasAttrK1; }
      }
      public int AttrK1 {
        get { return result.AttrK1; }
        set { SetAttrK1(value); }
      }
      public Builder SetAttrK1(int value) {
        PrepareBuilder();
        result.hasAttrK1 = true;
        result.attrK1_ = value;
        return this;
      }
      public Builder ClearAttrK1() {
        PrepareBuilder();
        result.hasAttrK1 = false;
        result.attrK1_ = 0;
        return this;
      }
      
      public bool HasAttrK2 {
        get { return result.hasAttrK2; }
      }
      public int AttrK2 {
        get { return result.AttrK2; }
        set { SetAttrK2(value); }
      }
      public Builder SetAttrK2(int value) {
        PrepareBuilder();
        result.hasAttrK2 = true;
        result.attrK2_ = value;
        return this;
      }
      public Builder ClearAttrK2() {
        PrepareBuilder();
        result.hasAttrK2 = false;
        result.attrK2_ = 0;
        return this;
      }
      
      public bool HasRecK1 {
        get { return result.hasRecK1; }
      }
      public int RecK1 {
        get { return result.RecK1; }
        set { SetRecK1(value); }
      }
      public Builder SetRecK1(int value) {
        PrepareBuilder();
        result.hasRecK1 = true;
        result.recK1_ = value;
        return this;
      }
      public Builder ClearRecK1() {
        PrepareBuilder();
        result.hasRecK1 = false;
        result.recK1_ = 0;
        return this;
      }
      
      public bool HasLimReal {
        get { return result.hasLimReal; }
      }
      public int LimReal {
        get { return result.LimReal; }
        set { SetLimReal(value); }
      }
      public Builder SetLimReal(int value) {
        PrepareBuilder();
        result.hasLimReal = true;
        result.limReal_ = value;
        return this;
      }
      public Builder ClearLimReal() {
        PrepareBuilder();
        result.hasLimReal = false;
        result.limReal_ = 0;
        return this;
      }
      
      public bool HasLimK1 {
        get { return result.hasLimK1; }
      }
      public int LimK1 {
        get { return result.LimK1; }
        set { SetLimK1(value); }
      }
      public Builder SetLimK1(int value) {
        PrepareBuilder();
        result.hasLimK1 = true;
        result.limK1_ = value;
        return this;
      }
      public Builder ClearLimK1() {
        PrepareBuilder();
        result.hasLimK1 = false;
        result.limK1_ = 0;
        return this;
      }
      
      public bool HasLimK2 {
        get { return result.hasLimK2; }
      }
      public int LimK2 {
        get { return result.LimK2; }
        set { SetLimK2(value); }
      }
      public Builder SetLimK2(int value) {
        PrepareBuilder();
        result.hasLimK2 = true;
        result.limK2_ = value;
        return this;
      }
      public Builder ClearLimK2() {
        PrepareBuilder();
        result.hasLimK2 = false;
        result.limK2_ = 0;
        return this;
      }
      
      public bool HasSpcK1 {
        get { return result.hasSpcK1; }
      }
      public int SpcK1 {
        get { return result.SpcK1; }
        set { SetSpcK1(value); }
      }
      public Builder SetSpcK1(int value) {
        PrepareBuilder();
        result.hasSpcK1 = true;
        result.spcK1_ = value;
        return this;
      }
      public Builder ClearSpcK1() {
        PrepareBuilder();
        result.hasSpcK1 = false;
        result.spcK1_ = 0;
        return this;
      }
      
      public bool HasSpcK2 {
        get { return result.hasSpcK2; }
      }
      public int SpcK2 {
        get { return result.SpcK2; }
        set { SetSpcK2(value); }
      }
      public Builder SetSpcK2(int value) {
        PrepareBuilder();
        result.hasSpcK2 = true;
        result.spcK2_ = value;
        return this;
      }
      public Builder ClearSpcK2() {
        PrepareBuilder();
        result.hasSpcK2 = false;
        result.spcK2_ = 0;
        return this;
      }
    }
    static PLAYER_ATTR() {
      object.ReferenceEquals(global::com.nkm.framework.resource.data.PlayerAttrBytes.Descriptor, null);
    }
  }
  
  public sealed partial class PLAYER_ATTR_ARRAY : pb::GeneratedMessageLite<PLAYER_ATTR_ARRAY, PLAYER_ATTR_ARRAY.Builder> {
    private PLAYER_ATTR_ARRAY() { }
    private static readonly PLAYER_ATTR_ARRAY defaultInstance = new PLAYER_ATTR_ARRAY().MakeReadOnly();
    private static readonly string[] _pLAYERATTRARRAYFieldNames = new string[] { "items" };
    private static readonly uint[] _pLAYERATTRARRAYFieldTags = new uint[] { 10 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PLAYER_ATTR_ARRAY DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override PLAYER_ATTR_ARRAY DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PLAYER_ATTR_ARRAY ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int ItemsFieldNumber = 1;
    private pbc::PopsicleList<global::com.nkm.framework.resource.data.PLAYER_ATTR> items_ = new pbc::PopsicleList<global::com.nkm.framework.resource.data.PLAYER_ATTR>();
    public scg::IList<global::com.nkm.framework.resource.data.PLAYER_ATTR> ItemsList {
      get { return items_; }
    }
    public int ItemsCount {
      get { return items_.Count; }
    }
    public global::com.nkm.framework.resource.data.PLAYER_ATTR GetItems(int index) {
      return items_[index];
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        foreach (global::com.nkm.framework.resource.data.PLAYER_ATTR element in ItemsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pLAYERATTRARRAYFieldNames;
      if (items_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], items_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::com.nkm.framework.resource.data.PLAYER_ATTR element in ItemsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      foreach(global::com.nkm.framework.resource.data.PLAYER_ATTR i in items_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      PLAYER_ATTR_ARRAY other = obj as PLAYER_ATTR_ARRAY;
      if (other == null) return false;
      if(items_.Count != other.items_.Count) return false;
      for(int ix=0; ix < items_.Count; ix++)
        if(!items_[ix].Equals(other.items_[ix])) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PLAYER_ATTR_ARRAY ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PLAYER_ATTR_ARRAY ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PLAYER_ATTR_ARRAY ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PLAYER_ATTR_ARRAY ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PLAYER_ATTR_ARRAY ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PLAYER_ATTR_ARRAY ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PLAYER_ATTR_ARRAY ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PLAYER_ATTR_ARRAY ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PLAYER_ATTR_ARRAY ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PLAYER_ATTR_ARRAY ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PLAYER_ATTR_ARRAY MakeReadOnly() {
      items_.MakeReadOnly();
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(PLAYER_ATTR_ARRAY prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<PLAYER_ATTR_ARRAY, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PLAYER_ATTR_ARRAY cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PLAYER_ATTR_ARRAY result;
      
      private PLAYER_ATTR_ARRAY PrepareBuilder() {
        if (resultIsReadOnly) {
          PLAYER_ATTR_ARRAY original = result;
          result = new PLAYER_ATTR_ARRAY();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PLAYER_ATTR_ARRAY MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override PLAYER_ATTR_ARRAY DefaultInstanceForType {
        get { return global::com.nkm.framework.resource.data.PLAYER_ATTR_ARRAY.DefaultInstance; }
      }
      
      public override PLAYER_ATTR_ARRAY BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is PLAYER_ATTR_ARRAY) {
          return MergeFrom((PLAYER_ATTR_ARRAY) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PLAYER_ATTR_ARRAY other) {
        if (other == global::com.nkm.framework.resource.data.PLAYER_ATTR_ARRAY.DefaultInstance) return this;
        PrepareBuilder();
        if (other.items_.Count != 0) {
          result.items_.Add(other.items_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pLAYERATTRARRAYFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pLAYERATTRARRAYFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.items_, global::com.nkm.framework.resource.data.PLAYER_ATTR.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public pbc::IPopsicleList<global::com.nkm.framework.resource.data.PLAYER_ATTR> ItemsList {
        get { return PrepareBuilder().items_; }
      }
      public int ItemsCount {
        get { return result.ItemsCount; }
      }
      public global::com.nkm.framework.resource.data.PLAYER_ATTR GetItems(int index) {
        return result.GetItems(index);
      }
      public Builder SetItems(int index, global::com.nkm.framework.resource.data.PLAYER_ATTR value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.items_[index] = value;
        return this;
      }
      public Builder SetItems(int index, global::com.nkm.framework.resource.data.PLAYER_ATTR.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.items_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddItems(global::com.nkm.framework.resource.data.PLAYER_ATTR value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.items_.Add(value);
        return this;
      }
      public Builder AddItems(global::com.nkm.framework.resource.data.PLAYER_ATTR.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.items_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeItems(scg::IEnumerable<global::com.nkm.framework.resource.data.PLAYER_ATTR> values) {
        PrepareBuilder();
        result.items_.Add(values);
        return this;
      }
      public Builder ClearItems() {
        PrepareBuilder();
        result.items_.Clear();
        return this;
      }
    }
    static PLAYER_ATTR_ARRAY() {
      object.ReferenceEquals(global::com.nkm.framework.resource.data.PlayerAttrBytes.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
#pragma warning restore
