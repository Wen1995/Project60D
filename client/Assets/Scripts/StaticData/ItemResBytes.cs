// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=null.  DO NOT EDIT!
#pragma warning disable
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace com.game.framework.resource.data {
  
  public static partial class ItemResBytes {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    #endregion
    #region Extensions
    internal static readonly object Descriptor;
    static ItemResBytes() {
      Descriptor = null;
    }
    #endregion
    
  }
  #region Messages
  public sealed partial class ITEM_RES : pb::GeneratedMessageLite<ITEM_RES, ITEM_RES.Builder> {
    private ITEM_RES() { }
    private static readonly ITEM_RES defaultInstance = new ITEM_RES().MakeReadOnly();
    private static readonly string[] _iTEMRESFieldNames = new string[] { "desc", "gold_conv", "health_rec", "healthrec_lim", "hp_rec", "icon_name", "id", "if_available", "item_lvl", "key_name", "min_name", "mood_rec", "moodrec_lim", "serviceable_rate", "small_icon_name", "starv_rec", "stor_unit", "water_rec" };
    private static readonly uint[] _iTEMRESFieldTags = new uint[] { 66, 72, 120, 128, 96, 50, 8, 88, 16, 34, 26, 136, 144, 40, 58, 104, 80, 112 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ITEM_RES DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override ITEM_RES DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ITEM_RES ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int ItemLvlFieldNumber = 2;
    private bool hasItemLvl;
    private int itemLvl_;
    public bool HasItemLvl {
      get { return hasItemLvl; }
    }
    public int ItemLvl {
      get { return itemLvl_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int MinNameFieldNumber = 3;
    private bool hasMinName;
    private string minName_ = "";
    public bool HasMinName {
      get { return hasMinName; }
    }
    public string MinName {
      get { return minName_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int KeyNameFieldNumber = 4;
    private bool hasKeyName;
    private string keyName_ = "";
    public bool HasKeyName {
      get { return hasKeyName; }
    }
    public string KeyName {
      get { return keyName_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int ServiceableRateFieldNumber = 5;
    private bool hasServiceableRate;
    private int serviceableRate_;
    public bool HasServiceableRate {
      get { return hasServiceableRate; }
    }
    public int ServiceableRate {
      get { return serviceableRate_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int IconNameFieldNumber = 6;
    private bool hasIconName;
    private string iconName_ = "";
    public bool HasIconName {
      get { return hasIconName; }
    }
    public string IconName {
      get { return iconName_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int SmallIconNameFieldNumber = 7;
    private bool hasSmallIconName;
    private string smallIconName_ = "";
    public bool HasSmallIconName {
      get { return hasSmallIconName; }
    }
    public string SmallIconName {
      get { return smallIconName_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int DescFieldNumber = 8;
    private bool hasDesc;
    private string desc_ = "";
    public bool HasDesc {
      get { return hasDesc; }
    }
    public string Desc {
      get { return desc_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int GoldConvFieldNumber = 9;
    private bool hasGoldConv;
    private int goldConv_;
    public bool HasGoldConv {
      get { return hasGoldConv; }
    }
    public int GoldConv {
      get { return goldConv_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int StorUnitFieldNumber = 10;
    private bool hasStorUnit;
    private int storUnit_;
    public bool HasStorUnit {
      get { return hasStorUnit; }
    }
    public int StorUnit {
      get { return storUnit_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int IfAvailableFieldNumber = 11;
    private bool hasIfAvailable;
    private int ifAvailable_;
    public bool HasIfAvailable {
      get { return hasIfAvailable; }
    }
    public int IfAvailable {
      get { return ifAvailable_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int HpRecFieldNumber = 12;
    private bool hasHpRec;
    private int hpRec_;
    public bool HasHpRec {
      get { return hasHpRec; }
    }
    public int HpRec {
      get { return hpRec_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int StarvRecFieldNumber = 13;
    private bool hasStarvRec;
    private int starvRec_;
    public bool HasStarvRec {
      get { return hasStarvRec; }
    }
    public int StarvRec {
      get { return starvRec_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int WaterRecFieldNumber = 14;
    private bool hasWaterRec;
    private int waterRec_;
    public bool HasWaterRec {
      get { return hasWaterRec; }
    }
    public int WaterRec {
      get { return waterRec_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int HealthRecFieldNumber = 15;
    private bool hasHealthRec;
    private int healthRec_;
    public bool HasHealthRec {
      get { return hasHealthRec; }
    }
    public int HealthRec {
      get { return healthRec_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int HealthrecLimFieldNumber = 16;
    private bool hasHealthrecLim;
    private int healthrecLim_;
    public bool HasHealthrecLim {
      get { return hasHealthrecLim; }
    }
    public int HealthrecLim {
      get { return healthrecLim_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int MoodRecFieldNumber = 17;
    private bool hasMoodRec;
    private int moodRec_;
    public bool HasMoodRec {
      get { return hasMoodRec; }
    }
    public int MoodRec {
      get { return moodRec_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int MoodrecLimFieldNumber = 18;
    private bool hasMoodrecLim;
    private int moodrecLim_;
    public bool HasMoodrecLim {
      get { return hasMoodrecLim; }
    }
    public int MoodrecLim {
      get { return moodrecLim_; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _iTEMRESFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[6], Id);
      }
      if (hasItemLvl) {
        output.WriteInt32(2, field_names[8], ItemLvl);
      }
      if (hasMinName) {
        output.WriteString(3, field_names[10], MinName);
      }
      if (hasKeyName) {
        output.WriteString(4, field_names[9], KeyName);
      }
      if (hasServiceableRate) {
        output.WriteInt32(5, field_names[13], ServiceableRate);
      }
      if (hasIconName) {
        output.WriteString(6, field_names[5], IconName);
      }
      if (hasSmallIconName) {
        output.WriteString(7, field_names[14], SmallIconName);
      }
      if (hasDesc) {
        output.WriteString(8, field_names[0], Desc);
      }
      if (hasGoldConv) {
        output.WriteInt32(9, field_names[1], GoldConv);
      }
      if (hasStorUnit) {
        output.WriteInt32(10, field_names[16], StorUnit);
      }
      if (hasIfAvailable) {
        output.WriteInt32(11, field_names[7], IfAvailable);
      }
      if (hasHpRec) {
        output.WriteInt32(12, field_names[4], HpRec);
      }
      if (hasStarvRec) {
        output.WriteInt32(13, field_names[15], StarvRec);
      }
      if (hasWaterRec) {
        output.WriteInt32(14, field_names[17], WaterRec);
      }
      if (hasHealthRec) {
        output.WriteInt32(15, field_names[2], HealthRec);
      }
      if (hasHealthrecLim) {
        output.WriteInt32(16, field_names[3], HealthrecLim);
      }
      if (hasMoodRec) {
        output.WriteInt32(17, field_names[11], MoodRec);
      }
      if (hasMoodrecLim) {
        output.WriteInt32(18, field_names[12], MoodrecLim);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
        }
        if (hasItemLvl) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, ItemLvl);
        }
        if (hasMinName) {
          size += pb::CodedOutputStream.ComputeStringSize(3, MinName);
        }
        if (hasKeyName) {
          size += pb::CodedOutputStream.ComputeStringSize(4, KeyName);
        }
        if (hasServiceableRate) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, ServiceableRate);
        }
        if (hasIconName) {
          size += pb::CodedOutputStream.ComputeStringSize(6, IconName);
        }
        if (hasSmallIconName) {
          size += pb::CodedOutputStream.ComputeStringSize(7, SmallIconName);
        }
        if (hasDesc) {
          size += pb::CodedOutputStream.ComputeStringSize(8, Desc);
        }
        if (hasGoldConv) {
          size += pb::CodedOutputStream.ComputeInt32Size(9, GoldConv);
        }
        if (hasStorUnit) {
          size += pb::CodedOutputStream.ComputeInt32Size(10, StorUnit);
        }
        if (hasIfAvailable) {
          size += pb::CodedOutputStream.ComputeInt32Size(11, IfAvailable);
        }
        if (hasHpRec) {
          size += pb::CodedOutputStream.ComputeInt32Size(12, HpRec);
        }
        if (hasStarvRec) {
          size += pb::CodedOutputStream.ComputeInt32Size(13, StarvRec);
        }
        if (hasWaterRec) {
          size += pb::CodedOutputStream.ComputeInt32Size(14, WaterRec);
        }
        if (hasHealthRec) {
          size += pb::CodedOutputStream.ComputeInt32Size(15, HealthRec);
        }
        if (hasHealthrecLim) {
          size += pb::CodedOutputStream.ComputeInt32Size(16, HealthrecLim);
        }
        if (hasMoodRec) {
          size += pb::CodedOutputStream.ComputeInt32Size(17, MoodRec);
        }
        if (hasMoodrecLim) {
          size += pb::CodedOutputStream.ComputeInt32Size(18, MoodrecLim);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasItemLvl) hash ^= itemLvl_.GetHashCode();
      if (hasMinName) hash ^= minName_.GetHashCode();
      if (hasKeyName) hash ^= keyName_.GetHashCode();
      if (hasServiceableRate) hash ^= serviceableRate_.GetHashCode();
      if (hasIconName) hash ^= iconName_.GetHashCode();
      if (hasSmallIconName) hash ^= smallIconName_.GetHashCode();
      if (hasDesc) hash ^= desc_.GetHashCode();
      if (hasGoldConv) hash ^= goldConv_.GetHashCode();
      if (hasStorUnit) hash ^= storUnit_.GetHashCode();
      if (hasIfAvailable) hash ^= ifAvailable_.GetHashCode();
      if (hasHpRec) hash ^= hpRec_.GetHashCode();
      if (hasStarvRec) hash ^= starvRec_.GetHashCode();
      if (hasWaterRec) hash ^= waterRec_.GetHashCode();
      if (hasHealthRec) hash ^= healthRec_.GetHashCode();
      if (hasHealthrecLim) hash ^= healthrecLim_.GetHashCode();
      if (hasMoodRec) hash ^= moodRec_.GetHashCode();
      if (hasMoodrecLim) hash ^= moodrecLim_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      ITEM_RES other = obj as ITEM_RES;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasItemLvl != other.hasItemLvl || (hasItemLvl && !itemLvl_.Equals(other.itemLvl_))) return false;
      if (hasMinName != other.hasMinName || (hasMinName && !minName_.Equals(other.minName_))) return false;
      if (hasKeyName != other.hasKeyName || (hasKeyName && !keyName_.Equals(other.keyName_))) return false;
      if (hasServiceableRate != other.hasServiceableRate || (hasServiceableRate && !serviceableRate_.Equals(other.serviceableRate_))) return false;
      if (hasIconName != other.hasIconName || (hasIconName && !iconName_.Equals(other.iconName_))) return false;
      if (hasSmallIconName != other.hasSmallIconName || (hasSmallIconName && !smallIconName_.Equals(other.smallIconName_))) return false;
      if (hasDesc != other.hasDesc || (hasDesc && !desc_.Equals(other.desc_))) return false;
      if (hasGoldConv != other.hasGoldConv || (hasGoldConv && !goldConv_.Equals(other.goldConv_))) return false;
      if (hasStorUnit != other.hasStorUnit || (hasStorUnit && !storUnit_.Equals(other.storUnit_))) return false;
      if (hasIfAvailable != other.hasIfAvailable || (hasIfAvailable && !ifAvailable_.Equals(other.ifAvailable_))) return false;
      if (hasHpRec != other.hasHpRec || (hasHpRec && !hpRec_.Equals(other.hpRec_))) return false;
      if (hasStarvRec != other.hasStarvRec || (hasStarvRec && !starvRec_.Equals(other.starvRec_))) return false;
      if (hasWaterRec != other.hasWaterRec || (hasWaterRec && !waterRec_.Equals(other.waterRec_))) return false;
      if (hasHealthRec != other.hasHealthRec || (hasHealthRec && !healthRec_.Equals(other.healthRec_))) return false;
      if (hasHealthrecLim != other.hasHealthrecLim || (hasHealthrecLim && !healthrecLim_.Equals(other.healthrecLim_))) return false;
      if (hasMoodRec != other.hasMoodRec || (hasMoodRec && !moodRec_.Equals(other.moodRec_))) return false;
      if (hasMoodrecLim != other.hasMoodrecLim || (hasMoodrecLim && !moodrecLim_.Equals(other.moodrecLim_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ITEM_RES ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ITEM_RES ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ITEM_RES ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ITEM_RES ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ITEM_RES ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ITEM_RES ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ITEM_RES ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ITEM_RES ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ITEM_RES ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ITEM_RES ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ITEM_RES MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(ITEM_RES prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<ITEM_RES, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ITEM_RES cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ITEM_RES result;
      
      private ITEM_RES PrepareBuilder() {
        if (resultIsReadOnly) {
          ITEM_RES original = result;
          result = new ITEM_RES();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ITEM_RES MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override ITEM_RES DefaultInstanceForType {
        get { return global::com.game.framework.resource.data.ITEM_RES.DefaultInstance; }
      }
      
      public override ITEM_RES BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is ITEM_RES) {
          return MergeFrom((ITEM_RES) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ITEM_RES other) {
        if (other == global::com.game.framework.resource.data.ITEM_RES.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasItemLvl) {
          ItemLvl = other.ItemLvl;
        }
        if (other.HasMinName) {
          MinName = other.MinName;
        }
        if (other.HasKeyName) {
          KeyName = other.KeyName;
        }
        if (other.HasServiceableRate) {
          ServiceableRate = other.ServiceableRate;
        }
        if (other.HasIconName) {
          IconName = other.IconName;
        }
        if (other.HasSmallIconName) {
          SmallIconName = other.SmallIconName;
        }
        if (other.HasDesc) {
          Desc = other.Desc;
        }
        if (other.HasGoldConv) {
          GoldConv = other.GoldConv;
        }
        if (other.HasStorUnit) {
          StorUnit = other.StorUnit;
        }
        if (other.HasIfAvailable) {
          IfAvailable = other.IfAvailable;
        }
        if (other.HasHpRec) {
          HpRec = other.HpRec;
        }
        if (other.HasStarvRec) {
          StarvRec = other.StarvRec;
        }
        if (other.HasWaterRec) {
          WaterRec = other.WaterRec;
        }
        if (other.HasHealthRec) {
          HealthRec = other.HealthRec;
        }
        if (other.HasHealthrecLim) {
          HealthrecLim = other.HealthrecLim;
        }
        if (other.HasMoodRec) {
          MoodRec = other.MoodRec;
        }
        if (other.HasMoodrecLim) {
          MoodrecLim = other.MoodrecLim;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_iTEMRESFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _iTEMRESFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 16: {
              result.hasItemLvl = input.ReadInt32(ref result.itemLvl_);
              break;
            }
            case 26: {
              result.hasMinName = input.ReadString(ref result.minName_);
              break;
            }
            case 34: {
              result.hasKeyName = input.ReadString(ref result.keyName_);
              break;
            }
            case 40: {
              result.hasServiceableRate = input.ReadInt32(ref result.serviceableRate_);
              break;
            }
            case 50: {
              result.hasIconName = input.ReadString(ref result.iconName_);
              break;
            }
            case 58: {
              result.hasSmallIconName = input.ReadString(ref result.smallIconName_);
              break;
            }
            case 66: {
              result.hasDesc = input.ReadString(ref result.desc_);
              break;
            }
            case 72: {
              result.hasGoldConv = input.ReadInt32(ref result.goldConv_);
              break;
            }
            case 80: {
              result.hasStorUnit = input.ReadInt32(ref result.storUnit_);
              break;
            }
            case 88: {
              result.hasIfAvailable = input.ReadInt32(ref result.ifAvailable_);
              break;
            }
            case 96: {
              result.hasHpRec = input.ReadInt32(ref result.hpRec_);
              break;
            }
            case 104: {
              result.hasStarvRec = input.ReadInt32(ref result.starvRec_);
              break;
            }
            case 112: {
              result.hasWaterRec = input.ReadInt32(ref result.waterRec_);
              break;
            }
            case 120: {
              result.hasHealthRec = input.ReadInt32(ref result.healthRec_);
              break;
            }
            case 128: {
              result.hasHealthrecLim = input.ReadInt32(ref result.healthrecLim_);
              break;
            }
            case 136: {
              result.hasMoodRec = input.ReadInt32(ref result.moodRec_);
              break;
            }
            case 144: {
              result.hasMoodrecLim = input.ReadInt32(ref result.moodrecLim_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasItemLvl {
        get { return result.hasItemLvl; }
      }
      public int ItemLvl {
        get { return result.ItemLvl; }
        set { SetItemLvl(value); }
      }
      public Builder SetItemLvl(int value) {
        PrepareBuilder();
        result.hasItemLvl = true;
        result.itemLvl_ = value;
        return this;
      }
      public Builder ClearItemLvl() {
        PrepareBuilder();
        result.hasItemLvl = false;
        result.itemLvl_ = 0;
        return this;
      }
      
      public bool HasMinName {
        get { return result.hasMinName; }
      }
      public string MinName {
        get { return result.MinName; }
        set { SetMinName(value); }
      }
      public Builder SetMinName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMinName = true;
        result.minName_ = value;
        return this;
      }
      public Builder ClearMinName() {
        PrepareBuilder();
        result.hasMinName = false;
        result.minName_ = "";
        return this;
      }
      
      public bool HasKeyName {
        get { return result.hasKeyName; }
      }
      public string KeyName {
        get { return result.KeyName; }
        set { SetKeyName(value); }
      }
      public Builder SetKeyName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasKeyName = true;
        result.keyName_ = value;
        return this;
      }
      public Builder ClearKeyName() {
        PrepareBuilder();
        result.hasKeyName = false;
        result.keyName_ = "";
        return this;
      }
      
      public bool HasServiceableRate {
        get { return result.hasServiceableRate; }
      }
      public int ServiceableRate {
        get { return result.ServiceableRate; }
        set { SetServiceableRate(value); }
      }
      public Builder SetServiceableRate(int value) {
        PrepareBuilder();
        result.hasServiceableRate = true;
        result.serviceableRate_ = value;
        return this;
      }
      public Builder ClearServiceableRate() {
        PrepareBuilder();
        result.hasServiceableRate = false;
        result.serviceableRate_ = 0;
        return this;
      }
      
      public bool HasIconName {
        get { return result.hasIconName; }
      }
      public string IconName {
        get { return result.IconName; }
        set { SetIconName(value); }
      }
      public Builder SetIconName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasIconName = true;
        result.iconName_ = value;
        return this;
      }
      public Builder ClearIconName() {
        PrepareBuilder();
        result.hasIconName = false;
        result.iconName_ = "";
        return this;
      }
      
      public bool HasSmallIconName {
        get { return result.hasSmallIconName; }
      }
      public string SmallIconName {
        get { return result.SmallIconName; }
        set { SetSmallIconName(value); }
      }
      public Builder SetSmallIconName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSmallIconName = true;
        result.smallIconName_ = value;
        return this;
      }
      public Builder ClearSmallIconName() {
        PrepareBuilder();
        result.hasSmallIconName = false;
        result.smallIconName_ = "";
        return this;
      }
      
      public bool HasDesc {
        get { return result.hasDesc; }
      }
      public string Desc {
        get { return result.Desc; }
        set { SetDesc(value); }
      }
      public Builder SetDesc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDesc = true;
        result.desc_ = value;
        return this;
      }
      public Builder ClearDesc() {
        PrepareBuilder();
        result.hasDesc = false;
        result.desc_ = "";
        return this;
      }
      
      public bool HasGoldConv {
        get { return result.hasGoldConv; }
      }
      public int GoldConv {
        get { return result.GoldConv; }
        set { SetGoldConv(value); }
      }
      public Builder SetGoldConv(int value) {
        PrepareBuilder();
        result.hasGoldConv = true;
        result.goldConv_ = value;
        return this;
      }
      public Builder ClearGoldConv() {
        PrepareBuilder();
        result.hasGoldConv = false;
        result.goldConv_ = 0;
        return this;
      }
      
      public bool HasStorUnit {
        get { return result.hasStorUnit; }
      }
      public int StorUnit {
        get { return result.StorUnit; }
        set { SetStorUnit(value); }
      }
      public Builder SetStorUnit(int value) {
        PrepareBuilder();
        result.hasStorUnit = true;
        result.storUnit_ = value;
        return this;
      }
      public Builder ClearStorUnit() {
        PrepareBuilder();
        result.hasStorUnit = false;
        result.storUnit_ = 0;
        return this;
      }
      
      public bool HasIfAvailable {
        get { return result.hasIfAvailable; }
      }
      public int IfAvailable {
        get { return result.IfAvailable; }
        set { SetIfAvailable(value); }
      }
      public Builder SetIfAvailable(int value) {
        PrepareBuilder();
        result.hasIfAvailable = true;
        result.ifAvailable_ = value;
        return this;
      }
      public Builder ClearIfAvailable() {
        PrepareBuilder();
        result.hasIfAvailable = false;
        result.ifAvailable_ = 0;
        return this;
      }
      
      public bool HasHpRec {
        get { return result.hasHpRec; }
      }
      public int HpRec {
        get { return result.HpRec; }
        set { SetHpRec(value); }
      }
      public Builder SetHpRec(int value) {
        PrepareBuilder();
        result.hasHpRec = true;
        result.hpRec_ = value;
        return this;
      }
      public Builder ClearHpRec() {
        PrepareBuilder();
        result.hasHpRec = false;
        result.hpRec_ = 0;
        return this;
      }
      
      public bool HasStarvRec {
        get { return result.hasStarvRec; }
      }
      public int StarvRec {
        get { return result.StarvRec; }
        set { SetStarvRec(value); }
      }
      public Builder SetStarvRec(int value) {
        PrepareBuilder();
        result.hasStarvRec = true;
        result.starvRec_ = value;
        return this;
      }
      public Builder ClearStarvRec() {
        PrepareBuilder();
        result.hasStarvRec = false;
        result.starvRec_ = 0;
        return this;
      }
      
      public bool HasWaterRec {
        get { return result.hasWaterRec; }
      }
      public int WaterRec {
        get { return result.WaterRec; }
        set { SetWaterRec(value); }
      }
      public Builder SetWaterRec(int value) {
        PrepareBuilder();
        result.hasWaterRec = true;
        result.waterRec_ = value;
        return this;
      }
      public Builder ClearWaterRec() {
        PrepareBuilder();
        result.hasWaterRec = false;
        result.waterRec_ = 0;
        return this;
      }
      
      public bool HasHealthRec {
        get { return result.hasHealthRec; }
      }
      public int HealthRec {
        get { return result.HealthRec; }
        set { SetHealthRec(value); }
      }
      public Builder SetHealthRec(int value) {
        PrepareBuilder();
        result.hasHealthRec = true;
        result.healthRec_ = value;
        return this;
      }
      public Builder ClearHealthRec() {
        PrepareBuilder();
        result.hasHealthRec = false;
        result.healthRec_ = 0;
        return this;
      }
      
      public bool HasHealthrecLim {
        get { return result.hasHealthrecLim; }
      }
      public int HealthrecLim {
        get { return result.HealthrecLim; }
        set { SetHealthrecLim(value); }
      }
      public Builder SetHealthrecLim(int value) {
        PrepareBuilder();
        result.hasHealthrecLim = true;
        result.healthrecLim_ = value;
        return this;
      }
      public Builder ClearHealthrecLim() {
        PrepareBuilder();
        result.hasHealthrecLim = false;
        result.healthrecLim_ = 0;
        return this;
      }
      
      public bool HasMoodRec {
        get { return result.hasMoodRec; }
      }
      public int MoodRec {
        get { return result.MoodRec; }
        set { SetMoodRec(value); }
      }
      public Builder SetMoodRec(int value) {
        PrepareBuilder();
        result.hasMoodRec = true;
        result.moodRec_ = value;
        return this;
      }
      public Builder ClearMoodRec() {
        PrepareBuilder();
        result.hasMoodRec = false;
        result.moodRec_ = 0;
        return this;
      }
      
      public bool HasMoodrecLim {
        get { return result.hasMoodrecLim; }
      }
      public int MoodrecLim {
        get { return result.MoodrecLim; }
        set { SetMoodrecLim(value); }
      }
      public Builder SetMoodrecLim(int value) {
        PrepareBuilder();
        result.hasMoodrecLim = true;
        result.moodrecLim_ = value;
        return this;
      }
      public Builder ClearMoodrecLim() {
        PrepareBuilder();
        result.hasMoodrecLim = false;
        result.moodrecLim_ = 0;
        return this;
      }
    }
    static ITEM_RES() {
      object.ReferenceEquals(global::com.game.framework.resource.data.ItemResBytes.Descriptor, null);
    }
  }
  
  public sealed partial class ITEM_RES_ARRAY : pb::GeneratedMessageLite<ITEM_RES_ARRAY, ITEM_RES_ARRAY.Builder> {
    private ITEM_RES_ARRAY() { }
    private static readonly ITEM_RES_ARRAY defaultInstance = new ITEM_RES_ARRAY().MakeReadOnly();
    private static readonly string[] _iTEMRESARRAYFieldNames = new string[] { "items" };
    private static readonly uint[] _iTEMRESARRAYFieldTags = new uint[] { 10 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ITEM_RES_ARRAY DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override ITEM_RES_ARRAY DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ITEM_RES_ARRAY ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int ItemsFieldNumber = 1;
    private pbc::PopsicleList<global::com.game.framework.resource.data.ITEM_RES> items_ = new pbc::PopsicleList<global::com.game.framework.resource.data.ITEM_RES>();
    public scg::IList<global::com.game.framework.resource.data.ITEM_RES> ItemsList {
      get { return items_; }
    }
    public int ItemsCount {
      get { return items_.Count; }
    }
    public global::com.game.framework.resource.data.ITEM_RES GetItems(int index) {
      return items_[index];
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        foreach (global::com.game.framework.resource.data.ITEM_RES element in ItemsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _iTEMRESARRAYFieldNames;
      if (items_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], items_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::com.game.framework.resource.data.ITEM_RES element in ItemsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      foreach(global::com.game.framework.resource.data.ITEM_RES i in items_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      ITEM_RES_ARRAY other = obj as ITEM_RES_ARRAY;
      if (other == null) return false;
      if(items_.Count != other.items_.Count) return false;
      for(int ix=0; ix < items_.Count; ix++)
        if(!items_[ix].Equals(other.items_[ix])) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ITEM_RES_ARRAY ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ITEM_RES_ARRAY ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ITEM_RES_ARRAY ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ITEM_RES_ARRAY ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ITEM_RES_ARRAY ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ITEM_RES_ARRAY ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ITEM_RES_ARRAY ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ITEM_RES_ARRAY ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ITEM_RES_ARRAY ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ITEM_RES_ARRAY ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ITEM_RES_ARRAY MakeReadOnly() {
      items_.MakeReadOnly();
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(ITEM_RES_ARRAY prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<ITEM_RES_ARRAY, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ITEM_RES_ARRAY cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ITEM_RES_ARRAY result;
      
      private ITEM_RES_ARRAY PrepareBuilder() {
        if (resultIsReadOnly) {
          ITEM_RES_ARRAY original = result;
          result = new ITEM_RES_ARRAY();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ITEM_RES_ARRAY MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override ITEM_RES_ARRAY DefaultInstanceForType {
        get { return global::com.game.framework.resource.data.ITEM_RES_ARRAY.DefaultInstance; }
      }
      
      public override ITEM_RES_ARRAY BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is ITEM_RES_ARRAY) {
          return MergeFrom((ITEM_RES_ARRAY) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ITEM_RES_ARRAY other) {
        if (other == global::com.game.framework.resource.data.ITEM_RES_ARRAY.DefaultInstance) return this;
        PrepareBuilder();
        if (other.items_.Count != 0) {
          result.items_.Add(other.items_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_iTEMRESARRAYFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _iTEMRESARRAYFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.items_, global::com.game.framework.resource.data.ITEM_RES.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public pbc::IPopsicleList<global::com.game.framework.resource.data.ITEM_RES> ItemsList {
        get { return PrepareBuilder().items_; }
      }
      public int ItemsCount {
        get { return result.ItemsCount; }
      }
      public global::com.game.framework.resource.data.ITEM_RES GetItems(int index) {
        return result.GetItems(index);
      }
      public Builder SetItems(int index, global::com.game.framework.resource.data.ITEM_RES value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.items_[index] = value;
        return this;
      }
      public Builder SetItems(int index, global::com.game.framework.resource.data.ITEM_RES.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.items_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddItems(global::com.game.framework.resource.data.ITEM_RES value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.items_.Add(value);
        return this;
      }
      public Builder AddItems(global::com.game.framework.resource.data.ITEM_RES.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.items_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeItems(scg::IEnumerable<global::com.game.framework.resource.data.ITEM_RES> values) {
        PrepareBuilder();
        result.items_.Add(values);
        return this;
      }
      public Builder ClearItems() {
        PrepareBuilder();
        result.items_.Clear();
        return this;
      }
    }
    static ITEM_RES_ARRAY() {
      object.ReferenceEquals(global::com.game.framework.resource.data.ItemResBytes.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
#pragma warning restore
