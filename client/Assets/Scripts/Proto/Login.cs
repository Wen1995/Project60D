// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=null.  DO NOT EDIT!
#pragma warning disable
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace com.game.framework.protocol {
  
  public static partial class Login {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    #endregion
    #region Extensions
    internal static readonly object Descriptor;
    static Login() {
      Descriptor = null;
    }
    #endregion
    
  }
  #region Messages
  public sealed partial class TCSLogin : pb::GeneratedMessageLite<TCSLogin, TCSLogin.Builder> {
    private TCSLogin() { }
    private static readonly TCSLogin defaultInstance = new TCSLogin().MakeReadOnly();
    private static readonly string[] _tCSLoginFieldNames = new string[] { "account" };
    private static readonly uint[] _tCSLoginFieldTags = new uint[] { 10 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSLogin DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override TCSLogin DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TCSLogin ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int AccountFieldNumber = 1;
    private bool hasAccount;
    private string account_ = "";
    public bool HasAccount {
      get { return hasAccount; }
    }
    public string Account {
      get { return account_; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _tCSLoginFieldNames;
      if (hasAccount) {
        output.WriteString(1, field_names[0], Account);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAccount) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Account);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasAccount) hash ^= account_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      TCSLogin other = obj as TCSLogin;
      if (other == null) return false;
      if (hasAccount != other.hasAccount || (hasAccount && !account_.Equals(other.account_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSLogin ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSLogin ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSLogin ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSLogin ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSLogin ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSLogin ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSLogin ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSLogin ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSLogin ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSLogin ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TCSLogin MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(TCSLogin prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<TCSLogin, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TCSLogin cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TCSLogin result;
      
      private TCSLogin PrepareBuilder() {
        if (resultIsReadOnly) {
          TCSLogin original = result;
          result = new TCSLogin();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TCSLogin MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override TCSLogin DefaultInstanceForType {
        get { return global::com.game.framework.protocol.TCSLogin.DefaultInstance; }
      }
      
      public override TCSLogin BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is TCSLogin) {
          return MergeFrom((TCSLogin) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TCSLogin other) {
        if (other == global::com.game.framework.protocol.TCSLogin.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAccount) {
          Account = other.Account;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_tCSLoginFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _tCSLoginFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasAccount = input.ReadString(ref result.account_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasAccount {
        get { return result.hasAccount; }
      }
      public string Account {
        get { return result.Account; }
        set { SetAccount(value); }
      }
      public Builder SetAccount(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAccount = true;
        result.account_ = value;
        return this;
      }
      public Builder ClearAccount() {
        PrepareBuilder();
        result.hasAccount = false;
        result.account_ = "";
        return this;
      }
    }
    static TCSLogin() {
      object.ReferenceEquals(global::com.game.framework.protocol.Login.Descriptor, null);
    }
  }
  
  public sealed partial class TSCLogin : pb::GeneratedMessageLite<TSCLogin, TSCLogin.Builder> {
    private TSCLogin() { }
    private static readonly TSCLogin defaultInstance = new TSCLogin().MakeReadOnly();
    private static readonly string[] _tSCLoginFieldNames = new string[] { "groupId", "systemCurrentTime", "uid" };
    private static readonly uint[] _tSCLoginFieldTags = new uint[] { 16, 24, 8 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TSCLogin DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override TSCLogin DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TSCLogin ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int UidFieldNumber = 1;
    private bool hasUid;
    private long uid_;
    public bool HasUid {
      get { return hasUid; }
    }
    public long Uid {
      get { return uid_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int GroupIdFieldNumber = 2;
    private bool hasGroupId;
    private long groupId_;
    public bool HasGroupId {
      get { return hasGroupId; }
    }
    public long GroupId {
      get { return groupId_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int SystemCurrentTimeFieldNumber = 3;
    private bool hasSystemCurrentTime;
    private long systemCurrentTime_;
    public bool HasSystemCurrentTime {
      get { return hasSystemCurrentTime; }
    }
    public long SystemCurrentTime {
      get { return systemCurrentTime_; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _tSCLoginFieldNames;
      if (hasUid) {
        output.WriteInt64(1, field_names[2], Uid);
      }
      if (hasGroupId) {
        output.WriteInt64(2, field_names[0], GroupId);
      }
      if (hasSystemCurrentTime) {
        output.WriteInt64(3, field_names[1], SystemCurrentTime);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasUid) {
          size += pb::CodedOutputStream.ComputeInt64Size(1, Uid);
        }
        if (hasGroupId) {
          size += pb::CodedOutputStream.ComputeInt64Size(2, GroupId);
        }
        if (hasSystemCurrentTime) {
          size += pb::CodedOutputStream.ComputeInt64Size(3, SystemCurrentTime);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasUid) hash ^= uid_.GetHashCode();
      if (hasGroupId) hash ^= groupId_.GetHashCode();
      if (hasSystemCurrentTime) hash ^= systemCurrentTime_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      TSCLogin other = obj as TSCLogin;
      if (other == null) return false;
      if (hasUid != other.hasUid || (hasUid && !uid_.Equals(other.uid_))) return false;
      if (hasGroupId != other.hasGroupId || (hasGroupId && !groupId_.Equals(other.groupId_))) return false;
      if (hasSystemCurrentTime != other.hasSystemCurrentTime || (hasSystemCurrentTime && !systemCurrentTime_.Equals(other.systemCurrentTime_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TSCLogin ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TSCLogin ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TSCLogin ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TSCLogin ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TSCLogin ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TSCLogin ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TSCLogin ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TSCLogin ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TSCLogin ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TSCLogin ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TSCLogin MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(TSCLogin prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<TSCLogin, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TSCLogin cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TSCLogin result;
      
      private TSCLogin PrepareBuilder() {
        if (resultIsReadOnly) {
          TSCLogin original = result;
          result = new TSCLogin();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TSCLogin MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override TSCLogin DefaultInstanceForType {
        get { return global::com.game.framework.protocol.TSCLogin.DefaultInstance; }
      }
      
      public override TSCLogin BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is TSCLogin) {
          return MergeFrom((TSCLogin) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TSCLogin other) {
        if (other == global::com.game.framework.protocol.TSCLogin.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUid) {
          Uid = other.Uid;
        }
        if (other.HasGroupId) {
          GroupId = other.GroupId;
        }
        if (other.HasSystemCurrentTime) {
          SystemCurrentTime = other.SystemCurrentTime;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_tSCLoginFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _tSCLoginFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasUid = input.ReadInt64(ref result.uid_);
              break;
            }
            case 16: {
              result.hasGroupId = input.ReadInt64(ref result.groupId_);
              break;
            }
            case 24: {
              result.hasSystemCurrentTime = input.ReadInt64(ref result.systemCurrentTime_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasUid {
        get { return result.hasUid; }
      }
      public long Uid {
        get { return result.Uid; }
        set { SetUid(value); }
      }
      public Builder SetUid(long value) {
        PrepareBuilder();
        result.hasUid = true;
        result.uid_ = value;
        return this;
      }
      public Builder ClearUid() {
        PrepareBuilder();
        result.hasUid = false;
        result.uid_ = 0L;
        return this;
      }
      
      public bool HasGroupId {
        get { return result.hasGroupId; }
      }
      public long GroupId {
        get { return result.GroupId; }
        set { SetGroupId(value); }
      }
      public Builder SetGroupId(long value) {
        PrepareBuilder();
        result.hasGroupId = true;
        result.groupId_ = value;
        return this;
      }
      public Builder ClearGroupId() {
        PrepareBuilder();
        result.hasGroupId = false;
        result.groupId_ = 0L;
        return this;
      }
      
      public bool HasSystemCurrentTime {
        get { return result.hasSystemCurrentTime; }
      }
      public long SystemCurrentTime {
        get { return result.SystemCurrentTime; }
        set { SetSystemCurrentTime(value); }
      }
      public Builder SetSystemCurrentTime(long value) {
        PrepareBuilder();
        result.hasSystemCurrentTime = true;
        result.systemCurrentTime_ = value;
        return this;
      }
      public Builder ClearSystemCurrentTime() {
        PrepareBuilder();
        result.hasSystemCurrentTime = false;
        result.systemCurrentTime_ = 0L;
        return this;
      }
    }
    static TSCLogin() {
      object.ReferenceEquals(global::com.game.framework.protocol.Login.Descriptor, null);
    }
  }
  
  public sealed partial class TCSLogout : pb::GeneratedMessageLite<TCSLogout, TCSLogout.Builder> {
    private TCSLogout() { }
    private static readonly TCSLogout defaultInstance = new TCSLogout().MakeReadOnly();
    private static readonly string[] _tCSLogoutFieldNames = new string[] {  };
    private static readonly uint[] _tCSLogoutFieldTags = new uint[] {  };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSLogout DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override TCSLogout DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TCSLogout ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _tCSLogoutFieldNames;
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      TCSLogout other = obj as TCSLogout;
      if (other == null) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSLogout ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSLogout ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSLogout ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSLogout ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSLogout ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSLogout ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSLogout ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSLogout ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSLogout ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSLogout ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TCSLogout MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(TCSLogout prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<TCSLogout, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TCSLogout cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TCSLogout result;
      
      private TCSLogout PrepareBuilder() {
        if (resultIsReadOnly) {
          TCSLogout original = result;
          result = new TCSLogout();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TCSLogout MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override TCSLogout DefaultInstanceForType {
        get { return global::com.game.framework.protocol.TCSLogout.DefaultInstance; }
      }
      
      public override TCSLogout BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is TCSLogout) {
          return MergeFrom((TCSLogout) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TCSLogout other) {
        if (other == global::com.game.framework.protocol.TCSLogout.DefaultInstance) return this;
        PrepareBuilder();
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_tCSLogoutFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _tCSLogoutFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        return this;
      }
      
    }
    static TCSLogout() {
      object.ReferenceEquals(global::com.game.framework.protocol.Login.Descriptor, null);
    }
  }
  
  public sealed partial class TCSHeart : pb::GeneratedMessageLite<TCSHeart, TCSHeart.Builder> {
    private TCSHeart() { }
    private static readonly TCSHeart defaultInstance = new TCSHeart().MakeReadOnly();
    private static readonly string[] _tCSHeartFieldNames = new string[] {  };
    private static readonly uint[] _tCSHeartFieldTags = new uint[] {  };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSHeart DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override TCSHeart DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TCSHeart ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _tCSHeartFieldNames;
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      TCSHeart other = obj as TCSHeart;
      if (other == null) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSHeart ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSHeart ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSHeart ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSHeart ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSHeart ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSHeart ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSHeart ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSHeart ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSHeart ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TCSHeart ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TCSHeart MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(TCSHeart prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<TCSHeart, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TCSHeart cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TCSHeart result;
      
      private TCSHeart PrepareBuilder() {
        if (resultIsReadOnly) {
          TCSHeart original = result;
          result = new TCSHeart();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TCSHeart MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override TCSHeart DefaultInstanceForType {
        get { return global::com.game.framework.protocol.TCSHeart.DefaultInstance; }
      }
      
      public override TCSHeart BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is TCSHeart) {
          return MergeFrom((TCSHeart) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TCSHeart other) {
        if (other == global::com.game.framework.protocol.TCSHeart.DefaultInstance) return this;
        PrepareBuilder();
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_tCSHeartFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _tCSHeartFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        return this;
      }
      
    }
    static TCSHeart() {
      object.ReferenceEquals(global::com.game.framework.protocol.Login.Descriptor, null);
    }
  }
  
  public sealed partial class TSCHeart : pb::GeneratedMessageLite<TSCHeart, TSCHeart.Builder> {
    private TSCHeart() { }
    private static readonly TSCHeart defaultInstance = new TSCHeart().MakeReadOnly();
    private static readonly string[] _tSCHeartFieldNames = new string[] { "systemCurrentTime", "worldEventConfigId2HappenTime" };
    private static readonly uint[] _tSCHeartFieldTags = new uint[] { 16, 10 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TSCHeart DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override TSCHeart DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TSCHeart ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int WorldEventConfigId2HappenTimeFieldNumber = 1;
    private pbc::PopsicleList<global::com.game.framework.protocol.WorldEventConfigId2HappenTime> worldEventConfigId2HappenTime_ = new pbc::PopsicleList<global::com.game.framework.protocol.WorldEventConfigId2HappenTime>();
    public scg::IList<global::com.game.framework.protocol.WorldEventConfigId2HappenTime> WorldEventConfigId2HappenTimeList {
      get { return worldEventConfigId2HappenTime_; }
    }
    public int WorldEventConfigId2HappenTimeCount {
      get { return worldEventConfigId2HappenTime_.Count; }
    }
    public global::com.game.framework.protocol.WorldEventConfigId2HappenTime GetWorldEventConfigId2HappenTime(int index) {
      return worldEventConfigId2HappenTime_[index];
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int SystemCurrentTimeFieldNumber = 2;
    private bool hasSystemCurrentTime;
    private long systemCurrentTime_;
    public bool HasSystemCurrentTime {
      get { return hasSystemCurrentTime; }
    }
    public long SystemCurrentTime {
      get { return systemCurrentTime_; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _tSCHeartFieldNames;
      if (worldEventConfigId2HappenTime_.Count > 0) {
        output.WriteMessageArray(1, field_names[1], worldEventConfigId2HappenTime_);
      }
      if (hasSystemCurrentTime) {
        output.WriteInt64(2, field_names[0], SystemCurrentTime);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::com.game.framework.protocol.WorldEventConfigId2HappenTime element in WorldEventConfigId2HappenTimeList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        if (hasSystemCurrentTime) {
          size += pb::CodedOutputStream.ComputeInt64Size(2, SystemCurrentTime);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      foreach(global::com.game.framework.protocol.WorldEventConfigId2HappenTime i in worldEventConfigId2HappenTime_)
        hash ^= i.GetHashCode();
      if (hasSystemCurrentTime) hash ^= systemCurrentTime_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      TSCHeart other = obj as TSCHeart;
      if (other == null) return false;
      if(worldEventConfigId2HappenTime_.Count != other.worldEventConfigId2HappenTime_.Count) return false;
      for(int ix=0; ix < worldEventConfigId2HappenTime_.Count; ix++)
        if(!worldEventConfigId2HappenTime_[ix].Equals(other.worldEventConfigId2HappenTime_[ix])) return false;
      if (hasSystemCurrentTime != other.hasSystemCurrentTime || (hasSystemCurrentTime && !systemCurrentTime_.Equals(other.systemCurrentTime_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TSCHeart ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TSCHeart ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TSCHeart ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TSCHeart ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TSCHeart ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TSCHeart ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TSCHeart ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TSCHeart ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TSCHeart ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static TSCHeart ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TSCHeart MakeReadOnly() {
      worldEventConfigId2HappenTime_.MakeReadOnly();
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(TSCHeart prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<TSCHeart, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TSCHeart cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TSCHeart result;
      
      private TSCHeart PrepareBuilder() {
        if (resultIsReadOnly) {
          TSCHeart original = result;
          result = new TSCHeart();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TSCHeart MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override TSCHeart DefaultInstanceForType {
        get { return global::com.game.framework.protocol.TSCHeart.DefaultInstance; }
      }
      
      public override TSCHeart BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is TSCHeart) {
          return MergeFrom((TSCHeart) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TSCHeart other) {
        if (other == global::com.game.framework.protocol.TSCHeart.DefaultInstance) return this;
        PrepareBuilder();
        if (other.worldEventConfigId2HappenTime_.Count != 0) {
          result.worldEventConfigId2HappenTime_.Add(other.worldEventConfigId2HappenTime_);
        }
        if (other.HasSystemCurrentTime) {
          SystemCurrentTime = other.SystemCurrentTime;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_tSCHeartFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _tSCHeartFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.worldEventConfigId2HappenTime_, global::com.game.framework.protocol.WorldEventConfigId2HappenTime.DefaultInstance, extensionRegistry);
              break;
            }
            case 16: {
              result.hasSystemCurrentTime = input.ReadInt64(ref result.systemCurrentTime_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public pbc::IPopsicleList<global::com.game.framework.protocol.WorldEventConfigId2HappenTime> WorldEventConfigId2HappenTimeList {
        get { return PrepareBuilder().worldEventConfigId2HappenTime_; }
      }
      public int WorldEventConfigId2HappenTimeCount {
        get { return result.WorldEventConfigId2HappenTimeCount; }
      }
      public global::com.game.framework.protocol.WorldEventConfigId2HappenTime GetWorldEventConfigId2HappenTime(int index) {
        return result.GetWorldEventConfigId2HappenTime(index);
      }
      public Builder SetWorldEventConfigId2HappenTime(int index, global::com.game.framework.protocol.WorldEventConfigId2HappenTime value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.worldEventConfigId2HappenTime_[index] = value;
        return this;
      }
      public Builder SetWorldEventConfigId2HappenTime(int index, global::com.game.framework.protocol.WorldEventConfigId2HappenTime.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.worldEventConfigId2HappenTime_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddWorldEventConfigId2HappenTime(global::com.game.framework.protocol.WorldEventConfigId2HappenTime value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.worldEventConfigId2HappenTime_.Add(value);
        return this;
      }
      public Builder AddWorldEventConfigId2HappenTime(global::com.game.framework.protocol.WorldEventConfigId2HappenTime.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.worldEventConfigId2HappenTime_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeWorldEventConfigId2HappenTime(scg::IEnumerable<global::com.game.framework.protocol.WorldEventConfigId2HappenTime> values) {
        PrepareBuilder();
        result.worldEventConfigId2HappenTime_.Add(values);
        return this;
      }
      public Builder ClearWorldEventConfigId2HappenTime() {
        PrepareBuilder();
        result.worldEventConfigId2HappenTime_.Clear();
        return this;
      }
      
      public bool HasSystemCurrentTime {
        get { return result.hasSystemCurrentTime; }
      }
      public long SystemCurrentTime {
        get { return result.SystemCurrentTime; }
        set { SetSystemCurrentTime(value); }
      }
      public Builder SetSystemCurrentTime(long value) {
        PrepareBuilder();
        result.hasSystemCurrentTime = true;
        result.systemCurrentTime_ = value;
        return this;
      }
      public Builder ClearSystemCurrentTime() {
        PrepareBuilder();
        result.hasSystemCurrentTime = false;
        result.systemCurrentTime_ = 0L;
        return this;
      }
    }
    static TSCHeart() {
      object.ReferenceEquals(global::com.game.framework.protocol.Login.Descriptor, null);
    }
  }
  
  public sealed partial class WorldEventConfigId2HappenTime : pb::GeneratedMessageLite<WorldEventConfigId2HappenTime, WorldEventConfigId2HappenTime.Builder> {
    private WorldEventConfigId2HappenTime() { }
    private static readonly WorldEventConfigId2HappenTime defaultInstance = new WorldEventConfigId2HappenTime().MakeReadOnly();
    private static readonly string[] _worldEventConfigId2HappenTimeFieldNames = new string[] { "happenTime", "worldEventConfigId" };
    private static readonly uint[] _worldEventConfigId2HappenTimeFieldTags = new uint[] { 16, 8 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static WorldEventConfigId2HappenTime DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override WorldEventConfigId2HappenTime DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override WorldEventConfigId2HappenTime ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int WorldEventConfigIdFieldNumber = 1;
    private bool hasWorldEventConfigId;
    private int worldEventConfigId_;
    public bool HasWorldEventConfigId {
      get { return hasWorldEventConfigId; }
    }
    public int WorldEventConfigId {
      get { return worldEventConfigId_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int HappenTimeFieldNumber = 2;
    private bool hasHappenTime;
    private long happenTime_;
    public bool HasHappenTime {
      get { return hasHappenTime; }
    }
    public long HappenTime {
      get { return happenTime_; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _worldEventConfigId2HappenTimeFieldNames;
      if (hasWorldEventConfigId) {
        output.WriteInt32(1, field_names[1], WorldEventConfigId);
      }
      if (hasHappenTime) {
        output.WriteInt64(2, field_names[0], HappenTime);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasWorldEventConfigId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, WorldEventConfigId);
        }
        if (hasHappenTime) {
          size += pb::CodedOutputStream.ComputeInt64Size(2, HappenTime);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasWorldEventConfigId) hash ^= worldEventConfigId_.GetHashCode();
      if (hasHappenTime) hash ^= happenTime_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      WorldEventConfigId2HappenTime other = obj as WorldEventConfigId2HappenTime;
      if (other == null) return false;
      if (hasWorldEventConfigId != other.hasWorldEventConfigId || (hasWorldEventConfigId && !worldEventConfigId_.Equals(other.worldEventConfigId_))) return false;
      if (hasHappenTime != other.hasHappenTime || (hasHappenTime && !happenTime_.Equals(other.happenTime_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static WorldEventConfigId2HappenTime ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static WorldEventConfigId2HappenTime ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static WorldEventConfigId2HappenTime ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static WorldEventConfigId2HappenTime ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static WorldEventConfigId2HappenTime ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static WorldEventConfigId2HappenTime ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static WorldEventConfigId2HappenTime ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static WorldEventConfigId2HappenTime ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static WorldEventConfigId2HappenTime ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static WorldEventConfigId2HappenTime ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private WorldEventConfigId2HappenTime MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(WorldEventConfigId2HappenTime prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<WorldEventConfigId2HappenTime, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(WorldEventConfigId2HappenTime cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private WorldEventConfigId2HappenTime result;
      
      private WorldEventConfigId2HappenTime PrepareBuilder() {
        if (resultIsReadOnly) {
          WorldEventConfigId2HappenTime original = result;
          result = new WorldEventConfigId2HappenTime();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override WorldEventConfigId2HappenTime MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override WorldEventConfigId2HappenTime DefaultInstanceForType {
        get { return global::com.game.framework.protocol.WorldEventConfigId2HappenTime.DefaultInstance; }
      }
      
      public override WorldEventConfigId2HappenTime BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is WorldEventConfigId2HappenTime) {
          return MergeFrom((WorldEventConfigId2HappenTime) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(WorldEventConfigId2HappenTime other) {
        if (other == global::com.game.framework.protocol.WorldEventConfigId2HappenTime.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasWorldEventConfigId) {
          WorldEventConfigId = other.WorldEventConfigId;
        }
        if (other.HasHappenTime) {
          HappenTime = other.HappenTime;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_worldEventConfigId2HappenTimeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _worldEventConfigId2HappenTimeFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasWorldEventConfigId = input.ReadInt32(ref result.worldEventConfigId_);
              break;
            }
            case 16: {
              result.hasHappenTime = input.ReadInt64(ref result.happenTime_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasWorldEventConfigId {
        get { return result.hasWorldEventConfigId; }
      }
      public int WorldEventConfigId {
        get { return result.WorldEventConfigId; }
        set { SetWorldEventConfigId(value); }
      }
      public Builder SetWorldEventConfigId(int value) {
        PrepareBuilder();
        result.hasWorldEventConfigId = true;
        result.worldEventConfigId_ = value;
        return this;
      }
      public Builder ClearWorldEventConfigId() {
        PrepareBuilder();
        result.hasWorldEventConfigId = false;
        result.worldEventConfigId_ = 0;
        return this;
      }
      
      public bool HasHappenTime {
        get { return result.hasHappenTime; }
      }
      public long HappenTime {
        get { return result.HappenTime; }
        set { SetHappenTime(value); }
      }
      public Builder SetHappenTime(long value) {
        PrepareBuilder();
        result.hasHappenTime = true;
        result.happenTime_ = value;
        return this;
      }
      public Builder ClearHappenTime() {
        PrepareBuilder();
        result.hasHappenTime = false;
        result.happenTime_ = 0L;
        return this;
      }
    }
    static WorldEventConfigId2HappenTime() {
      object.ReferenceEquals(global::com.game.framework.protocol.Login.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
#pragma warning restore
