// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=null.  DO NOT EDIT!
#pragma warning disable
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace com.game.framework.resource.data {
  
  public static partial class BuildingBytes {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    #endregion
    #region Extensions
    internal static readonly object Descriptor;
    static BuildingBytes() {
      Descriptor = null;
    }
    #endregion
    
  }
  #region Messages
  public sealed partial class BUILDING : pb::GeneratedMessageLite<BUILDING, BUILDING.Builder> {
    private BUILDING() { }
    private static readonly BUILDING defaultInstance = new BUILDING().MakeReadOnly();
    private static readonly string[] _bUILDINGFieldNames = new string[] { "bldg_func_table_id", "bldg_func_table_name", "bldg_info", "bldg_key", "bldg_lvl", "bldg_name", "bldg_strength_add", "bldg_strength_lim", "bldg_type", "con_id", "con_pro", "cost_table", "elec_cost", "gold_cost", "icon_name", "id", "in_use", "max_bldg_lvl", "prefab_name", "pro_id", "time_cost" };
    private static readonly uint[] _bUILDINGFieldTags = new uint[] { 120, 114, 82, 42, 24, 34, 136, 128, 16, 88, 96, 170, 160, 152, 74, 8, 48, 56, 66, 104, 144 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BUILDING DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override BUILDING DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BUILDING ThisMessage {
      get { return this; }
    }
    
    #region Nested types
    public static partial class Types {
      public sealed partial class CostStruct : pb::GeneratedMessageLite<CostStruct, CostStruct.Builder> {
        private CostStruct() { }
        private static readonly CostStruct defaultInstance = new CostStruct().MakeReadOnly();
        private static readonly string[] _costStructFieldNames = new string[] { "cost_id", "cost_qty" };
        private static readonly uint[] _costStructFieldTags = new uint[] { 8, 16 };
        #if UNITY_EDITOR
         [pb.FieldNumber] 
         #endif//
        public static CostStruct DefaultInstance {
          get { return defaultInstance; }
        }
        
        #if UNITY_EDITOR
         [pb.FieldNumber] 
         #endif//
        public override CostStruct DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override CostStruct ThisMessage {
          get { return this; }
        }
        
        #if UNITY_EDITOR
        [pb.FieldNumber]
        #endif//
        public const int CostIdFieldNumber = 1;
        private bool hasCostId;
        private int costId_;
        public bool HasCostId {
          get { return hasCostId; }
        }
        public int CostId {
          get { return costId_; }
        }
        
        #if UNITY_EDITOR
        [pb.FieldNumber]
        #endif//
        public const int CostQtyFieldNumber = 2;
        private bool hasCostQty;
        private int costQty_;
        public bool HasCostQty {
          get { return hasCostQty; }
        }
        public int CostQty {
          get { return costQty_; }
        }
        
        #if UNITY_EDITOR
         [pb.FieldNumber] 
         #endif//
        public override bool IsInitialized {
          get {
            return true;
          }
        }
        
        #if UNITY_EDITOR
         [pb.FieldNumber] 
         #endif//
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _costStructFieldNames;
          if (hasCostId) {
            output.WriteInt32(1, field_names[0], CostId);
          }
          if (hasCostQty) {
            output.WriteInt32(2, field_names[1], CostQty);
          }
        }
        
        private int memoizedSerializedSize = -1;
        #if UNITY_EDITOR
         [pb.FieldNumber] 
         #endif//
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasCostId) {
              size += pb::CodedOutputStream.ComputeInt32Size(1, CostId);
            }
            if (hasCostQty) {
              size += pb::CodedOutputStream.ComputeInt32Size(2, CostQty);
            }
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        #region Lite runtime methods
        public override int GetHashCode() {
          int hash = GetType().GetHashCode();
          if (hasCostId) hash ^= costId_.GetHashCode();
          if (hasCostQty) hash ^= costQty_.GetHashCode();
          return hash;
        }
        
        public override bool Equals(object obj) {
          CostStruct other = obj as CostStruct;
          if (other == null) return false;
          if (hasCostId != other.hasCostId || (hasCostId && !costId_.Equals(other.costId_))) return false;
          if (hasCostQty != other.hasCostQty || (hasCostQty && !costQty_.Equals(other.costQty_))) return false;
          return true;
        }
        
        #endregion
        
        #if UNITY_EDITOR
         [pb.FieldNumber] 
         #endif//
        public static CostStruct ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        #if UNITY_EDITOR
         [pb.FieldNumber] 
         #endif//
        public static CostStruct ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        #if UNITY_EDITOR
         [pb.FieldNumber] 
         #endif//
        public static CostStruct ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        #if UNITY_EDITOR
         [pb.FieldNumber] 
         #endif//
        public static CostStruct ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        #if UNITY_EDITOR
         [pb.FieldNumber] 
         #endif//
        public static CostStruct ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        #if UNITY_EDITOR
         [pb.FieldNumber] 
         #endif//
        public static CostStruct ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        #if UNITY_EDITOR
         [pb.FieldNumber] 
         #endif//
        public static CostStruct ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        #if UNITY_EDITOR
         [pb.FieldNumber] 
         #endif//
        public static CostStruct ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        #if UNITY_EDITOR
         [pb.FieldNumber] 
         #endif//
        public static CostStruct ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        #if UNITY_EDITOR
         [pb.FieldNumber] 
         #endif//
        public static CostStruct ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private CostStruct MakeReadOnly() {
          return this;
        }
        
        #if UNITY_EDITOR
         [pb.FieldNumber] 
         #endif//
        public static Builder CreateBuilder() { return new Builder(); }
        #if UNITY_EDITOR
         [pb.FieldNumber] 
         #endif//
        public override Builder ToBuilder() { return CreateBuilder(this); }
        #if UNITY_EDITOR
         [pb.FieldNumber] 
         #endif//
        public override Builder CreateBuilderForType() { return new Builder(); }
        #if UNITY_EDITOR
         [pb.FieldNumber] 
         #endif//
        public static Builder CreateBuilder(CostStruct prototype) {
          return new Builder(prototype);
        }
        
        public sealed partial class Builder : pb::GeneratedBuilderLite<CostStruct, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(CostStruct cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private CostStruct result;
          
          private CostStruct PrepareBuilder() {
            if (resultIsReadOnly) {
              CostStruct original = result;
              result = new CostStruct();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override CostStruct MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override CostStruct DefaultInstanceForType {
            get { return global::com.game.framework.resource.data.BUILDING.Types.CostStruct.DefaultInstance; }
          }
          
          public override CostStruct BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessageLite other) {
            if (other is CostStruct) {
              return MergeFrom((CostStruct) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(CostStruct other) {
            if (other == global::com.game.framework.resource.data.BUILDING.Types.CostStruct.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasCostId) {
              CostId = other.CostId;
            }
            if (other.HasCostQty) {
              CostQty = other.CostQty;
            }
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_costStructFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _costStructFieldTags[field_ordinal];
                else {
                  ParseUnknownField(input, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    return this;
                  }
                  ParseUnknownField(input, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasCostId = input.ReadInt32(ref result.costId_);
                  break;
                }
                case 16: {
                  result.hasCostQty = input.ReadInt32(ref result.costQty_);
                  break;
                }
              }
            }
            
            return this;
          }
          
          
          public bool HasCostId {
            get { return result.hasCostId; }
          }
          public int CostId {
            get { return result.CostId; }
            set { SetCostId(value); }
          }
          public Builder SetCostId(int value) {
            PrepareBuilder();
            result.hasCostId = true;
            result.costId_ = value;
            return this;
          }
          public Builder ClearCostId() {
            PrepareBuilder();
            result.hasCostId = false;
            result.costId_ = 0;
            return this;
          }
          
          public bool HasCostQty {
            get { return result.hasCostQty; }
          }
          public int CostQty {
            get { return result.CostQty; }
            set { SetCostQty(value); }
          }
          public Builder SetCostQty(int value) {
            PrepareBuilder();
            result.hasCostQty = true;
            result.costQty_ = value;
            return this;
          }
          public Builder ClearCostQty() {
            PrepareBuilder();
            result.hasCostQty = false;
            result.costQty_ = 0;
            return this;
          }
        }
        static CostStruct() {
          object.ReferenceEquals(global::com.game.framework.resource.data.BuildingBytes.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int BldgTypeFieldNumber = 2;
    private bool hasBldgType;
    private int bldgType_;
    public bool HasBldgType {
      get { return hasBldgType; }
    }
    public int BldgType {
      get { return bldgType_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int BldgLvlFieldNumber = 3;
    private bool hasBldgLvl;
    private int bldgLvl_;
    public bool HasBldgLvl {
      get { return hasBldgLvl; }
    }
    public int BldgLvl {
      get { return bldgLvl_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int BldgNameFieldNumber = 4;
    private bool hasBldgName;
    private string bldgName_ = "";
    public bool HasBldgName {
      get { return hasBldgName; }
    }
    public string BldgName {
      get { return bldgName_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int BldgKeyFieldNumber = 5;
    private bool hasBldgKey;
    private string bldgKey_ = "";
    public bool HasBldgKey {
      get { return hasBldgKey; }
    }
    public string BldgKey {
      get { return bldgKey_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int InUseFieldNumber = 6;
    private bool hasInUse;
    private int inUse_;
    public bool HasInUse {
      get { return hasInUse; }
    }
    public int InUse {
      get { return inUse_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int MaxBldgLvlFieldNumber = 7;
    private bool hasMaxBldgLvl;
    private int maxBldgLvl_;
    public bool HasMaxBldgLvl {
      get { return hasMaxBldgLvl; }
    }
    public int MaxBldgLvl {
      get { return maxBldgLvl_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int PrefabNameFieldNumber = 8;
    private bool hasPrefabName;
    private string prefabName_ = "";
    public bool HasPrefabName {
      get { return hasPrefabName; }
    }
    public string PrefabName {
      get { return prefabName_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int IconNameFieldNumber = 9;
    private bool hasIconName;
    private string iconName_ = "";
    public bool HasIconName {
      get { return hasIconName; }
    }
    public string IconName {
      get { return iconName_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int BldgInfoFieldNumber = 10;
    private bool hasBldgInfo;
    private string bldgInfo_ = "";
    public bool HasBldgInfo {
      get { return hasBldgInfo; }
    }
    public string BldgInfo {
      get { return bldgInfo_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int ConIdFieldNumber = 11;
    private bool hasConId;
    private int conId_;
    public bool HasConId {
      get { return hasConId; }
    }
    public int ConId {
      get { return conId_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int ConProFieldNumber = 12;
    private bool hasConPro;
    private int conPro_;
    public bool HasConPro {
      get { return hasConPro; }
    }
    public int ConPro {
      get { return conPro_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int ProIdFieldNumber = 13;
    private bool hasProId;
    private int proId_;
    public bool HasProId {
      get { return hasProId; }
    }
    public int ProId {
      get { return proId_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int BldgFuncTableNameFieldNumber = 14;
    private bool hasBldgFuncTableName;
    private string bldgFuncTableName_ = "";
    public bool HasBldgFuncTableName {
      get { return hasBldgFuncTableName; }
    }
    public string BldgFuncTableName {
      get { return bldgFuncTableName_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int BldgFuncTableIdFieldNumber = 15;
    private bool hasBldgFuncTableId;
    private int bldgFuncTableId_;
    public bool HasBldgFuncTableId {
      get { return hasBldgFuncTableId; }
    }
    public int BldgFuncTableId {
      get { return bldgFuncTableId_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int BldgStrengthLimFieldNumber = 16;
    private bool hasBldgStrengthLim;
    private int bldgStrengthLim_;
    public bool HasBldgStrengthLim {
      get { return hasBldgStrengthLim; }
    }
    public int BldgStrengthLim {
      get { return bldgStrengthLim_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int BldgStrengthAddFieldNumber = 17;
    private bool hasBldgStrengthAdd;
    private int bldgStrengthAdd_;
    public bool HasBldgStrengthAdd {
      get { return hasBldgStrengthAdd; }
    }
    public int BldgStrengthAdd {
      get { return bldgStrengthAdd_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int TimeCostFieldNumber = 18;
    private bool hasTimeCost;
    private int timeCost_;
    public bool HasTimeCost {
      get { return hasTimeCost; }
    }
    public int TimeCost {
      get { return timeCost_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int GoldCostFieldNumber = 19;
    private bool hasGoldCost;
    private int goldCost_;
    public bool HasGoldCost {
      get { return hasGoldCost; }
    }
    public int GoldCost {
      get { return goldCost_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int ElecCostFieldNumber = 20;
    private bool hasElecCost;
    private int elecCost_;
    public bool HasElecCost {
      get { return hasElecCost; }
    }
    public int ElecCost {
      get { return elecCost_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int CostTableFieldNumber = 21;
    private pbc::PopsicleList<global::com.game.framework.resource.data.BUILDING.Types.CostStruct> costTable_ = new pbc::PopsicleList<global::com.game.framework.resource.data.BUILDING.Types.CostStruct>();
    public scg::IList<global::com.game.framework.resource.data.BUILDING.Types.CostStruct> CostTableList {
      get { return costTable_; }
    }
    public int CostTableCount {
      get { return costTable_.Count; }
    }
    public global::com.game.framework.resource.data.BUILDING.Types.CostStruct GetCostTable(int index) {
      return costTable_[index];
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _bUILDINGFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[15], Id);
      }
      if (hasBldgType) {
        output.WriteInt32(2, field_names[8], BldgType);
      }
      if (hasBldgLvl) {
        output.WriteInt32(3, field_names[4], BldgLvl);
      }
      if (hasBldgName) {
        output.WriteString(4, field_names[5], BldgName);
      }
      if (hasBldgKey) {
        output.WriteString(5, field_names[3], BldgKey);
      }
      if (hasInUse) {
        output.WriteInt32(6, field_names[16], InUse);
      }
      if (hasMaxBldgLvl) {
        output.WriteInt32(7, field_names[17], MaxBldgLvl);
      }
      if (hasPrefabName) {
        output.WriteString(8, field_names[18], PrefabName);
      }
      if (hasIconName) {
        output.WriteString(9, field_names[14], IconName);
      }
      if (hasBldgInfo) {
        output.WriteString(10, field_names[2], BldgInfo);
      }
      if (hasConId) {
        output.WriteInt32(11, field_names[9], ConId);
      }
      if (hasConPro) {
        output.WriteInt32(12, field_names[10], ConPro);
      }
      if (hasProId) {
        output.WriteInt32(13, field_names[19], ProId);
      }
      if (hasBldgFuncTableName) {
        output.WriteString(14, field_names[1], BldgFuncTableName);
      }
      if (hasBldgFuncTableId) {
        output.WriteInt32(15, field_names[0], BldgFuncTableId);
      }
      if (hasBldgStrengthLim) {
        output.WriteInt32(16, field_names[7], BldgStrengthLim);
      }
      if (hasBldgStrengthAdd) {
        output.WriteInt32(17, field_names[6], BldgStrengthAdd);
      }
      if (hasTimeCost) {
        output.WriteInt32(18, field_names[20], TimeCost);
      }
      if (hasGoldCost) {
        output.WriteInt32(19, field_names[13], GoldCost);
      }
      if (hasElecCost) {
        output.WriteInt32(20, field_names[12], ElecCost);
      }
      if (costTable_.Count > 0) {
        output.WriteMessageArray(21, field_names[11], costTable_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
        }
        if (hasBldgType) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, BldgType);
        }
        if (hasBldgLvl) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, BldgLvl);
        }
        if (hasBldgName) {
          size += pb::CodedOutputStream.ComputeStringSize(4, BldgName);
        }
        if (hasBldgKey) {
          size += pb::CodedOutputStream.ComputeStringSize(5, BldgKey);
        }
        if (hasInUse) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, InUse);
        }
        if (hasMaxBldgLvl) {
          size += pb::CodedOutputStream.ComputeInt32Size(7, MaxBldgLvl);
        }
        if (hasPrefabName) {
          size += pb::CodedOutputStream.ComputeStringSize(8, PrefabName);
        }
        if (hasIconName) {
          size += pb::CodedOutputStream.ComputeStringSize(9, IconName);
        }
        if (hasBldgInfo) {
          size += pb::CodedOutputStream.ComputeStringSize(10, BldgInfo);
        }
        if (hasConId) {
          size += pb::CodedOutputStream.ComputeInt32Size(11, ConId);
        }
        if (hasConPro) {
          size += pb::CodedOutputStream.ComputeInt32Size(12, ConPro);
        }
        if (hasProId) {
          size += pb::CodedOutputStream.ComputeInt32Size(13, ProId);
        }
        if (hasBldgFuncTableName) {
          size += pb::CodedOutputStream.ComputeStringSize(14, BldgFuncTableName);
        }
        if (hasBldgFuncTableId) {
          size += pb::CodedOutputStream.ComputeInt32Size(15, BldgFuncTableId);
        }
        if (hasBldgStrengthLim) {
          size += pb::CodedOutputStream.ComputeInt32Size(16, BldgStrengthLim);
        }
        if (hasBldgStrengthAdd) {
          size += pb::CodedOutputStream.ComputeInt32Size(17, BldgStrengthAdd);
        }
        if (hasTimeCost) {
          size += pb::CodedOutputStream.ComputeInt32Size(18, TimeCost);
        }
        if (hasGoldCost) {
          size += pb::CodedOutputStream.ComputeInt32Size(19, GoldCost);
        }
        if (hasElecCost) {
          size += pb::CodedOutputStream.ComputeInt32Size(20, ElecCost);
        }
        foreach (global::com.game.framework.resource.data.BUILDING.Types.CostStruct element in CostTableList) {
          size += pb::CodedOutputStream.ComputeMessageSize(21, element);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasBldgType) hash ^= bldgType_.GetHashCode();
      if (hasBldgLvl) hash ^= bldgLvl_.GetHashCode();
      if (hasBldgName) hash ^= bldgName_.GetHashCode();
      if (hasBldgKey) hash ^= bldgKey_.GetHashCode();
      if (hasInUse) hash ^= inUse_.GetHashCode();
      if (hasMaxBldgLvl) hash ^= maxBldgLvl_.GetHashCode();
      if (hasPrefabName) hash ^= prefabName_.GetHashCode();
      if (hasIconName) hash ^= iconName_.GetHashCode();
      if (hasBldgInfo) hash ^= bldgInfo_.GetHashCode();
      if (hasConId) hash ^= conId_.GetHashCode();
      if (hasConPro) hash ^= conPro_.GetHashCode();
      if (hasProId) hash ^= proId_.GetHashCode();
      if (hasBldgFuncTableName) hash ^= bldgFuncTableName_.GetHashCode();
      if (hasBldgFuncTableId) hash ^= bldgFuncTableId_.GetHashCode();
      if (hasBldgStrengthLim) hash ^= bldgStrengthLim_.GetHashCode();
      if (hasBldgStrengthAdd) hash ^= bldgStrengthAdd_.GetHashCode();
      if (hasTimeCost) hash ^= timeCost_.GetHashCode();
      if (hasGoldCost) hash ^= goldCost_.GetHashCode();
      if (hasElecCost) hash ^= elecCost_.GetHashCode();
      foreach(global::com.game.framework.resource.data.BUILDING.Types.CostStruct i in costTable_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      BUILDING other = obj as BUILDING;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasBldgType != other.hasBldgType || (hasBldgType && !bldgType_.Equals(other.bldgType_))) return false;
      if (hasBldgLvl != other.hasBldgLvl || (hasBldgLvl && !bldgLvl_.Equals(other.bldgLvl_))) return false;
      if (hasBldgName != other.hasBldgName || (hasBldgName && !bldgName_.Equals(other.bldgName_))) return false;
      if (hasBldgKey != other.hasBldgKey || (hasBldgKey && !bldgKey_.Equals(other.bldgKey_))) return false;
      if (hasInUse != other.hasInUse || (hasInUse && !inUse_.Equals(other.inUse_))) return false;
      if (hasMaxBldgLvl != other.hasMaxBldgLvl || (hasMaxBldgLvl && !maxBldgLvl_.Equals(other.maxBldgLvl_))) return false;
      if (hasPrefabName != other.hasPrefabName || (hasPrefabName && !prefabName_.Equals(other.prefabName_))) return false;
      if (hasIconName != other.hasIconName || (hasIconName && !iconName_.Equals(other.iconName_))) return false;
      if (hasBldgInfo != other.hasBldgInfo || (hasBldgInfo && !bldgInfo_.Equals(other.bldgInfo_))) return false;
      if (hasConId != other.hasConId || (hasConId && !conId_.Equals(other.conId_))) return false;
      if (hasConPro != other.hasConPro || (hasConPro && !conPro_.Equals(other.conPro_))) return false;
      if (hasProId != other.hasProId || (hasProId && !proId_.Equals(other.proId_))) return false;
      if (hasBldgFuncTableName != other.hasBldgFuncTableName || (hasBldgFuncTableName && !bldgFuncTableName_.Equals(other.bldgFuncTableName_))) return false;
      if (hasBldgFuncTableId != other.hasBldgFuncTableId || (hasBldgFuncTableId && !bldgFuncTableId_.Equals(other.bldgFuncTableId_))) return false;
      if (hasBldgStrengthLim != other.hasBldgStrengthLim || (hasBldgStrengthLim && !bldgStrengthLim_.Equals(other.bldgStrengthLim_))) return false;
      if (hasBldgStrengthAdd != other.hasBldgStrengthAdd || (hasBldgStrengthAdd && !bldgStrengthAdd_.Equals(other.bldgStrengthAdd_))) return false;
      if (hasTimeCost != other.hasTimeCost || (hasTimeCost && !timeCost_.Equals(other.timeCost_))) return false;
      if (hasGoldCost != other.hasGoldCost || (hasGoldCost && !goldCost_.Equals(other.goldCost_))) return false;
      if (hasElecCost != other.hasElecCost || (hasElecCost && !elecCost_.Equals(other.elecCost_))) return false;
      if(costTable_.Count != other.costTable_.Count) return false;
      for(int ix=0; ix < costTable_.Count; ix++)
        if(!costTable_[ix].Equals(other.costTable_[ix])) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BUILDING ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BUILDING ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BUILDING ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BUILDING ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BUILDING ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BUILDING ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BUILDING ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BUILDING ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BUILDING ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BUILDING ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BUILDING MakeReadOnly() {
      costTable_.MakeReadOnly();
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(BUILDING prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<BUILDING, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BUILDING cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BUILDING result;
      
      private BUILDING PrepareBuilder() {
        if (resultIsReadOnly) {
          BUILDING original = result;
          result = new BUILDING();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BUILDING MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override BUILDING DefaultInstanceForType {
        get { return global::com.game.framework.resource.data.BUILDING.DefaultInstance; }
      }
      
      public override BUILDING BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is BUILDING) {
          return MergeFrom((BUILDING) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BUILDING other) {
        if (other == global::com.game.framework.resource.data.BUILDING.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasBldgType) {
          BldgType = other.BldgType;
        }
        if (other.HasBldgLvl) {
          BldgLvl = other.BldgLvl;
        }
        if (other.HasBldgName) {
          BldgName = other.BldgName;
        }
        if (other.HasBldgKey) {
          BldgKey = other.BldgKey;
        }
        if (other.HasInUse) {
          InUse = other.InUse;
        }
        if (other.HasMaxBldgLvl) {
          MaxBldgLvl = other.MaxBldgLvl;
        }
        if (other.HasPrefabName) {
          PrefabName = other.PrefabName;
        }
        if (other.HasIconName) {
          IconName = other.IconName;
        }
        if (other.HasBldgInfo) {
          BldgInfo = other.BldgInfo;
        }
        if (other.HasConId) {
          ConId = other.ConId;
        }
        if (other.HasConPro) {
          ConPro = other.ConPro;
        }
        if (other.HasProId) {
          ProId = other.ProId;
        }
        if (other.HasBldgFuncTableName) {
          BldgFuncTableName = other.BldgFuncTableName;
        }
        if (other.HasBldgFuncTableId) {
          BldgFuncTableId = other.BldgFuncTableId;
        }
        if (other.HasBldgStrengthLim) {
          BldgStrengthLim = other.BldgStrengthLim;
        }
        if (other.HasBldgStrengthAdd) {
          BldgStrengthAdd = other.BldgStrengthAdd;
        }
        if (other.HasTimeCost) {
          TimeCost = other.TimeCost;
        }
        if (other.HasGoldCost) {
          GoldCost = other.GoldCost;
        }
        if (other.HasElecCost) {
          ElecCost = other.ElecCost;
        }
        if (other.costTable_.Count != 0) {
          result.costTable_.Add(other.costTable_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_bUILDINGFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _bUILDINGFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 16: {
              result.hasBldgType = input.ReadInt32(ref result.bldgType_);
              break;
            }
            case 24: {
              result.hasBldgLvl = input.ReadInt32(ref result.bldgLvl_);
              break;
            }
            case 34: {
              result.hasBldgName = input.ReadString(ref result.bldgName_);
              break;
            }
            case 42: {
              result.hasBldgKey = input.ReadString(ref result.bldgKey_);
              break;
            }
            case 48: {
              result.hasInUse = input.ReadInt32(ref result.inUse_);
              break;
            }
            case 56: {
              result.hasMaxBldgLvl = input.ReadInt32(ref result.maxBldgLvl_);
              break;
            }
            case 66: {
              result.hasPrefabName = input.ReadString(ref result.prefabName_);
              break;
            }
            case 74: {
              result.hasIconName = input.ReadString(ref result.iconName_);
              break;
            }
            case 82: {
              result.hasBldgInfo = input.ReadString(ref result.bldgInfo_);
              break;
            }
            case 88: {
              result.hasConId = input.ReadInt32(ref result.conId_);
              break;
            }
            case 96: {
              result.hasConPro = input.ReadInt32(ref result.conPro_);
              break;
            }
            case 104: {
              result.hasProId = input.ReadInt32(ref result.proId_);
              break;
            }
            case 114: {
              result.hasBldgFuncTableName = input.ReadString(ref result.bldgFuncTableName_);
              break;
            }
            case 120: {
              result.hasBldgFuncTableId = input.ReadInt32(ref result.bldgFuncTableId_);
              break;
            }
            case 128: {
              result.hasBldgStrengthLim = input.ReadInt32(ref result.bldgStrengthLim_);
              break;
            }
            case 136: {
              result.hasBldgStrengthAdd = input.ReadInt32(ref result.bldgStrengthAdd_);
              break;
            }
            case 144: {
              result.hasTimeCost = input.ReadInt32(ref result.timeCost_);
              break;
            }
            case 152: {
              result.hasGoldCost = input.ReadInt32(ref result.goldCost_);
              break;
            }
            case 160: {
              result.hasElecCost = input.ReadInt32(ref result.elecCost_);
              break;
            }
            case 170: {
              input.ReadMessageArray(tag, field_name, result.costTable_, global::com.game.framework.resource.data.BUILDING.Types.CostStruct.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasBldgType {
        get { return result.hasBldgType; }
      }
      public int BldgType {
        get { return result.BldgType; }
        set { SetBldgType(value); }
      }
      public Builder SetBldgType(int value) {
        PrepareBuilder();
        result.hasBldgType = true;
        result.bldgType_ = value;
        return this;
      }
      public Builder ClearBldgType() {
        PrepareBuilder();
        result.hasBldgType = false;
        result.bldgType_ = 0;
        return this;
      }
      
      public bool HasBldgLvl {
        get { return result.hasBldgLvl; }
      }
      public int BldgLvl {
        get { return result.BldgLvl; }
        set { SetBldgLvl(value); }
      }
      public Builder SetBldgLvl(int value) {
        PrepareBuilder();
        result.hasBldgLvl = true;
        result.bldgLvl_ = value;
        return this;
      }
      public Builder ClearBldgLvl() {
        PrepareBuilder();
        result.hasBldgLvl = false;
        result.bldgLvl_ = 0;
        return this;
      }
      
      public bool HasBldgName {
        get { return result.hasBldgName; }
      }
      public string BldgName {
        get { return result.BldgName; }
        set { SetBldgName(value); }
      }
      public Builder SetBldgName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBldgName = true;
        result.bldgName_ = value;
        return this;
      }
      public Builder ClearBldgName() {
        PrepareBuilder();
        result.hasBldgName = false;
        result.bldgName_ = "";
        return this;
      }
      
      public bool HasBldgKey {
        get { return result.hasBldgKey; }
      }
      public string BldgKey {
        get { return result.BldgKey; }
        set { SetBldgKey(value); }
      }
      public Builder SetBldgKey(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBldgKey = true;
        result.bldgKey_ = value;
        return this;
      }
      public Builder ClearBldgKey() {
        PrepareBuilder();
        result.hasBldgKey = false;
        result.bldgKey_ = "";
        return this;
      }
      
      public bool HasInUse {
        get { return result.hasInUse; }
      }
      public int InUse {
        get { return result.InUse; }
        set { SetInUse(value); }
      }
      public Builder SetInUse(int value) {
        PrepareBuilder();
        result.hasInUse = true;
        result.inUse_ = value;
        return this;
      }
      public Builder ClearInUse() {
        PrepareBuilder();
        result.hasInUse = false;
        result.inUse_ = 0;
        return this;
      }
      
      public bool HasMaxBldgLvl {
        get { return result.hasMaxBldgLvl; }
      }
      public int MaxBldgLvl {
        get { return result.MaxBldgLvl; }
        set { SetMaxBldgLvl(value); }
      }
      public Builder SetMaxBldgLvl(int value) {
        PrepareBuilder();
        result.hasMaxBldgLvl = true;
        result.maxBldgLvl_ = value;
        return this;
      }
      public Builder ClearMaxBldgLvl() {
        PrepareBuilder();
        result.hasMaxBldgLvl = false;
        result.maxBldgLvl_ = 0;
        return this;
      }
      
      public bool HasPrefabName {
        get { return result.hasPrefabName; }
      }
      public string PrefabName {
        get { return result.PrefabName; }
        set { SetPrefabName(value); }
      }
      public Builder SetPrefabName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPrefabName = true;
        result.prefabName_ = value;
        return this;
      }
      public Builder ClearPrefabName() {
        PrepareBuilder();
        result.hasPrefabName = false;
        result.prefabName_ = "";
        return this;
      }
      
      public bool HasIconName {
        get { return result.hasIconName; }
      }
      public string IconName {
        get { return result.IconName; }
        set { SetIconName(value); }
      }
      public Builder SetIconName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasIconName = true;
        result.iconName_ = value;
        return this;
      }
      public Builder ClearIconName() {
        PrepareBuilder();
        result.hasIconName = false;
        result.iconName_ = "";
        return this;
      }
      
      public bool HasBldgInfo {
        get { return result.hasBldgInfo; }
      }
      public string BldgInfo {
        get { return result.BldgInfo; }
        set { SetBldgInfo(value); }
      }
      public Builder SetBldgInfo(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBldgInfo = true;
        result.bldgInfo_ = value;
        return this;
      }
      public Builder ClearBldgInfo() {
        PrepareBuilder();
        result.hasBldgInfo = false;
        result.bldgInfo_ = "";
        return this;
      }
      
      public bool HasConId {
        get { return result.hasConId; }
      }
      public int ConId {
        get { return result.ConId; }
        set { SetConId(value); }
      }
      public Builder SetConId(int value) {
        PrepareBuilder();
        result.hasConId = true;
        result.conId_ = value;
        return this;
      }
      public Builder ClearConId() {
        PrepareBuilder();
        result.hasConId = false;
        result.conId_ = 0;
        return this;
      }
      
      public bool HasConPro {
        get { return result.hasConPro; }
      }
      public int ConPro {
        get { return result.ConPro; }
        set { SetConPro(value); }
      }
      public Builder SetConPro(int value) {
        PrepareBuilder();
        result.hasConPro = true;
        result.conPro_ = value;
        return this;
      }
      public Builder ClearConPro() {
        PrepareBuilder();
        result.hasConPro = false;
        result.conPro_ = 0;
        return this;
      }
      
      public bool HasProId {
        get { return result.hasProId; }
      }
      public int ProId {
        get { return result.ProId; }
        set { SetProId(value); }
      }
      public Builder SetProId(int value) {
        PrepareBuilder();
        result.hasProId = true;
        result.proId_ = value;
        return this;
      }
      public Builder ClearProId() {
        PrepareBuilder();
        result.hasProId = false;
        result.proId_ = 0;
        return this;
      }
      
      public bool HasBldgFuncTableName {
        get { return result.hasBldgFuncTableName; }
      }
      public string BldgFuncTableName {
        get { return result.BldgFuncTableName; }
        set { SetBldgFuncTableName(value); }
      }
      public Builder SetBldgFuncTableName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBldgFuncTableName = true;
        result.bldgFuncTableName_ = value;
        return this;
      }
      public Builder ClearBldgFuncTableName() {
        PrepareBuilder();
        result.hasBldgFuncTableName = false;
        result.bldgFuncTableName_ = "";
        return this;
      }
      
      public bool HasBldgFuncTableId {
        get { return result.hasBldgFuncTableId; }
      }
      public int BldgFuncTableId {
        get { return result.BldgFuncTableId; }
        set { SetBldgFuncTableId(value); }
      }
      public Builder SetBldgFuncTableId(int value) {
        PrepareBuilder();
        result.hasBldgFuncTableId = true;
        result.bldgFuncTableId_ = value;
        return this;
      }
      public Builder ClearBldgFuncTableId() {
        PrepareBuilder();
        result.hasBldgFuncTableId = false;
        result.bldgFuncTableId_ = 0;
        return this;
      }
      
      public bool HasBldgStrengthLim {
        get { return result.hasBldgStrengthLim; }
      }
      public int BldgStrengthLim {
        get { return result.BldgStrengthLim; }
        set { SetBldgStrengthLim(value); }
      }
      public Builder SetBldgStrengthLim(int value) {
        PrepareBuilder();
        result.hasBldgStrengthLim = true;
        result.bldgStrengthLim_ = value;
        return this;
      }
      public Builder ClearBldgStrengthLim() {
        PrepareBuilder();
        result.hasBldgStrengthLim = false;
        result.bldgStrengthLim_ = 0;
        return this;
      }
      
      public bool HasBldgStrengthAdd {
        get { return result.hasBldgStrengthAdd; }
      }
      public int BldgStrengthAdd {
        get { return result.BldgStrengthAdd; }
        set { SetBldgStrengthAdd(value); }
      }
      public Builder SetBldgStrengthAdd(int value) {
        PrepareBuilder();
        result.hasBldgStrengthAdd = true;
        result.bldgStrengthAdd_ = value;
        return this;
      }
      public Builder ClearBldgStrengthAdd() {
        PrepareBuilder();
        result.hasBldgStrengthAdd = false;
        result.bldgStrengthAdd_ = 0;
        return this;
      }
      
      public bool HasTimeCost {
        get { return result.hasTimeCost; }
      }
      public int TimeCost {
        get { return result.TimeCost; }
        set { SetTimeCost(value); }
      }
      public Builder SetTimeCost(int value) {
        PrepareBuilder();
        result.hasTimeCost = true;
        result.timeCost_ = value;
        return this;
      }
      public Builder ClearTimeCost() {
        PrepareBuilder();
        result.hasTimeCost = false;
        result.timeCost_ = 0;
        return this;
      }
      
      public bool HasGoldCost {
        get { return result.hasGoldCost; }
      }
      public int GoldCost {
        get { return result.GoldCost; }
        set { SetGoldCost(value); }
      }
      public Builder SetGoldCost(int value) {
        PrepareBuilder();
        result.hasGoldCost = true;
        result.goldCost_ = value;
        return this;
      }
      public Builder ClearGoldCost() {
        PrepareBuilder();
        result.hasGoldCost = false;
        result.goldCost_ = 0;
        return this;
      }
      
      public bool HasElecCost {
        get { return result.hasElecCost; }
      }
      public int ElecCost {
        get { return result.ElecCost; }
        set { SetElecCost(value); }
      }
      public Builder SetElecCost(int value) {
        PrepareBuilder();
        result.hasElecCost = true;
        result.elecCost_ = value;
        return this;
      }
      public Builder ClearElecCost() {
        PrepareBuilder();
        result.hasElecCost = false;
        result.elecCost_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::com.game.framework.resource.data.BUILDING.Types.CostStruct> CostTableList {
        get { return PrepareBuilder().costTable_; }
      }
      public int CostTableCount {
        get { return result.CostTableCount; }
      }
      public global::com.game.framework.resource.data.BUILDING.Types.CostStruct GetCostTable(int index) {
        return result.GetCostTable(index);
      }
      public Builder SetCostTable(int index, global::com.game.framework.resource.data.BUILDING.Types.CostStruct value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.costTable_[index] = value;
        return this;
      }
      public Builder SetCostTable(int index, global::com.game.framework.resource.data.BUILDING.Types.CostStruct.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.costTable_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddCostTable(global::com.game.framework.resource.data.BUILDING.Types.CostStruct value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.costTable_.Add(value);
        return this;
      }
      public Builder AddCostTable(global::com.game.framework.resource.data.BUILDING.Types.CostStruct.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.costTable_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeCostTable(scg::IEnumerable<global::com.game.framework.resource.data.BUILDING.Types.CostStruct> values) {
        PrepareBuilder();
        result.costTable_.Add(values);
        return this;
      }
      public Builder ClearCostTable() {
        PrepareBuilder();
        result.costTable_.Clear();
        return this;
      }
    }
    static BUILDING() {
      object.ReferenceEquals(global::com.game.framework.resource.data.BuildingBytes.Descriptor, null);
    }
  }
  
  public sealed partial class BUILDING_ARRAY : pb::GeneratedMessageLite<BUILDING_ARRAY, BUILDING_ARRAY.Builder> {
    private BUILDING_ARRAY() { }
    private static readonly BUILDING_ARRAY defaultInstance = new BUILDING_ARRAY().MakeReadOnly();
    private static readonly string[] _bUILDINGARRAYFieldNames = new string[] { "items" };
    private static readonly uint[] _bUILDINGARRAYFieldTags = new uint[] { 10 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BUILDING_ARRAY DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override BUILDING_ARRAY DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BUILDING_ARRAY ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int ItemsFieldNumber = 1;
    private pbc::PopsicleList<global::com.game.framework.resource.data.BUILDING> items_ = new pbc::PopsicleList<global::com.game.framework.resource.data.BUILDING>();
    public scg::IList<global::com.game.framework.resource.data.BUILDING> ItemsList {
      get { return items_; }
    }
    public int ItemsCount {
      get { return items_.Count; }
    }
    public global::com.game.framework.resource.data.BUILDING GetItems(int index) {
      return items_[index];
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        foreach (global::com.game.framework.resource.data.BUILDING element in ItemsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _bUILDINGARRAYFieldNames;
      if (items_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], items_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::com.game.framework.resource.data.BUILDING element in ItemsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      foreach(global::com.game.framework.resource.data.BUILDING i in items_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      BUILDING_ARRAY other = obj as BUILDING_ARRAY;
      if (other == null) return false;
      if(items_.Count != other.items_.Count) return false;
      for(int ix=0; ix < items_.Count; ix++)
        if(!items_[ix].Equals(other.items_[ix])) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BUILDING_ARRAY ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BUILDING_ARRAY ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BUILDING_ARRAY ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BUILDING_ARRAY ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BUILDING_ARRAY ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BUILDING_ARRAY ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BUILDING_ARRAY ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BUILDING_ARRAY ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BUILDING_ARRAY ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BUILDING_ARRAY ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BUILDING_ARRAY MakeReadOnly() {
      items_.MakeReadOnly();
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(BUILDING_ARRAY prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<BUILDING_ARRAY, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BUILDING_ARRAY cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BUILDING_ARRAY result;
      
      private BUILDING_ARRAY PrepareBuilder() {
        if (resultIsReadOnly) {
          BUILDING_ARRAY original = result;
          result = new BUILDING_ARRAY();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BUILDING_ARRAY MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override BUILDING_ARRAY DefaultInstanceForType {
        get { return global::com.game.framework.resource.data.BUILDING_ARRAY.DefaultInstance; }
      }
      
      public override BUILDING_ARRAY BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is BUILDING_ARRAY) {
          return MergeFrom((BUILDING_ARRAY) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BUILDING_ARRAY other) {
        if (other == global::com.game.framework.resource.data.BUILDING_ARRAY.DefaultInstance) return this;
        PrepareBuilder();
        if (other.items_.Count != 0) {
          result.items_.Add(other.items_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_bUILDINGARRAYFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _bUILDINGARRAYFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.items_, global::com.game.framework.resource.data.BUILDING.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public pbc::IPopsicleList<global::com.game.framework.resource.data.BUILDING> ItemsList {
        get { return PrepareBuilder().items_; }
      }
      public int ItemsCount {
        get { return result.ItemsCount; }
      }
      public global::com.game.framework.resource.data.BUILDING GetItems(int index) {
        return result.GetItems(index);
      }
      public Builder SetItems(int index, global::com.game.framework.resource.data.BUILDING value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.items_[index] = value;
        return this;
      }
      public Builder SetItems(int index, global::com.game.framework.resource.data.BUILDING.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.items_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddItems(global::com.game.framework.resource.data.BUILDING value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.items_.Add(value);
        return this;
      }
      public Builder AddItems(global::com.game.framework.resource.data.BUILDING.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.items_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeItems(scg::IEnumerable<global::com.game.framework.resource.data.BUILDING> values) {
        PrepareBuilder();
        result.items_.Add(values);
        return this;
      }
      public Builder ClearItems() {
        PrepareBuilder();
        result.items_.Clear();
        return this;
      }
    }
    static BUILDING_ARRAY() {
      object.ReferenceEquals(global::com.game.framework.resource.data.BuildingBytes.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
#pragma warning restore
